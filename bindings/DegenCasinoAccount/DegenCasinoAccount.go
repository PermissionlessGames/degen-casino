// This file was generated by seer: https://github.com/G7DAO/seer.
// seer version: 0.3.15
// seer command: seer evm generate --package DegenCasinoAccount --cli --foundry out/AccountSystem.sol/DegenCasinoAccount.json --struct DegenCasinoAccount --output bindings/DegenCasinoAccount/DegenCasinoAccount.go
// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package DegenCasinoAccount

import (
	"bytes"
	"crypto/rand"
	"errors"
	"math/big"
	"net/http"
	"strings"

	"context"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
	"github.com/ethereum/go-ethereum/signer/core/apitypes"

	// Reference imports to suppress errors if they are not otherwise used.
	"encoding/hex"
	"encoding/json"
	"fmt"
	"os"
	"time"

	"github.com/G7DAO/seer/bindings/CreateCall"
	"github.com/G7DAO/seer/bindings/GnosisSafe"
	"github.com/ethereum/go-ethereum/accounts/keystore"
	"github.com/ethereum/go-ethereum/ethclient"
	"github.com/spf13/cobra"
	"golang.org/x/term"

	// Action is an auto generated low-level Go binding around an user-defined struct.
	"github.com/ethereum/go-ethereum/common/math"
	"github.com/ethereum/go-ethereum/crypto"
)

var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

type Action struct {
	Game    common.Address
	Data    []byte
	Value   *big.Int
	Request *big.Int
}

// ExecutorTerms is an auto generated low-level Go binding around an user-defined struct.
type ExecutorTerms struct {
	RewardTokens []common.Address
	BasisPoints  []uint16
}

// DegenCasinoAccountMetaData contains all meta data concerning the DegenCasinoAccount contract.
var DegenCasinoAccountMetaData = &bind.MetaData{
	ABI: "[{\"type\":\"constructor\",\"inputs\":[{\"name\":\"_player\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"receive\",\"stateMutability\":\"payable\"},{\"type\":\"function\",\"name\":\"accountVersion\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string\",\"internalType\":\"string\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"actionHash\",\"inputs\":[{\"name\":\"action\",\"type\":\"tuple\",\"internalType\":\"structAction\",\"components\":[{\"name\":\"game\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"data\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"value\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"request\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]}],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"drain\",\"inputs\":[{\"name\":\"tokenAddresses\",\"type\":\"address[]\",\"internalType\":\"address[]\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"eip712Domain\",\"inputs\":[],\"outputs\":[{\"name\":\"fields\",\"type\":\"bytes1\",\"internalType\":\"bytes1\"},{\"name\":\"name\",\"type\":\"string\",\"internalType\":\"string\"},{\"name\":\"version\",\"type\":\"string\",\"internalType\":\"string\"},{\"name\":\"chainId\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"verifyingContract\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"salt\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"extensions\",\"type\":\"uint256[]\",\"internalType\":\"uint256[]\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"executorTermsHash\",\"inputs\":[{\"name\":\"terms\",\"type\":\"tuple\",\"internalType\":\"structExecutorTerms\",\"components\":[{\"name\":\"rewardTokens\",\"type\":\"address[]\",\"internalType\":\"address[]\"},{\"name\":\"basisPoints\",\"type\":\"uint16[]\",\"internalType\":\"uint16[]\"}]}],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"lastRequest\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"play\",\"inputs\":[{\"name\":\"action\",\"type\":\"tuple\",\"internalType\":\"structAction\",\"components\":[{\"name\":\"game\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"data\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"value\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"request\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"name\":\"terms\",\"type\":\"tuple\",\"internalType\":\"structExecutorTerms\",\"components\":[{\"name\":\"rewardTokens\",\"type\":\"address[]\",\"internalType\":\"address[]\"},{\"name\":\"basisPoints\",\"type\":\"uint16[]\",\"internalType\":\"uint16[]\"}]},{\"name\":\"playerActionSignature\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"playerTermsSignature\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"playInSession\",\"inputs\":[{\"name\":\"action\",\"type\":\"tuple\",\"internalType\":\"structAction\",\"components\":[{\"name\":\"game\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"data\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"value\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"request\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"name\":\"terms\",\"type\":\"tuple\",\"internalType\":\"structExecutorTerms\",\"components\":[{\"name\":\"rewardTokens\",\"type\":\"address[]\",\"internalType\":\"address[]\"},{\"name\":\"basisPoints\",\"type\":\"uint16[]\",\"internalType\":\"uint16[]\"}]},{\"name\":\"sessionID\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"expiration\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"playerSessionSignature\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"playerTermsSignature\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"player\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"sessionHash\",\"inputs\":[{\"name\":\"executor\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"sessionID\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"expiration\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"withdraw\",\"inputs\":[{\"name\":\"tokenAddresses\",\"type\":\"address[]\",\"internalType\":\"address[]\"},{\"name\":\"amounts\",\"type\":\"uint256[]\",\"internalType\":\"uint256[]\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"event\",\"name\":\"EIP712DomainChanged\",\"inputs\":[],\"anonymous\":false},{\"type\":\"error\",\"name\":\"ActionFailed\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"FailedToSendReward\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidPlayerActionSignature\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidPlayerTermsSignature\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidSessionSignature\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidShortString\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"MismatchedArrayLengths\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"RequestTooLow\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"SessionExpired\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"StringTooLong\",\"inputs\":[{\"name\":\"str\",\"type\":\"string\",\"internalType\":\"string\"}]},{\"type\":\"error\",\"name\":\"Unauthorized\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"Unsuccessful\",\"inputs\":[]}]",
	Bin: "0x610160604052348015610010575f5ffd5b50604051611f6a380380611f6a83398101604081905261002f916101bc565b6040805180820182526012815271111959d95b90d85cda5b9bd058d8dbdd5b9d60721b602080830191909152825180840190935260018352603160f81b908301529061007b825f610144565b6101205261008a816001610144565b61014052815160208084019190912060e052815190820120610100524660a05261011660e05161010051604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201529081019290925260608201524660808201523060a08201525f9060c00160405160208183030381529060405280519060200120905090565b60805250503060c052600280546001600160a01b0319166001600160a01b0392909216919091179055610393565b5f60208351101561015f5761015883610176565b9050610170565b8161016a8482610281565b5060ff90505b92915050565b5f5f829050601f815111156101a9578260405163305a27a960e01b81526004016101a0919061033b565b60405180910390fd5b80516101b482610370565b179392505050565b5f602082840312156101cc575f5ffd5b81516001600160a01b03811681146101e2575f5ffd5b9392505050565b634e487b7160e01b5f52604160045260245ffd5b600181811c9082168061021157607f821691505b60208210810361022f57634e487b7160e01b5f52602260045260245ffd5b50919050565b601f82111561027c57805f5260205f20601f840160051c8101602085101561025a5750805b601f840160051c820191505b81811015610279575f8155600101610266565b50505b505050565b81516001600160401b0381111561029a5761029a6101e9565b6102ae816102a884546101fd565b84610235565b6020601f8211600181146102e0575f83156102c95750848201515b5f19600385901b1c1916600184901b178455610279565b5f84815260208120601f198516915b8281101561030f57878501518255602094850194600190920191016102ef565b508482101561032c57868401515f19600387901b60f8161c191681555b50505050600190811b01905550565b602081525f82518060208401528060208501604085015e5f604082850101526040601f19601f83011684010191505092915050565b8051602080830151919081101561022f575f1960209190910360031b1b16919050565b60805160a05160c05160e051610100516101205161014051611b866103e45f395f610a0201525f6109d101525f610fc501525f610f9d01525f610ef801525f610f2201525f610f4c0152611b865ff3fe60806040526004361061009d575f3560e01c8063a71f8a3e11610062578063a71f8a3e14610192578063b1ebcf09146101b1578063b76084ed146101d0578063cd9deaca146101ef578063de6d6d9614610204578063fb1bf11914610223575f5ffd5b806301fa4150146100a8578063294f56a6146100c957806348db5f89146100fb578063535e15471461013257806384b0196e1461016b575f5ffd5b366100a457005b5f5ffd5b3480156100b3575f5ffd5b506100c76100c2366004611424565b610242565b005b3480156100d4575f5ffd5b506100e86100e3366004611455565b610433565b6040519081526020015b60405180910390f35b348015610106575f5ffd5b5060025461011a906001600160a01b031681565b6040516001600160a01b0390911681526020016100f2565b34801561013d575f5ffd5b5061015e604051806040016040528060018152602001603160f81b81525081565b6040516100f291906114b3565b348015610176575f5ffd5b5061017f6104a9565b6040516100f297969594939291906114cc565b34801561019d575f5ffd5b506100e86101ac366004611655565b6104eb565b3480156101bc575f5ffd5b506100e86101cb36600461175b565b61056a565b3480156101db575f5ffd5b506100c76101ea36600461178c565b610603565b3480156101fa575f5ffd5b506100e860035481565b34801561020f575f5ffd5b506100c761021e366004611852565b6106e3565b34801561022e575f5ffd5b506100c761023d36600461190e565b6108b6565b6002546001600160a01b0316331461026c576040516282b42960e81b815260040160405180910390fd5b5f5b815181101561042f575f5f6001600160a01b0316838381518110610294576102946119c3565b60200260200101516001600160a01b031603610326575060025460405147915f916001600160a01b039091169083908381818185875af1925050503d805f81146102f9576040519150601f19603f3d011682016040523d82523d5f602084013e6102fe565b606091505b5050905080610320576040516381775cc360e01b815260040160405180910390fd5b50610426565b5f838381518110610339576103396119c3565b60209081029190910101516040516370a0823160e01b81523060048201529091506001600160a01b038216906370a0823190602401602060405180830381865afa158015610389573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906103ad91906119d7565b60025460405163a9059cbb60e01b81526001600160a01b0391821660048201526024810183905291935082169063a9059cbb906044016020604051808303815f875af11580156103ff573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061042391906119ee565b50505b5060010161026e565b5050565b604080517fca02d99f3db343fb31b6b3450b8b01ab1a5ee5fe3546d186cb18adfed414f14260208201526001600160a01b0385169181019190915260608101839052608081018290525f906104a19060a0015b6040516020818303038152906040528051906020012061099e565b949350505050565b5f6060805f5f5f60606104ba6109ca565b6104c26109fb565b604080515f80825260208201909252600f60f81b9b939a50919850469750309650945092509050565b5f6105647e01bc44bf02c89b0b73ae32efb1fd056563fcb99b0eaa6c14883420d1534ae8835f0151846020015180519060200120856040015186606001516040516020016104869594939291909485526001600160a01b0393909316602085015260408401919091526060830152608082015260a00190565b92915050565b5f6105647f8e2cde8bc847d0bf8bfaa4c7d8a948811efeb03adb250508f930f62cce908c47835f01516040516020016105a39190611a0d565b6040516020818303038152906040528051906020012084602001516040516020016105ce9190611a4b565b60408051601f198184030181528282528051602091820120908301949094528101919091526060810191909152608001610486565b6020850151518551511461062a57604051632b477e7160e11b815260040160405180910390fd5b5f610636338686610433565b600254909150610650906001600160a01b03168285610a28565b61066d57604051634a7b820b60e11b815260040160405180910390fd5b8342111561068e57604051630fe82d2560e11b815260040160405180910390fd5b5f6106988761056a565b6002549091506106b2906001600160a01b03168285610a28565b6106cf5760405163cbdd469560e01b815260040160405180910390fd5b6106d98888610a87565b5050505050505050565b6002546001600160a01b0316331461070d576040516282b42960e81b815260040160405180910390fd5b5f5b82518110156108b1575f6001600160a01b0316838281518110610734576107346119c3565b60200260200101516001600160a01b0316036107df5760025482515f916001600160a01b03169084908490811061076d5761076d6119c3565b60200260200101516040515f6040518083038185875af1925050503d805f81146107b2576040519150601f19603f3d011682016040523d82523d5f602084013e6107b7565b606091505b50509050806107d9576040516381775cc360e01b815260040160405180910390fd5b506108a9565b8281815181106107f1576107f16119c3565b60200260200101516001600160a01b031663a9059cbb60025f9054906101000a90046001600160a01b031684848151811061082e5761082e6119c3565b60200260200101516040518363ffffffff1660e01b81526004016108679291906001600160a01b03929092168252602082015260400190565b6020604051808303815f875af1158015610883573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906108a791906119ee565b505b60010161070f565b505050565b6003548460600151116108dc57604051637699333d60e11b815260040160405180910390fd5b6020830151518351511461090357604051632b477e7160e11b815260040160405180910390fd5b60608401516003555f610915856104eb565b90505f6109218561056a565b60025490915061093b906001600160a01b03168386610a28565b610958576040516383abd19560e01b815260040160405180910390fd5b60025461096f906001600160a01b03168285610a28565b61098c5760405163cbdd469560e01b815260040160405180910390fd5b6109968686610a87565b505050505050565b5f6105646109aa610eec565b8360405161190160f01b8152600281019290925260228201526042902090565b60606109f67f00000000000000000000000000000000000000000000000000000000000000005f611015565b905090565b60606109f67f00000000000000000000000000000000000000000000000000000000000000006001611015565b5f5f5f610a3585856110bf565b5090925090505f816003811115610a4e57610a4e611a79565b148015610a6c5750856001600160a01b0316826001600160a01b0316145b80610a7d5750610a7d868686611108565b9695505050505050565b8051515f906001600160401b03811115610aa357610aa361130a565b604051908082528060200260200182016040528015610acc578160200160208202803683370190505b5090505f5b825151811015610bd957825180515f919083908110610af257610af26119c3565b60200260200101516001600160a01b031603610b2c5747828281518110610b1b57610b1b6119c3565b602002602001018181525050610bd1565b8251805182908110610b4057610b406119c3565b60209081029190910101516040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015610b8e573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610bb291906119d7565b828281518110610bc457610bc46119c3565b6020026020010181815250505b600101610ad1565b505f835f01516001600160a01b031684604001518560200151604051610bff9190611a8d565b5f6040518083038185875af1925050503d805f8114610c39576040519150601f19603f3d011682016040523d82523d5f602084013e610c3e565b606091505b5050905080610c605760405163080a1c2760e01b815260040160405180910390fd5b5f5b835151811015610ee557835180515f91829184908110610c8457610c846119c3565b60200260200101516001600160a01b031603610ca1575047610d2a565b8451805183908110610cb557610cb56119c3565b60209081029190910101516040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015610d03573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610d2791906119d7565b90505b838281518110610d3c57610d3c6119c3565b6020026020010151811115610edc575f848381518110610d5e57610d5e6119c3565b602002602001015182610d719190611ab7565b90505f61271087602001518581518110610d8d57610d8d6119c3565b602002602001015161ffff1683610da49190611aca565b610dae9190611ae1565b875180519192505f9186908110610dc757610dc76119c3565b60200260200101516001600160a01b031603610e49576040515f90339083908381818185875af1925050503d805f8114610e1c576040519150601f19603f3d011682016040523d82523d5f602084013e610e21565b606091505b5050905080610e435760405163c96d18b560e01b815260040160405180910390fd5b50610ed9565b8651805185908110610e5d57610e5d6119c3565b602090810291909101015160405163a9059cbb60e01b8152336004820152602481018390526001600160a01b039091169063a9059cbb906044016020604051808303815f875af1158015610eb3573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610ed791906119ee565b505b50505b50600101610c62565b5050505050565b5f306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148015610f4457507f000000000000000000000000000000000000000000000000000000000000000046145b15610f6e57507f000000000000000000000000000000000000000000000000000000000000000090565b6109f6604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201527f0000000000000000000000000000000000000000000000000000000000000000918101919091527f000000000000000000000000000000000000000000000000000000000000000060608201524660808201523060a08201525f9060c00160405160208183030381529060405280519060200120905090565b606060ff831461102f57611028836111de565b9050610564565b81805461103b90611b00565b80601f016020809104026020016040519081016040528092919081815260200182805461106790611b00565b80156110b25780601f10611089576101008083540402835291602001916110b2565b820191905f5260205f20905b81548152906001019060200180831161109557829003601f168201915b5050505050905092915050565b5f5f5f83516041036110f6576020840151604085015160608601515f1a6110e88882858561121b565b955095509550505050611101565b505081515f91506002905b9250925092565b5f5f5f856001600160a01b03168585604051602401611128929190611b38565b60408051601f198184030181529181526020820180516001600160e01b0316630b135d3f60e11b1790525161115d9190611a8d565b5f60405180830381855afa9150503d805f8114611195576040519150601f19603f3d011682016040523d82523d5f602084013e61119a565b606091505b50915091508180156111ae57506020815110155b8015610a7d57508051630b135d3f60e11b906111d390830160209081019084016119d7565b149695505050505050565b60605f6111ea836112e3565b6040805160208082528183019092529192505f91906020820181803683375050509182525060208101929092525090565b5f80807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a084111561125457505f915060039050826112d9565b604080515f808252602082018084528a905260ff891692820192909252606081018790526080810186905260019060a0016020604051602081039080840390855afa1580156112a5573d5f5f3e3d5ffd5b5050604051601f1901519150506001600160a01b0381166112d057505f9250600191508290506112d9565b92505f91508190505b9450945094915050565b5f60ff8216601f81111561056457604051632cd44ac360e21b815260040160405180910390fd5b634e487b7160e01b5f52604160045260245ffd5b604080519081016001600160401b03811182821017156113405761134061130a565b60405290565b604051601f8201601f191681016001600160401b038111828210171561136e5761136e61130a565b604052919050565b5f6001600160401b0382111561138e5761138e61130a565b5060051b60200190565b80356001600160a01b03811681146113ae575f5ffd5b919050565b5f82601f8301126113c2575f5ffd5b81356113d56113d082611376565b611346565b8082825260208201915060208360051b8601019250858311156113f6575f5ffd5b602085015b8381101561141a5761140c81611398565b8352602092830192016113fb565b5095945050505050565b5f60208284031215611434575f5ffd5b81356001600160401b03811115611449575f5ffd5b6104a1848285016113b3565b5f5f5f60608486031215611467575f5ffd5b61147084611398565b95602085013595506040909401359392505050565b5f81518084528060208401602086015e5f602082860101526020601f19601f83011685010191505092915050565b602081525f6114c56020830184611485565b9392505050565b60ff60f81b8816815260e060208201525f6114ea60e0830189611485565b82810360408401526114fc8189611485565b606084018890526001600160a01b038716608085015260a0840186905283810360c0850152845180825260208087019350909101905f5b81811015611551578351835260209384019390920191600101611533565b50909b9a5050505050505050505050565b5f82601f830112611571575f5ffd5b81356001600160401b0381111561158a5761158a61130a565b61159d601f8201601f1916602001611346565b8181528460208386010111156115b1575f5ffd5b816020850160208301375f918101602001919091529392505050565b5f608082840312156115dd575f5ffd5b604051608081016001600160401b03811182821017156115ff576115ff61130a565b60405290508061160e83611398565b815260208301356001600160401b03811115611628575f5ffd5b61163485828601611562565b60208301525060408381013590820152606092830135920191909152919050565b5f60208284031215611665575f5ffd5b81356001600160401b0381111561167a575f5ffd5b6104a1848285016115cd565b5f60408284031215611696575f5ffd5b61169e61131e565b905081356001600160401b038111156116b5575f5ffd5b6116c1848285016113b3565b82525060208201356001600160401b038111156116dc575f5ffd5b8201601f810184136116ec575f5ffd5b80356116fa6113d082611376565b8082825260208201915060208360051b85010192508683111561171b575f5ffd5b6020840193505b8284101561174c57833561ffff8116811461173b575f5ffd5b825260209384019390910190611722565b60208501525091949350505050565b5f6020828403121561176b575f5ffd5b81356001600160401b03811115611780575f5ffd5b6104a184828501611686565b5f5f5f5f5f5f60c087890312156117a1575f5ffd5b86356001600160401b038111156117b6575f5ffd5b6117c289828a016115cd565b96505060208701356001600160401b038111156117dd575f5ffd5b6117e989828a01611686565b955050604087013593506060870135925060808701356001600160401b03811115611812575f5ffd5b61181e89828a01611562565b92505060a08701356001600160401b03811115611839575f5ffd5b61184589828a01611562565b9150509295509295509295565b5f5f60408385031215611863575f5ffd5b82356001600160401b03811115611878575f5ffd5b611884858286016113b3565b92505060208301356001600160401b0381111561189f575f5ffd5b8301601f810185136118af575f5ffd5b80356118bd6113d082611376565b8082825260208201915060208360051b8501019250878311156118de575f5ffd5b6020840193505b828410156119005783358252602093840193909101906118e5565b809450505050509250929050565b5f5f5f5f60808587031215611921575f5ffd5b84356001600160401b03811115611936575f5ffd5b611942878288016115cd565b94505060208501356001600160401b0381111561195d575f5ffd5b61196987828801611686565b93505060408501356001600160401b03811115611984575f5ffd5b61199087828801611562565b92505060608501356001600160401b038111156119ab575f5ffd5b6119b787828801611562565b91505092959194509250565b634e487b7160e01b5f52603260045260245ffd5b5f602082840312156119e7575f5ffd5b5051919050565b5f602082840312156119fe575f5ffd5b815180151581146114c5575f5ffd5b81515f90829060208501835b82811015611a405781516001600160a01b0316845260209384019390910190600101611a19565b509195945050505050565b81515f90829060208501835b82811015611a4057815161ffff16845260209384019390910190600101611a57565b634e487b7160e01b5f52602160045260245ffd5b5f82518060208501845e5f920191825250919050565b634e487b7160e01b5f52601160045260245ffd5b8181038181111561056457610564611aa3565b808202811582820484141761056457610564611aa3565b5f82611afb57634e487b7160e01b5f52601260045260245ffd5b500490565b600181811c90821680611b1457607f821691505b602082108103611b3257634e487b7160e01b5f52602260045260245ffd5b50919050565b828152604060208201525f6104a1604083018461148556fea26469706673582212206a714ecf6d0a4cfec2d5c2769d259ef9fa8ad9d1f246f80c87e89568fb25e68464736f6c634300081c0033",
}

// DegenCasinoAccountABI is the input ABI used to generate the binding from.
// Deprecated: Use DegenCasinoAccountMetaData.ABI instead.
var DegenCasinoAccountABI = DegenCasinoAccountMetaData.ABI

// DegenCasinoAccountBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use DegenCasinoAccountMetaData.Bin instead.
var DegenCasinoAccountBin = DegenCasinoAccountMetaData.Bin

// DeployDegenCasinoAccount deploys a new Ethereum contract, binding an instance of DegenCasinoAccount to it.
func DeployDegenCasinoAccount(auth *bind.TransactOpts, backend bind.ContractBackend, _player common.Address) (common.Address, *types.Transaction, *DegenCasinoAccount, error) {
	parsed, err := DegenCasinoAccountMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(DegenCasinoAccountBin), backend, _player)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &DegenCasinoAccount{DegenCasinoAccountCaller: DegenCasinoAccountCaller{contract: contract}, DegenCasinoAccountTransactor: DegenCasinoAccountTransactor{contract: contract}, DegenCasinoAccountFilterer: DegenCasinoAccountFilterer{contract: contract}}, nil
}

// DegenCasinoAccount is an auto generated Go binding around an Ethereum contract.
type DegenCasinoAccount struct {
	DegenCasinoAccountCaller     // Read-only binding to the contract
	DegenCasinoAccountTransactor // Write-only binding to the contract
	DegenCasinoAccountFilterer   // Log filterer for contract events
}

// DegenCasinoAccountCaller is an auto generated read-only Go binding around an Ethereum contract.
type DegenCasinoAccountCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DegenCasinoAccountTransactor is an auto generated write-only Go binding around an Ethereum contract.
type DegenCasinoAccountTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DegenCasinoAccountFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type DegenCasinoAccountFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DegenCasinoAccountSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type DegenCasinoAccountSession struct {
	Contract     *DegenCasinoAccount // Generic contract binding to set the session for
	CallOpts     bind.CallOpts       // Call options to use throughout this session
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// DegenCasinoAccountCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type DegenCasinoAccountCallerSession struct {
	Contract *DegenCasinoAccountCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts             // Call options to use throughout this session
}

// DegenCasinoAccountTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type DegenCasinoAccountTransactorSession struct {
	Contract     *DegenCasinoAccountTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts             // Transaction auth options to use throughout this session
}

// DegenCasinoAccountRaw is an auto generated low-level Go binding around an Ethereum contract.
type DegenCasinoAccountRaw struct {
	Contract *DegenCasinoAccount // Generic contract binding to access the raw methods on
}

// DegenCasinoAccountCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type DegenCasinoAccountCallerRaw struct {
	Contract *DegenCasinoAccountCaller // Generic read-only contract binding to access the raw methods on
}

// DegenCasinoAccountTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type DegenCasinoAccountTransactorRaw struct {
	Contract *DegenCasinoAccountTransactor // Generic write-only contract binding to access the raw methods on
}

// NewDegenCasinoAccount creates a new instance of DegenCasinoAccount, bound to a specific deployed contract.
func NewDegenCasinoAccount(address common.Address, backend bind.ContractBackend) (*DegenCasinoAccount, error) {
	contract, err := bindDegenCasinoAccount(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &DegenCasinoAccount{DegenCasinoAccountCaller: DegenCasinoAccountCaller{contract: contract}, DegenCasinoAccountTransactor: DegenCasinoAccountTransactor{contract: contract}, DegenCasinoAccountFilterer: DegenCasinoAccountFilterer{contract: contract}}, nil
}

// NewDegenCasinoAccountCaller creates a new read-only instance of DegenCasinoAccount, bound to a specific deployed contract.
func NewDegenCasinoAccountCaller(address common.Address, caller bind.ContractCaller) (*DegenCasinoAccountCaller, error) {
	contract, err := bindDegenCasinoAccount(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &DegenCasinoAccountCaller{contract: contract}, nil
}

// NewDegenCasinoAccountTransactor creates a new write-only instance of DegenCasinoAccount, bound to a specific deployed contract.
func NewDegenCasinoAccountTransactor(address common.Address, transactor bind.ContractTransactor) (*DegenCasinoAccountTransactor, error) {
	contract, err := bindDegenCasinoAccount(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &DegenCasinoAccountTransactor{contract: contract}, nil
}

// NewDegenCasinoAccountFilterer creates a new log filterer instance of DegenCasinoAccount, bound to a specific deployed contract.
func NewDegenCasinoAccountFilterer(address common.Address, filterer bind.ContractFilterer) (*DegenCasinoAccountFilterer, error) {
	contract, err := bindDegenCasinoAccount(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &DegenCasinoAccountFilterer{contract: contract}, nil
}

// bindDegenCasinoAccount binds a generic wrapper to an already deployed contract.
func bindDegenCasinoAccount(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := DegenCasinoAccountMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_DegenCasinoAccount *DegenCasinoAccountRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _DegenCasinoAccount.Contract.DegenCasinoAccountCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_DegenCasinoAccount *DegenCasinoAccountRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DegenCasinoAccount.Contract.DegenCasinoAccountTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_DegenCasinoAccount *DegenCasinoAccountRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _DegenCasinoAccount.Contract.DegenCasinoAccountTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_DegenCasinoAccount *DegenCasinoAccountCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _DegenCasinoAccount.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_DegenCasinoAccount *DegenCasinoAccountTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DegenCasinoAccount.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_DegenCasinoAccount *DegenCasinoAccountTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _DegenCasinoAccount.Contract.contract.Transact(opts, method, params...)
}

// AccountVersion is a free data retrieval call binding the contract method 0x535e1547.
//
// Solidity: function accountVersion() view returns(string)
func (_DegenCasinoAccount *DegenCasinoAccountCaller) AccountVersion(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _DegenCasinoAccount.contract.Call(opts, &out, "accountVersion")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// AccountVersion is a free data retrieval call binding the contract method 0x535e1547.
//
// Solidity: function accountVersion() view returns(string)
func (_DegenCasinoAccount *DegenCasinoAccountSession) AccountVersion() (string, error) {
	return _DegenCasinoAccount.Contract.AccountVersion(&_DegenCasinoAccount.CallOpts)
}

// AccountVersion is a free data retrieval call binding the contract method 0x535e1547.
//
// Solidity: function accountVersion() view returns(string)
func (_DegenCasinoAccount *DegenCasinoAccountCallerSession) AccountVersion() (string, error) {
	return _DegenCasinoAccount.Contract.AccountVersion(&_DegenCasinoAccount.CallOpts)
}

// ActionHash is a free data retrieval call binding the contract method 0xa71f8a3e.
//
// Solidity: function actionHash((address,bytes,uint256,uint256) action) view returns(bytes32)
func (_DegenCasinoAccount *DegenCasinoAccountCaller) ActionHash(opts *bind.CallOpts, action Action) ([32]byte, error) {
	var out []interface{}
	err := _DegenCasinoAccount.contract.Call(opts, &out, "actionHash", action)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ActionHash is a free data retrieval call binding the contract method 0xa71f8a3e.
//
// Solidity: function actionHash((address,bytes,uint256,uint256) action) view returns(bytes32)
func (_DegenCasinoAccount *DegenCasinoAccountSession) ActionHash(action Action) ([32]byte, error) {
	return _DegenCasinoAccount.Contract.ActionHash(&_DegenCasinoAccount.CallOpts, action)
}

// ActionHash is a free data retrieval call binding the contract method 0xa71f8a3e.
//
// Solidity: function actionHash((address,bytes,uint256,uint256) action) view returns(bytes32)
func (_DegenCasinoAccount *DegenCasinoAccountCallerSession) ActionHash(action Action) ([32]byte, error) {
	return _DegenCasinoAccount.Contract.ActionHash(&_DegenCasinoAccount.CallOpts, action)
}

// Eip712Domain is a free data retrieval call binding the contract method 0x84b0196e.
//
// Solidity: function eip712Domain() view returns(bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)
func (_DegenCasinoAccount *DegenCasinoAccountCaller) Eip712Domain(opts *bind.CallOpts) (struct {
	Fields            [1]byte
	Name              string
	Version           string
	ChainId           *big.Int
	VerifyingContract common.Address
	Salt              [32]byte
	Extensions        []*big.Int
}, error) {
	var out []interface{}
	err := _DegenCasinoAccount.contract.Call(opts, &out, "eip712Domain")

	outstruct := new(struct {
		Fields            [1]byte
		Name              string
		Version           string
		ChainId           *big.Int
		VerifyingContract common.Address
		Salt              [32]byte
		Extensions        []*big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Fields = *abi.ConvertType(out[0], new([1]byte)).(*[1]byte)
	outstruct.Name = *abi.ConvertType(out[1], new(string)).(*string)
	outstruct.Version = *abi.ConvertType(out[2], new(string)).(*string)
	outstruct.ChainId = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	outstruct.VerifyingContract = *abi.ConvertType(out[4], new(common.Address)).(*common.Address)
	outstruct.Salt = *abi.ConvertType(out[5], new([32]byte)).(*[32]byte)
	outstruct.Extensions = *abi.ConvertType(out[6], new([]*big.Int)).(*[]*big.Int)

	return *outstruct, err

}

// Eip712Domain is a free data retrieval call binding the contract method 0x84b0196e.
//
// Solidity: function eip712Domain() view returns(bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)
func (_DegenCasinoAccount *DegenCasinoAccountSession) Eip712Domain() (struct {
	Fields            [1]byte
	Name              string
	Version           string
	ChainId           *big.Int
	VerifyingContract common.Address
	Salt              [32]byte
	Extensions        []*big.Int
}, error) {
	return _DegenCasinoAccount.Contract.Eip712Domain(&_DegenCasinoAccount.CallOpts)
}

// Eip712Domain is a free data retrieval call binding the contract method 0x84b0196e.
//
// Solidity: function eip712Domain() view returns(bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)
func (_DegenCasinoAccount *DegenCasinoAccountCallerSession) Eip712Domain() (struct {
	Fields            [1]byte
	Name              string
	Version           string
	ChainId           *big.Int
	VerifyingContract common.Address
	Salt              [32]byte
	Extensions        []*big.Int
}, error) {
	return _DegenCasinoAccount.Contract.Eip712Domain(&_DegenCasinoAccount.CallOpts)
}

// ExecutorTermsHash is a free data retrieval call binding the contract method 0xb1ebcf09.
//
// Solidity: function executorTermsHash((address[],uint16[]) terms) view returns(bytes32)
func (_DegenCasinoAccount *DegenCasinoAccountCaller) ExecutorTermsHash(opts *bind.CallOpts, terms ExecutorTerms) ([32]byte, error) {
	var out []interface{}
	err := _DegenCasinoAccount.contract.Call(opts, &out, "executorTermsHash", terms)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ExecutorTermsHash is a free data retrieval call binding the contract method 0xb1ebcf09.
//
// Solidity: function executorTermsHash((address[],uint16[]) terms) view returns(bytes32)
func (_DegenCasinoAccount *DegenCasinoAccountSession) ExecutorTermsHash(terms ExecutorTerms) ([32]byte, error) {
	return _DegenCasinoAccount.Contract.ExecutorTermsHash(&_DegenCasinoAccount.CallOpts, terms)
}

// ExecutorTermsHash is a free data retrieval call binding the contract method 0xb1ebcf09.
//
// Solidity: function executorTermsHash((address[],uint16[]) terms) view returns(bytes32)
func (_DegenCasinoAccount *DegenCasinoAccountCallerSession) ExecutorTermsHash(terms ExecutorTerms) ([32]byte, error) {
	return _DegenCasinoAccount.Contract.ExecutorTermsHash(&_DegenCasinoAccount.CallOpts, terms)
}

// LastRequest is a free data retrieval call binding the contract method 0xcd9deaca.
//
// Solidity: function lastRequest() view returns(uint256)
func (_DegenCasinoAccount *DegenCasinoAccountCaller) LastRequest(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _DegenCasinoAccount.contract.Call(opts, &out, "lastRequest")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// LastRequest is a free data retrieval call binding the contract method 0xcd9deaca.
//
// Solidity: function lastRequest() view returns(uint256)
func (_DegenCasinoAccount *DegenCasinoAccountSession) LastRequest() (*big.Int, error) {
	return _DegenCasinoAccount.Contract.LastRequest(&_DegenCasinoAccount.CallOpts)
}

// LastRequest is a free data retrieval call binding the contract method 0xcd9deaca.
//
// Solidity: function lastRequest() view returns(uint256)
func (_DegenCasinoAccount *DegenCasinoAccountCallerSession) LastRequest() (*big.Int, error) {
	return _DegenCasinoAccount.Contract.LastRequest(&_DegenCasinoAccount.CallOpts)
}

// Player is a free data retrieval call binding the contract method 0x48db5f89.
//
// Solidity: function player() view returns(address)
func (_DegenCasinoAccount *DegenCasinoAccountCaller) Player(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _DegenCasinoAccount.contract.Call(opts, &out, "player")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Player is a free data retrieval call binding the contract method 0x48db5f89.
//
// Solidity: function player() view returns(address)
func (_DegenCasinoAccount *DegenCasinoAccountSession) Player() (common.Address, error) {
	return _DegenCasinoAccount.Contract.Player(&_DegenCasinoAccount.CallOpts)
}

// Player is a free data retrieval call binding the contract method 0x48db5f89.
//
// Solidity: function player() view returns(address)
func (_DegenCasinoAccount *DegenCasinoAccountCallerSession) Player() (common.Address, error) {
	return _DegenCasinoAccount.Contract.Player(&_DegenCasinoAccount.CallOpts)
}

// SessionHash is a free data retrieval call binding the contract method 0x294f56a6.
//
// Solidity: function sessionHash(address executor, uint256 sessionID, uint256 expiration) view returns(bytes32)
func (_DegenCasinoAccount *DegenCasinoAccountCaller) SessionHash(opts *bind.CallOpts, executor common.Address, sessionID *big.Int, expiration *big.Int) ([32]byte, error) {
	var out []interface{}
	err := _DegenCasinoAccount.contract.Call(opts, &out, "sessionHash", executor, sessionID, expiration)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// SessionHash is a free data retrieval call binding the contract method 0x294f56a6.
//
// Solidity: function sessionHash(address executor, uint256 sessionID, uint256 expiration) view returns(bytes32)
func (_DegenCasinoAccount *DegenCasinoAccountSession) SessionHash(executor common.Address, sessionID *big.Int, expiration *big.Int) ([32]byte, error) {
	return _DegenCasinoAccount.Contract.SessionHash(&_DegenCasinoAccount.CallOpts, executor, sessionID, expiration)
}

// SessionHash is a free data retrieval call binding the contract method 0x294f56a6.
//
// Solidity: function sessionHash(address executor, uint256 sessionID, uint256 expiration) view returns(bytes32)
func (_DegenCasinoAccount *DegenCasinoAccountCallerSession) SessionHash(executor common.Address, sessionID *big.Int, expiration *big.Int) ([32]byte, error) {
	return _DegenCasinoAccount.Contract.SessionHash(&_DegenCasinoAccount.CallOpts, executor, sessionID, expiration)
}

// Drain is a paid mutator transaction binding the contract method 0x01fa4150.
//
// Solidity: function drain(address[] tokenAddresses) returns()
func (_DegenCasinoAccount *DegenCasinoAccountTransactor) Drain(opts *bind.TransactOpts, tokenAddresses []common.Address) (*types.Transaction, error) {
	return _DegenCasinoAccount.contract.Transact(opts, "drain", tokenAddresses)
}

// Drain is a paid mutator transaction binding the contract method 0x01fa4150.
//
// Solidity: function drain(address[] tokenAddresses) returns()
func (_DegenCasinoAccount *DegenCasinoAccountSession) Drain(tokenAddresses []common.Address) (*types.Transaction, error) {
	return _DegenCasinoAccount.Contract.Drain(&_DegenCasinoAccount.TransactOpts, tokenAddresses)
}

// Drain is a paid mutator transaction binding the contract method 0x01fa4150.
//
// Solidity: function drain(address[] tokenAddresses) returns()
func (_DegenCasinoAccount *DegenCasinoAccountTransactorSession) Drain(tokenAddresses []common.Address) (*types.Transaction, error) {
	return _DegenCasinoAccount.Contract.Drain(&_DegenCasinoAccount.TransactOpts, tokenAddresses)
}

// Play is a paid mutator transaction binding the contract method 0xfb1bf119.
//
// Solidity: function play((address,bytes,uint256,uint256) action, (address[],uint16[]) terms, bytes playerActionSignature, bytes playerTermsSignature) returns()
func (_DegenCasinoAccount *DegenCasinoAccountTransactor) Play(opts *bind.TransactOpts, action Action, terms ExecutorTerms, playerActionSignature []byte, playerTermsSignature []byte) (*types.Transaction, error) {
	return _DegenCasinoAccount.contract.Transact(opts, "play", action, terms, playerActionSignature, playerTermsSignature)
}

// Play is a paid mutator transaction binding the contract method 0xfb1bf119.
//
// Solidity: function play((address,bytes,uint256,uint256) action, (address[],uint16[]) terms, bytes playerActionSignature, bytes playerTermsSignature) returns()
func (_DegenCasinoAccount *DegenCasinoAccountSession) Play(action Action, terms ExecutorTerms, playerActionSignature []byte, playerTermsSignature []byte) (*types.Transaction, error) {
	return _DegenCasinoAccount.Contract.Play(&_DegenCasinoAccount.TransactOpts, action, terms, playerActionSignature, playerTermsSignature)
}

// Play is a paid mutator transaction binding the contract method 0xfb1bf119.
//
// Solidity: function play((address,bytes,uint256,uint256) action, (address[],uint16[]) terms, bytes playerActionSignature, bytes playerTermsSignature) returns()
func (_DegenCasinoAccount *DegenCasinoAccountTransactorSession) Play(action Action, terms ExecutorTerms, playerActionSignature []byte, playerTermsSignature []byte) (*types.Transaction, error) {
	return _DegenCasinoAccount.Contract.Play(&_DegenCasinoAccount.TransactOpts, action, terms, playerActionSignature, playerTermsSignature)
}

// PlayInSession is a paid mutator transaction binding the contract method 0xb76084ed.
//
// Solidity: function playInSession((address,bytes,uint256,uint256) action, (address[],uint16[]) terms, uint256 sessionID, uint256 expiration, bytes playerSessionSignature, bytes playerTermsSignature) returns()
func (_DegenCasinoAccount *DegenCasinoAccountTransactor) PlayInSession(opts *bind.TransactOpts, action Action, terms ExecutorTerms, sessionID *big.Int, expiration *big.Int, playerSessionSignature []byte, playerTermsSignature []byte) (*types.Transaction, error) {
	return _DegenCasinoAccount.contract.Transact(opts, "playInSession", action, terms, sessionID, expiration, playerSessionSignature, playerTermsSignature)
}

// PlayInSession is a paid mutator transaction binding the contract method 0xb76084ed.
//
// Solidity: function playInSession((address,bytes,uint256,uint256) action, (address[],uint16[]) terms, uint256 sessionID, uint256 expiration, bytes playerSessionSignature, bytes playerTermsSignature) returns()
func (_DegenCasinoAccount *DegenCasinoAccountSession) PlayInSession(action Action, terms ExecutorTerms, sessionID *big.Int, expiration *big.Int, playerSessionSignature []byte, playerTermsSignature []byte) (*types.Transaction, error) {
	return _DegenCasinoAccount.Contract.PlayInSession(&_DegenCasinoAccount.TransactOpts, action, terms, sessionID, expiration, playerSessionSignature, playerTermsSignature)
}

// PlayInSession is a paid mutator transaction binding the contract method 0xb76084ed.
//
// Solidity: function playInSession((address,bytes,uint256,uint256) action, (address[],uint16[]) terms, uint256 sessionID, uint256 expiration, bytes playerSessionSignature, bytes playerTermsSignature) returns()
func (_DegenCasinoAccount *DegenCasinoAccountTransactorSession) PlayInSession(action Action, terms ExecutorTerms, sessionID *big.Int, expiration *big.Int, playerSessionSignature []byte, playerTermsSignature []byte) (*types.Transaction, error) {
	return _DegenCasinoAccount.Contract.PlayInSession(&_DegenCasinoAccount.TransactOpts, action, terms, sessionID, expiration, playerSessionSignature, playerTermsSignature)
}

// Withdraw is a paid mutator transaction binding the contract method 0xde6d6d96.
//
// Solidity: function withdraw(address[] tokenAddresses, uint256[] amounts) returns()
func (_DegenCasinoAccount *DegenCasinoAccountTransactor) Withdraw(opts *bind.TransactOpts, tokenAddresses []common.Address, amounts []*big.Int) (*types.Transaction, error) {
	return _DegenCasinoAccount.contract.Transact(opts, "withdraw", tokenAddresses, amounts)
}

// Withdraw is a paid mutator transaction binding the contract method 0xde6d6d96.
//
// Solidity: function withdraw(address[] tokenAddresses, uint256[] amounts) returns()
func (_DegenCasinoAccount *DegenCasinoAccountSession) Withdraw(tokenAddresses []common.Address, amounts []*big.Int) (*types.Transaction, error) {
	return _DegenCasinoAccount.Contract.Withdraw(&_DegenCasinoAccount.TransactOpts, tokenAddresses, amounts)
}

// Withdraw is a paid mutator transaction binding the contract method 0xde6d6d96.
//
// Solidity: function withdraw(address[] tokenAddresses, uint256[] amounts) returns()
func (_DegenCasinoAccount *DegenCasinoAccountTransactorSession) Withdraw(tokenAddresses []common.Address, amounts []*big.Int) (*types.Transaction, error) {
	return _DegenCasinoAccount.Contract.Withdraw(&_DegenCasinoAccount.TransactOpts, tokenAddresses, amounts)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_DegenCasinoAccount *DegenCasinoAccountTransactor) Receive(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DegenCasinoAccount.contract.RawTransact(opts, nil) // calldata is disallowed for receive function
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_DegenCasinoAccount *DegenCasinoAccountSession) Receive() (*types.Transaction, error) {
	return _DegenCasinoAccount.Contract.Receive(&_DegenCasinoAccount.TransactOpts)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_DegenCasinoAccount *DegenCasinoAccountTransactorSession) Receive() (*types.Transaction, error) {
	return _DegenCasinoAccount.Contract.Receive(&_DegenCasinoAccount.TransactOpts)
}

// DegenCasinoAccountEIP712DomainChangedIterator is returned from FilterEIP712DomainChanged and is used to iterate over the raw logs and unpacked data for EIP712DomainChanged events raised by the DegenCasinoAccount contract.
type DegenCasinoAccountEIP712DomainChangedIterator struct {
	Event *DegenCasinoAccountEIP712DomainChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DegenCasinoAccountEIP712DomainChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DegenCasinoAccountEIP712DomainChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DegenCasinoAccountEIP712DomainChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DegenCasinoAccountEIP712DomainChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DegenCasinoAccountEIP712DomainChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DegenCasinoAccountEIP712DomainChanged represents a EIP712DomainChanged event raised by the DegenCasinoAccount contract.
type DegenCasinoAccountEIP712DomainChanged struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterEIP712DomainChanged is a free log retrieval operation binding the contract event 0x0a6387c9ea3628b88a633bb4f3b151770f70085117a15f9bf3787cda53f13d31.
//
// Solidity: event EIP712DomainChanged()
func (_DegenCasinoAccount *DegenCasinoAccountFilterer) FilterEIP712DomainChanged(opts *bind.FilterOpts) (*DegenCasinoAccountEIP712DomainChangedIterator, error) {

	logs, sub, err := _DegenCasinoAccount.contract.FilterLogs(opts, "EIP712DomainChanged")
	if err != nil {
		return nil, err
	}
	return &DegenCasinoAccountEIP712DomainChangedIterator{contract: _DegenCasinoAccount.contract, event: "EIP712DomainChanged", logs: logs, sub: sub}, nil
}

// WatchEIP712DomainChanged is a free log subscription operation binding the contract event 0x0a6387c9ea3628b88a633bb4f3b151770f70085117a15f9bf3787cda53f13d31.
//
// Solidity: event EIP712DomainChanged()
func (_DegenCasinoAccount *DegenCasinoAccountFilterer) WatchEIP712DomainChanged(opts *bind.WatchOpts, sink chan<- *DegenCasinoAccountEIP712DomainChanged) (event.Subscription, error) {

	logs, sub, err := _DegenCasinoAccount.contract.WatchLogs(opts, "EIP712DomainChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DegenCasinoAccountEIP712DomainChanged)
				if err := _DegenCasinoAccount.contract.UnpackLog(event, "EIP712DomainChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseEIP712DomainChanged is a log parse operation binding the contract event 0x0a6387c9ea3628b88a633bb4f3b151770f70085117a15f9bf3787cda53f13d31.
//
// Solidity: event EIP712DomainChanged()
func (_DegenCasinoAccount *DegenCasinoAccountFilterer) ParseEIP712DomainChanged(log types.Log) (*DegenCasinoAccountEIP712DomainChanged, error) {
	event := new(DegenCasinoAccountEIP712DomainChanged)
	if err := _DegenCasinoAccount.contract.UnpackLog(event, "EIP712DomainChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

func CreateDegenCasinoAccountDeploymentCommand() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc string
	var gasLimit uint64
	var simulate bool
	var timeout uint
	var safeAddress, safeApi, safeCreateCall, safeSaltRaw, safeNonceRaw string
	var safeOperationType uint8
	var salt [32]byte
	var predictAddress bool
	var safeNonce *big.Int
	var calldata bool

	var player common.Address
	var playerRaw string

	cmd := &cobra.Command{
		Use:   "deploy",
		Short: "Deploy a new DegenCasinoAccount contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {

			if !calldata {
				if keyfile == "" {
					return fmt.Errorf("--keystore not specified (this should be a path to an Ethereum account keystore file)")
				}

				if rpc == "" {
					return fmt.Errorf("--rpc not specified (this should be a URL to an Ethereum JSONRPC API)")
				}
			}

			if safeAddress != "" {
				if !common.IsHexAddress(safeAddress) {
					return fmt.Errorf("--safe is not a valid Ethereum address")
				}
				if safeApi == "" {
					client, clientErr := NewClient(rpc)
					if clientErr != nil {
						return clientErr
					}
					chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
					defer cancelChainIDCtx()
					chainID, chainIDErr := client.ChainID(chainIDCtx)
					if chainIDErr != nil {
						return chainIDErr
					}
					safeApi = fmt.Sprintf("https://safe-client.safe.global/v1/chains/%s/transactions/%s/propose", chainID.String(), safeAddress)
					fmt.Println("--safe-api not specified, using default (", safeApi, ")")
				}

				if safeCreateCall == "" {
					fmt.Println("--safe-create-call not specified, using default (0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4)")
					safeCreateCall = "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4"
				}
				if !common.IsHexAddress(safeCreateCall) {
					return fmt.Errorf("--safe-create-call is not a valid Ethereum address")
				}

				if SafeOperationType(safeOperationType).String() == "Unknown" {
					return fmt.Errorf("--safe-operation must be 0 (Call) or 1 (DelegateCall)")
				}

				if safeSaltRaw == "" {
					fmt.Println("--safe-salt not specified, generating random salt")
					_, err := rand.Read(salt[:])
					if err != nil {
						return fmt.Errorf("failed to generate random salt: %v", err)
					}
					// prompt user to accept random salt
					fmt.Println("Generated salt:", common.Bytes2Hex(salt[:]))
					fmt.Println("Please check the salt and confirm (y/n)")
					var confirm string
					fmt.Scanln(&confirm)
					if confirm != "y" && confirm != "Y" && confirm != "\n" && confirm != "" {
						return fmt.Errorf("salt not accepted, please specify a valid salt")
					}
				} else {
					copy(salt[:], safeSaltRaw)
				}

				if safeNonceRaw == "" {
					fmt.Println("--safe-nonce not specified, fetching nonce from Safe contract")
				} else {
					safeNonce = new(big.Int)
					_, ok := safeNonce.SetString(safeNonceRaw, 0)
					if !ok {
						return fmt.Errorf("--safe-nonce is not a valid big integer")
					}
				}
			}

			if playerRaw == "" {
				return fmt.Errorf("--player argument not specified")
			} else if !common.IsHexAddress(playerRaw) {
				return fmt.Errorf("--player argument is not a valid Ethereum address")
			}
			player = common.HexToAddress(playerRaw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			// Generate deploy bytecode with constructor arguments
			deployCalldata, err := generateDegenCasinoAccountDeployBytecode(
				player,
			)
			if err != nil {
				return fmt.Errorf("failed to generate deploy bytecode: %v", err)
			}

			if calldata {
				deployCalldataHex := hex.EncodeToString(deployCalldata)
				cmd.Println(deployCalldataHex)
				return nil
			}

			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			if safeAddress != "" {
				// Create Safe proposal for deployment
				value := transactionOpts.Value
				if value == nil {
					value = big.NewInt(0)
				}

				if predictAddress {
					fmt.Println("Predicting deployment address...")
					from := common.HexToAddress(safeAddress)
					if safeOperationType == 0 {
						from = common.HexToAddress(safeCreateCall)
					}
					deploymentAddress, err := PredictDeploymentAddressSafe(from, salt, deployCalldata)
					if err != nil {
						return fmt.Errorf("failed to predict deployment address: %v", err)
					}
					fmt.Println("Predicted deployment address:", deploymentAddress.Hex())
					return nil
				} else {
					fmt.Println("Creating Safe proposal...")
					err = DeployWithSafe(client, key, common.HexToAddress(safeAddress), common.HexToAddress(safeCreateCall), value, safeApi, deployCalldata, SafeOperationType(safeOperationType), salt, safeNonce)
					if err != nil {
						return fmt.Errorf("failed to create Safe proposal: %v", err)
					}
				}

				return nil
			}

			address, deploymentTransaction, _, deploymentErr := DeployDegenCasinoAccount(
				transactionOpts,
				client,
				player,
			)
			if deploymentErr != nil {
				return deploymentErr
			}

			cmd.Printf("Transaction hash: %s\nContract address: %s\n", deploymentTransaction.Hash().Hex(), address.Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					Data: deploymentTransaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := deploymentTransaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&safeAddress, "safe", "", "Address of the Safe contract")
	cmd.Flags().StringVar(&safeApi, "safe-api", "", "Safe API for the Safe Transaction Service (optional)")
	cmd.Flags().StringVar(&safeCreateCall, "safe-create-call", "", "Address of the CreateCall contract (optional)")
	cmd.Flags().Uint8Var(&safeOperationType, "safe-operation", 1, "Safe operation type: 0 (Call) or 1 (DelegateCall) - default is 1")
	cmd.Flags().StringVar(&safeSaltRaw, "safe-salt", "", "Salt to use for the Safe transaction")
	cmd.Flags().BoolVar(&predictAddress, "safe-predict-address", false, "Predict the deployment address (only works for Safe transactions)")
	cmd.Flags().StringVar(&safeNonceRaw, "safe-nonce", "", "Safe nonce overrider for the transaction (optional)")
	cmd.Flags().BoolVar(&calldata, "calldata", false, "Set this flag if want to return the calldata instead of sending the transaction")

	cmd.Flags().StringVar(&playerRaw, "player", "", "player argument (common.Address)")

	return cmd
}

func generateDegenCasinoAccountDeployBytecode(
	player common.Address,
) ([]byte, error) {
	abiPacked, err := DegenCasinoAccountMetaData.GetAbi()
	if err != nil {
		return nil, fmt.Errorf("failed to get ABI: %v", err)
	}

	constructorArguments, err := abiPacked.Pack("",
		player,
	)
	if err != nil {
		return nil, fmt.Errorf("failed to pack constructor arguments: %v", err)
	}

	deployBytecode := append(common.FromHex(DegenCasinoAccountMetaData.Bin), constructorArguments...)
	return deployBytecode, nil
}

func CreateAccountVersionCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var capture0 string

	cmd := &cobra.Command{
		Use:   "account-version",
		Short: "Call the AccountVersion view method on a DegenCasinoAccount contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewDegenCasinoAccount(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := DegenCasinoAccountCallerSession{
				Contract: &contract.DegenCasinoAccountCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.AccountVersion()
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0)

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	return cmd
}
func CreateActionHashCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var action Action
	var actionRaw string

	var capture0 [32]byte

	cmd := &cobra.Command{
		Use:   "action-hash",
		Short: "Call the ActionHash view method on a DegenCasinoAccount contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if actionRaw == "" {
				return fmt.Errorf("--action argument not specified")
			} else if strings.HasPrefix(actionRaw, "@") {
				filename := strings.TrimPrefix(actionRaw, "@")
				contents, readErr := os.ReadFile(filename)
				if readErr != nil {
					return readErr
				}
				unmarshalErr := json.Unmarshal(contents, &action)
				if unmarshalErr != nil {
					return unmarshalErr
				}
			} else {
				unmarshalErr := json.Unmarshal([]byte(actionRaw), &action)
				if unmarshalErr != nil {
					return unmarshalErr
				}
			}

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewDegenCasinoAccount(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := DegenCasinoAccountCallerSession{
				Contract: &contract.DegenCasinoAccountCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.ActionHash(
				action,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %v\n", capture0)

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&actionRaw, "action", "", "action argument (Action)")

	return cmd
}
func CreateEip712DomainCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var capture0 struct {
		Fields            [1]byte
		Name              string
		Version           string
		ChainId           *big.Int
		VerifyingContract common.Address
		Salt              [32]byte
		Extensions        []*big.Int
	}

	cmd := &cobra.Command{
		Use:   "eip-712-domain",
		Short: "Call the Eip712Domain view method on a DegenCasinoAccount contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewDegenCasinoAccount(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := DegenCasinoAccountCallerSession{
				Contract: &contract.DegenCasinoAccountCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.Eip712Domain()
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %v\n", capture0)

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	return cmd
}
func CreateExecutorTermsHashCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var terms ExecutorTerms
	var termsRaw string

	var capture0 [32]byte

	cmd := &cobra.Command{
		Use:   "executor-terms-hash",
		Short: "Call the ExecutorTermsHash view method on a DegenCasinoAccount contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if termsRaw == "" {
				return fmt.Errorf("--terms argument not specified")
			} else if strings.HasPrefix(termsRaw, "@") {
				filename := strings.TrimPrefix(termsRaw, "@")
				contents, readErr := os.ReadFile(filename)
				if readErr != nil {
					return readErr
				}
				unmarshalErr := json.Unmarshal(contents, &terms)
				if unmarshalErr != nil {
					return unmarshalErr
				}
			} else {
				unmarshalErr := json.Unmarshal([]byte(termsRaw), &terms)
				if unmarshalErr != nil {
					return unmarshalErr
				}
			}

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewDegenCasinoAccount(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := DegenCasinoAccountCallerSession{
				Contract: &contract.DegenCasinoAccountCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.ExecutorTermsHash(
				terms,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %v\n", capture0)

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&termsRaw, "terms", "", "terms argument (ExecutorTerms)")

	return cmd
}
func CreateLastRequestCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var capture0 *big.Int

	cmd := &cobra.Command{
		Use:   "last-request",
		Short: "Call the LastRequest view method on a DegenCasinoAccount contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewDegenCasinoAccount(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := DegenCasinoAccountCallerSession{
				Contract: &contract.DegenCasinoAccountCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.LastRequest()
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0.String())

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	return cmd
}
func CreatePlayerCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var capture0 common.Address

	cmd := &cobra.Command{
		Use:   "player",
		Short: "Call the Player view method on a DegenCasinoAccount contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewDegenCasinoAccount(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := DegenCasinoAccountCallerSession{
				Contract: &contract.DegenCasinoAccountCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.Player()
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0.Hex())

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	return cmd
}
func CreateSessionHashCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var executor common.Address
	var executorRaw string
	var sessionID *big.Int
	var sessionIDRaw string
	var expiration *big.Int
	var expirationRaw string

	var capture0 [32]byte

	cmd := &cobra.Command{
		Use:   "session-hash",
		Short: "Call the SessionHash view method on a DegenCasinoAccount contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if executorRaw == "" {
				return fmt.Errorf("--executor argument not specified")
			} else if !common.IsHexAddress(executorRaw) {
				return fmt.Errorf("--executor argument is not a valid Ethereum address")
			}
			executor = common.HexToAddress(executorRaw)

			if sessionIDRaw == "" {
				return fmt.Errorf("--session-id argument not specified")
			}
			sessionID = new(big.Int)
			sessionID.SetString(sessionIDRaw, 0)

			if expirationRaw == "" {
				return fmt.Errorf("--expiration argument not specified")
			}
			expiration = new(big.Int)
			expiration.SetString(expirationRaw, 0)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewDegenCasinoAccount(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := DegenCasinoAccountCallerSession{
				Contract: &contract.DegenCasinoAccountCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.SessionHash(
				executor,
				sessionID,
				expiration,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %v\n", capture0)

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&executorRaw, "executor", "", "executor argument (common.Address)")
	cmd.Flags().StringVar(&sessionIDRaw, "session-id", "", "session-id argument")
	cmd.Flags().StringVar(&expirationRaw, "expiration", "", "expiration argument")

	return cmd
}

func CreateDrainCommand() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc, contractAddressRaw, safeFunction, safeNonceRaw string
	var gasLimit uint64
	var simulate bool
	var timeout uint
	var contractAddress common.Address
	var safeAddress, safeApi string
	var safeOperationType uint8
	var safeNonce *big.Int
	var calldata bool

	var tokenAddresses []common.Address
	var tokenAddressesRaw string

	cmd := &cobra.Command{
		Use:   "drain",
		Short: "Execute the Drain method on a DegenCasinoAccount contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if !calldata {
				if contractAddressRaw == "" {
					return fmt.Errorf("--contract not specified")
				} else if !common.IsHexAddress(contractAddressRaw) {
					return fmt.Errorf("--contract is not a valid Ethereum address")
				}
				contractAddress = common.HexToAddress(contractAddressRaw)

				if keyfile == "" {
					return fmt.Errorf("--keystore not specified (this should be a path to an Ethereum account keystore file)")
				}

				if rpc == "" {
					return fmt.Errorf("--rpc not specified (this should be a URL to an Ethereum JSONRPC API)")
				}
			}

			if safeAddress != "" {
				if !common.IsHexAddress(safeAddress) {
					return fmt.Errorf("--safe is not a valid Ethereum address")
				}
				if safeApi == "" {
					client, clientErr := NewClient(rpc)
					if clientErr != nil {
						return clientErr
					}
					chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
					defer cancelChainIDCtx()
					chainID, chainIDErr := client.ChainID(chainIDCtx)
					if chainIDErr != nil {
						return chainIDErr
					}
					safeApi = fmt.Sprintf("https://safe-client.safe.global/v1/chains/%s/transactions/%s/propose", chainID.String(), safeAddress)
					fmt.Println("--safe-api not specified, using default (", safeApi, ")")
				}

				if SafeOperationType(safeOperationType).String() == "Unknown" {
					return fmt.Errorf("--safe-operation must be 0 (Call) or 1 (DelegateCall)")
				}

				if safeNonceRaw == "" {
					fmt.Println("--safe-nonce not specified, fetching nonce from Safe contract")
				} else {
					safeNonce = new(big.Int)
					_, ok := safeNonce.SetString(safeNonceRaw, 0)
					if !ok {
						return fmt.Errorf("--safe-nonce is not a valid big integer")
					}
				}
			}

			if tokenAddressesRaw == "" {
				return fmt.Errorf("--token-addresses argument not specified")
			} else if strings.HasPrefix(tokenAddressesRaw, "@") {
				filename := strings.TrimPrefix(tokenAddressesRaw, "@")
				contents, readErr := os.ReadFile(filename)
				if readErr != nil {
					return readErr
				}
				unmarshalErr := json.Unmarshal(contents, &tokenAddresses)
				if unmarshalErr != nil {
					return unmarshalErr
				}
			} else {
				unmarshalErr := json.Unmarshal([]byte(tokenAddressesRaw), &tokenAddresses)
				if unmarshalErr != nil {
					return unmarshalErr
				}
			}

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			abi, err := DegenCasinoAccountMetaData.GetAbi()
			if err != nil {
				return fmt.Errorf("failed to get ABI: %v", err)
			}

			// Generate transaction data (override method name if safe function is specified)
			methodName := "drain"
			if safeFunction != "" {
				methodName = safeFunction
			}

			txCalldata, err := abi.Pack(
				methodName,
				tokenAddresses,
			)

			if err != nil {
				return err
			}

			if calldata {
				txCalldataHex := hex.EncodeToString(txCalldata)
				cmd.Println(txCalldataHex)
				return nil
			}

			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			contract, contractErr := NewDegenCasinoAccount(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			session := DegenCasinoAccountTransactorSession{
				Contract:     &contract.DegenCasinoAccountTransactor,
				TransactOpts: *transactionOpts,
			}

			if safeAddress != "" {
				// Create Safe proposal for transaction
				value := transactionOpts.Value
				if value == nil {
					value = big.NewInt(0)
				}

				err = CreateSafeProposal(client, key, common.HexToAddress(safeAddress), contractAddress, txCalldata, value, safeApi, SafeOperationType(safeOperationType), safeNonce)
				if err != nil {
					return fmt.Errorf("failed to create Safe proposal: %v", err)
				}

				return nil
			}

			transaction, err := session.Drain(

				tokenAddresses,
			)
			if err != nil {
				return err
			}

			cmd.Printf("Transaction hash: %s\n", transaction.Hash().Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					To:   &contractAddress,
					Data: transaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := transaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&safeAddress, "safe", "", "Address of the Safe contract")
	cmd.Flags().StringVar(&safeApi, "safe-api", "", "Safe API for the Safe Transaction Service (optional)")
	cmd.Flags().Uint8Var(&safeOperationType, "safe-operation", 0, "Safe operation type: 0 (Call) or 1 (DelegateCall)")
	cmd.Flags().StringVar(&safeFunction, "safe-function", "", "Safe function overrider to use for the transaction (optional)")
	cmd.Flags().StringVar(&safeNonceRaw, "safe-nonce", "", "Safe nonce overrider for the transaction (optional)")
	cmd.Flags().BoolVar(&calldata, "calldata", false, "Set this flag if want to return the calldata instead of sending the transaction")

	cmd.Flags().StringVar(&tokenAddressesRaw, "token-addresses", "", "token-addresses argument ([]common.Address)")

	return cmd
}
func CreatePlayCommand() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc, contractAddressRaw, safeFunction, safeNonceRaw string
	var gasLimit uint64
	var simulate bool
	var timeout uint
	var contractAddress common.Address
	var safeAddress, safeApi string
	var safeOperationType uint8
	var safeNonce *big.Int
	var calldata bool

	var action Action
	var actionRaw string
	var terms ExecutorTerms
	var termsRaw string
	var playerActionSignature []byte
	var playerActionSignatureRaw string
	var playerTermsSignature []byte
	var playerTermsSignatureRaw string

	cmd := &cobra.Command{
		Use:   "play",
		Short: "Execute the Play method on a DegenCasinoAccount contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if !calldata {
				if contractAddressRaw == "" {
					return fmt.Errorf("--contract not specified")
				} else if !common.IsHexAddress(contractAddressRaw) {
					return fmt.Errorf("--contract is not a valid Ethereum address")
				}
				contractAddress = common.HexToAddress(contractAddressRaw)

				if keyfile == "" {
					return fmt.Errorf("--keystore not specified (this should be a path to an Ethereum account keystore file)")
				}

				if rpc == "" {
					return fmt.Errorf("--rpc not specified (this should be a URL to an Ethereum JSONRPC API)")
				}
			}

			if safeAddress != "" {
				if !common.IsHexAddress(safeAddress) {
					return fmt.Errorf("--safe is not a valid Ethereum address")
				}
				if safeApi == "" {
					client, clientErr := NewClient(rpc)
					if clientErr != nil {
						return clientErr
					}
					chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
					defer cancelChainIDCtx()
					chainID, chainIDErr := client.ChainID(chainIDCtx)
					if chainIDErr != nil {
						return chainIDErr
					}
					safeApi = fmt.Sprintf("https://safe-client.safe.global/v1/chains/%s/transactions/%s/propose", chainID.String(), safeAddress)
					fmt.Println("--safe-api not specified, using default (", safeApi, ")")
				}

				if SafeOperationType(safeOperationType).String() == "Unknown" {
					return fmt.Errorf("--safe-operation must be 0 (Call) or 1 (DelegateCall)")
				}

				if safeNonceRaw == "" {
					fmt.Println("--safe-nonce not specified, fetching nonce from Safe contract")
				} else {
					safeNonce = new(big.Int)
					_, ok := safeNonce.SetString(safeNonceRaw, 0)
					if !ok {
						return fmt.Errorf("--safe-nonce is not a valid big integer")
					}
				}
			}

			if actionRaw == "" {
				return fmt.Errorf("--action argument not specified")
			} else if strings.HasPrefix(actionRaw, "@") {
				filename := strings.TrimPrefix(actionRaw, "@")
				contents, readErr := os.ReadFile(filename)
				if readErr != nil {
					return readErr
				}
				unmarshalErr := json.Unmarshal(contents, &action)
				if unmarshalErr != nil {
					return unmarshalErr
				}
			} else {
				unmarshalErr := json.Unmarshal([]byte(actionRaw), &action)
				if unmarshalErr != nil {
					return unmarshalErr
				}
			}

			if termsRaw == "" {
				return fmt.Errorf("--terms argument not specified")
			} else if strings.HasPrefix(termsRaw, "@") {
				filename := strings.TrimPrefix(termsRaw, "@")
				contents, readErr := os.ReadFile(filename)
				if readErr != nil {
					return readErr
				}
				unmarshalErr := json.Unmarshal(contents, &terms)
				if unmarshalErr != nil {
					return unmarshalErr
				}
			} else {
				unmarshalErr := json.Unmarshal([]byte(termsRaw), &terms)
				if unmarshalErr != nil {
					return unmarshalErr
				}
			}

			var playerActionSignatureIntermediate []byte

			var playerActionSignatureIntermediateHexDecodeErr error
			playerActionSignatureIntermediate, playerActionSignatureIntermediateHexDecodeErr = hex.DecodeString(playerActionSignatureRaw)
			if playerActionSignatureIntermediateHexDecodeErr != nil {
				return playerActionSignatureIntermediateHexDecodeErr
			}

			copy(playerActionSignature[:], playerActionSignatureIntermediate)

			var playerTermsSignatureIntermediate []byte

			var playerTermsSignatureIntermediateHexDecodeErr error
			playerTermsSignatureIntermediate, playerTermsSignatureIntermediateHexDecodeErr = hex.DecodeString(playerTermsSignatureRaw)
			if playerTermsSignatureIntermediateHexDecodeErr != nil {
				return playerTermsSignatureIntermediateHexDecodeErr
			}

			copy(playerTermsSignature[:], playerTermsSignatureIntermediate)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			abi, err := DegenCasinoAccountMetaData.GetAbi()
			if err != nil {
				return fmt.Errorf("failed to get ABI: %v", err)
			}

			// Generate transaction data (override method name if safe function is specified)
			methodName := "play"
			if safeFunction != "" {
				methodName = safeFunction
			}

			txCalldata, err := abi.Pack(
				methodName,
				action,
				terms,
				playerActionSignature,
				playerTermsSignature,
			)

			if err != nil {
				return err
			}

			if calldata {
				txCalldataHex := hex.EncodeToString(txCalldata)
				cmd.Println(txCalldataHex)
				return nil
			}

			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			contract, contractErr := NewDegenCasinoAccount(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			session := DegenCasinoAccountTransactorSession{
				Contract:     &contract.DegenCasinoAccountTransactor,
				TransactOpts: *transactionOpts,
			}

			if safeAddress != "" {
				// Create Safe proposal for transaction
				value := transactionOpts.Value
				if value == nil {
					value = big.NewInt(0)
				}

				err = CreateSafeProposal(client, key, common.HexToAddress(safeAddress), contractAddress, txCalldata, value, safeApi, SafeOperationType(safeOperationType), safeNonce)
				if err != nil {
					return fmt.Errorf("failed to create Safe proposal: %v", err)
				}

				return nil
			}

			transaction, err := session.Play(

				action,
				terms,
				playerActionSignature,
				playerTermsSignature,
			)
			if err != nil {
				return err
			}

			cmd.Printf("Transaction hash: %s\n", transaction.Hash().Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					To:   &contractAddress,
					Data: transaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := transaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&safeAddress, "safe", "", "Address of the Safe contract")
	cmd.Flags().StringVar(&safeApi, "safe-api", "", "Safe API for the Safe Transaction Service (optional)")
	cmd.Flags().Uint8Var(&safeOperationType, "safe-operation", 0, "Safe operation type: 0 (Call) or 1 (DelegateCall)")
	cmd.Flags().StringVar(&safeFunction, "safe-function", "", "Safe function overrider to use for the transaction (optional)")
	cmd.Flags().StringVar(&safeNonceRaw, "safe-nonce", "", "Safe nonce overrider for the transaction (optional)")
	cmd.Flags().BoolVar(&calldata, "calldata", false, "Set this flag if want to return the calldata instead of sending the transaction")

	cmd.Flags().StringVar(&actionRaw, "action", "", "action argument (Action)")
	cmd.Flags().StringVar(&termsRaw, "terms", "", "terms argument (ExecutorTerms)")
	cmd.Flags().StringVar(&playerActionSignatureRaw, "player-action-signature", "", "player-action-signature argument ([]byte)")
	cmd.Flags().StringVar(&playerTermsSignatureRaw, "player-terms-signature", "", "player-terms-signature argument ([]byte)")

	return cmd
}
func CreatePlayInSessionCommand() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc, contractAddressRaw, safeFunction, safeNonceRaw string
	var gasLimit uint64
	var simulate bool
	var timeout uint
	var contractAddress common.Address
	var safeAddress, safeApi string
	var safeOperationType uint8
	var safeNonce *big.Int
	var calldata bool

	var action Action
	var actionRaw string
	var terms ExecutorTerms
	var termsRaw string
	var sessionID *big.Int
	var sessionIDRaw string
	var expiration *big.Int
	var expirationRaw string
	var playerSessionSignature []byte
	var playerSessionSignatureRaw string
	var playerTermsSignature []byte
	var playerTermsSignatureRaw string

	cmd := &cobra.Command{
		Use:   "play-in-session",
		Short: "Execute the PlayInSession method on a DegenCasinoAccount contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if !calldata {
				if contractAddressRaw == "" {
					return fmt.Errorf("--contract not specified")
				} else if !common.IsHexAddress(contractAddressRaw) {
					return fmt.Errorf("--contract is not a valid Ethereum address")
				}
				contractAddress = common.HexToAddress(contractAddressRaw)

				if keyfile == "" {
					return fmt.Errorf("--keystore not specified (this should be a path to an Ethereum account keystore file)")
				}

				if rpc == "" {
					return fmt.Errorf("--rpc not specified (this should be a URL to an Ethereum JSONRPC API)")
				}
			}

			if safeAddress != "" {
				if !common.IsHexAddress(safeAddress) {
					return fmt.Errorf("--safe is not a valid Ethereum address")
				}
				if safeApi == "" {
					client, clientErr := NewClient(rpc)
					if clientErr != nil {
						return clientErr
					}
					chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
					defer cancelChainIDCtx()
					chainID, chainIDErr := client.ChainID(chainIDCtx)
					if chainIDErr != nil {
						return chainIDErr
					}
					safeApi = fmt.Sprintf("https://safe-client.safe.global/v1/chains/%s/transactions/%s/propose", chainID.String(), safeAddress)
					fmt.Println("--safe-api not specified, using default (", safeApi, ")")
				}

				if SafeOperationType(safeOperationType).String() == "Unknown" {
					return fmt.Errorf("--safe-operation must be 0 (Call) or 1 (DelegateCall)")
				}

				if safeNonceRaw == "" {
					fmt.Println("--safe-nonce not specified, fetching nonce from Safe contract")
				} else {
					safeNonce = new(big.Int)
					_, ok := safeNonce.SetString(safeNonceRaw, 0)
					if !ok {
						return fmt.Errorf("--safe-nonce is not a valid big integer")
					}
				}
			}

			if actionRaw == "" {
				return fmt.Errorf("--action argument not specified")
			} else if strings.HasPrefix(actionRaw, "@") {
				filename := strings.TrimPrefix(actionRaw, "@")
				contents, readErr := os.ReadFile(filename)
				if readErr != nil {
					return readErr
				}
				unmarshalErr := json.Unmarshal(contents, &action)
				if unmarshalErr != nil {
					return unmarshalErr
				}
			} else {
				unmarshalErr := json.Unmarshal([]byte(actionRaw), &action)
				if unmarshalErr != nil {
					return unmarshalErr
				}
			}

			if termsRaw == "" {
				return fmt.Errorf("--terms argument not specified")
			} else if strings.HasPrefix(termsRaw, "@") {
				filename := strings.TrimPrefix(termsRaw, "@")
				contents, readErr := os.ReadFile(filename)
				if readErr != nil {
					return readErr
				}
				unmarshalErr := json.Unmarshal(contents, &terms)
				if unmarshalErr != nil {
					return unmarshalErr
				}
			} else {
				unmarshalErr := json.Unmarshal([]byte(termsRaw), &terms)
				if unmarshalErr != nil {
					return unmarshalErr
				}
			}

			if sessionIDRaw == "" {
				return fmt.Errorf("--session-id argument not specified")
			}
			sessionID = new(big.Int)
			sessionID.SetString(sessionIDRaw, 0)

			if expirationRaw == "" {
				return fmt.Errorf("--expiration argument not specified")
			}
			expiration = new(big.Int)
			expiration.SetString(expirationRaw, 0)

			var playerSessionSignatureIntermediate []byte

			var playerSessionSignatureIntermediateHexDecodeErr error
			playerSessionSignatureIntermediate, playerSessionSignatureIntermediateHexDecodeErr = hex.DecodeString(playerSessionSignatureRaw)
			if playerSessionSignatureIntermediateHexDecodeErr != nil {
				return playerSessionSignatureIntermediateHexDecodeErr
			}

			copy(playerSessionSignature[:], playerSessionSignatureIntermediate)

			var playerTermsSignatureIntermediate []byte

			var playerTermsSignatureIntermediateHexDecodeErr error
			playerTermsSignatureIntermediate, playerTermsSignatureIntermediateHexDecodeErr = hex.DecodeString(playerTermsSignatureRaw)
			if playerTermsSignatureIntermediateHexDecodeErr != nil {
				return playerTermsSignatureIntermediateHexDecodeErr
			}

			copy(playerTermsSignature[:], playerTermsSignatureIntermediate)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			abi, err := DegenCasinoAccountMetaData.GetAbi()
			if err != nil {
				return fmt.Errorf("failed to get ABI: %v", err)
			}

			// Generate transaction data (override method name if safe function is specified)
			methodName := "playInSession"
			if safeFunction != "" {
				methodName = safeFunction
			}

			txCalldata, err := abi.Pack(
				methodName,
				action,
				terms,
				sessionID,
				expiration,
				playerSessionSignature,
				playerTermsSignature,
			)

			if err != nil {
				return err
			}

			if calldata {
				txCalldataHex := hex.EncodeToString(txCalldata)
				cmd.Println(txCalldataHex)
				return nil
			}

			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			contract, contractErr := NewDegenCasinoAccount(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			session := DegenCasinoAccountTransactorSession{
				Contract:     &contract.DegenCasinoAccountTransactor,
				TransactOpts: *transactionOpts,
			}

			if safeAddress != "" {
				// Create Safe proposal for transaction
				value := transactionOpts.Value
				if value == nil {
					value = big.NewInt(0)
				}

				err = CreateSafeProposal(client, key, common.HexToAddress(safeAddress), contractAddress, txCalldata, value, safeApi, SafeOperationType(safeOperationType), safeNonce)
				if err != nil {
					return fmt.Errorf("failed to create Safe proposal: %v", err)
				}

				return nil
			}

			transaction, err := session.PlayInSession(

				action,
				terms,
				sessionID,
				expiration,
				playerSessionSignature,
				playerTermsSignature,
			)
			if err != nil {
				return err
			}

			cmd.Printf("Transaction hash: %s\n", transaction.Hash().Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					To:   &contractAddress,
					Data: transaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := transaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&safeAddress, "safe", "", "Address of the Safe contract")
	cmd.Flags().StringVar(&safeApi, "safe-api", "", "Safe API for the Safe Transaction Service (optional)")
	cmd.Flags().Uint8Var(&safeOperationType, "safe-operation", 0, "Safe operation type: 0 (Call) or 1 (DelegateCall)")
	cmd.Flags().StringVar(&safeFunction, "safe-function", "", "Safe function overrider to use for the transaction (optional)")
	cmd.Flags().StringVar(&safeNonceRaw, "safe-nonce", "", "Safe nonce overrider for the transaction (optional)")
	cmd.Flags().BoolVar(&calldata, "calldata", false, "Set this flag if want to return the calldata instead of sending the transaction")

	cmd.Flags().StringVar(&actionRaw, "action", "", "action argument (Action)")
	cmd.Flags().StringVar(&termsRaw, "terms", "", "terms argument (ExecutorTerms)")
	cmd.Flags().StringVar(&sessionIDRaw, "session-id", "", "session-id argument")
	cmd.Flags().StringVar(&expirationRaw, "expiration", "", "expiration argument")
	cmd.Flags().StringVar(&playerSessionSignatureRaw, "player-session-signature", "", "player-session-signature argument ([]byte)")
	cmd.Flags().StringVar(&playerTermsSignatureRaw, "player-terms-signature", "", "player-terms-signature argument ([]byte)")

	return cmd
}
func CreateReceiveCommand() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc, contractAddressRaw, safeFunction, safeNonceRaw string
	var gasLimit uint64
	var simulate bool
	var timeout uint
	var contractAddress common.Address
	var safeAddress, safeApi string
	var safeOperationType uint8
	var safeNonce *big.Int
	var calldata bool

	cmd := &cobra.Command{
		Use:   "receive",
		Short: "Execute the Receive method on a DegenCasinoAccount contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if !calldata {
				if contractAddressRaw == "" {
					return fmt.Errorf("--contract not specified")
				} else if !common.IsHexAddress(contractAddressRaw) {
					return fmt.Errorf("--contract is not a valid Ethereum address")
				}
				contractAddress = common.HexToAddress(contractAddressRaw)

				if keyfile == "" {
					return fmt.Errorf("--keystore not specified (this should be a path to an Ethereum account keystore file)")
				}

				if rpc == "" {
					return fmt.Errorf("--rpc not specified (this should be a URL to an Ethereum JSONRPC API)")
				}
			}

			if safeAddress != "" {
				if !common.IsHexAddress(safeAddress) {
					return fmt.Errorf("--safe is not a valid Ethereum address")
				}
				if safeApi == "" {
					client, clientErr := NewClient(rpc)
					if clientErr != nil {
						return clientErr
					}
					chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
					defer cancelChainIDCtx()
					chainID, chainIDErr := client.ChainID(chainIDCtx)
					if chainIDErr != nil {
						return chainIDErr
					}
					safeApi = fmt.Sprintf("https://safe-client.safe.global/v1/chains/%s/transactions/%s/propose", chainID.String(), safeAddress)
					fmt.Println("--safe-api not specified, using default (", safeApi, ")")
				}

				if SafeOperationType(safeOperationType).String() == "Unknown" {
					return fmt.Errorf("--safe-operation must be 0 (Call) or 1 (DelegateCall)")
				}

				if safeNonceRaw == "" {
					fmt.Println("--safe-nonce not specified, fetching nonce from Safe contract")
				} else {
					safeNonce = new(big.Int)
					_, ok := safeNonce.SetString(safeNonceRaw, 0)
					if !ok {
						return fmt.Errorf("--safe-nonce is not a valid big integer")
					}
				}
			}

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			abi, err := DegenCasinoAccountMetaData.GetAbi()
			if err != nil {
				return fmt.Errorf("failed to get ABI: %v", err)
			}

			// Generate transaction data (override method name if safe function is specified)
			methodName := "receive"
			if safeFunction != "" {
				methodName = safeFunction
			}

			txCalldata, err := abi.Pack(
				methodName,
			)

			if err != nil {
				return err
			}

			if calldata {
				txCalldataHex := hex.EncodeToString(txCalldata)
				cmd.Println(txCalldataHex)
				return nil
			}

			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			contract, contractErr := NewDegenCasinoAccount(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			session := DegenCasinoAccountTransactorSession{
				Contract:     &contract.DegenCasinoAccountTransactor,
				TransactOpts: *transactionOpts,
			}

			if safeAddress != "" {
				// Create Safe proposal for transaction
				value := transactionOpts.Value
				if value == nil {
					value = big.NewInt(0)
				}

				err = CreateSafeProposal(client, key, common.HexToAddress(safeAddress), contractAddress, txCalldata, value, safeApi, SafeOperationType(safeOperationType), safeNonce)
				if err != nil {
					return fmt.Errorf("failed to create Safe proposal: %v", err)
				}

				return nil
			}

			transaction, err := session.Receive()
			if err != nil {
				return err
			}

			cmd.Printf("Transaction hash: %s\n", transaction.Hash().Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					To:   &contractAddress,
					Data: transaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := transaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&safeAddress, "safe", "", "Address of the Safe contract")
	cmd.Flags().StringVar(&safeApi, "safe-api", "", "Safe API for the Safe Transaction Service (optional)")
	cmd.Flags().Uint8Var(&safeOperationType, "safe-operation", 0, "Safe operation type: 0 (Call) or 1 (DelegateCall)")
	cmd.Flags().StringVar(&safeFunction, "safe-function", "", "Safe function overrider to use for the transaction (optional)")
	cmd.Flags().StringVar(&safeNonceRaw, "safe-nonce", "", "Safe nonce overrider for the transaction (optional)")
	cmd.Flags().BoolVar(&calldata, "calldata", false, "Set this flag if want to return the calldata instead of sending the transaction")

	return cmd
}
func CreateWithdrawCommand() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc, contractAddressRaw, safeFunction, safeNonceRaw string
	var gasLimit uint64
	var simulate bool
	var timeout uint
	var contractAddress common.Address
	var safeAddress, safeApi string
	var safeOperationType uint8
	var safeNonce *big.Int
	var calldata bool

	var tokenAddresses []common.Address
	var tokenAddressesRaw string
	var amounts []*big.Int
	var amountsRaw string

	cmd := &cobra.Command{
		Use:   "withdraw",
		Short: "Execute the Withdraw method on a DegenCasinoAccount contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if !calldata {
				if contractAddressRaw == "" {
					return fmt.Errorf("--contract not specified")
				} else if !common.IsHexAddress(contractAddressRaw) {
					return fmt.Errorf("--contract is not a valid Ethereum address")
				}
				contractAddress = common.HexToAddress(contractAddressRaw)

				if keyfile == "" {
					return fmt.Errorf("--keystore not specified (this should be a path to an Ethereum account keystore file)")
				}

				if rpc == "" {
					return fmt.Errorf("--rpc not specified (this should be a URL to an Ethereum JSONRPC API)")
				}
			}

			if safeAddress != "" {
				if !common.IsHexAddress(safeAddress) {
					return fmt.Errorf("--safe is not a valid Ethereum address")
				}
				if safeApi == "" {
					client, clientErr := NewClient(rpc)
					if clientErr != nil {
						return clientErr
					}
					chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
					defer cancelChainIDCtx()
					chainID, chainIDErr := client.ChainID(chainIDCtx)
					if chainIDErr != nil {
						return chainIDErr
					}
					safeApi = fmt.Sprintf("https://safe-client.safe.global/v1/chains/%s/transactions/%s/propose", chainID.String(), safeAddress)
					fmt.Println("--safe-api not specified, using default (", safeApi, ")")
				}

				if SafeOperationType(safeOperationType).String() == "Unknown" {
					return fmt.Errorf("--safe-operation must be 0 (Call) or 1 (DelegateCall)")
				}

				if safeNonceRaw == "" {
					fmt.Println("--safe-nonce not specified, fetching nonce from Safe contract")
				} else {
					safeNonce = new(big.Int)
					_, ok := safeNonce.SetString(safeNonceRaw, 0)
					if !ok {
						return fmt.Errorf("--safe-nonce is not a valid big integer")
					}
				}
			}

			if tokenAddressesRaw == "" {
				return fmt.Errorf("--token-addresses argument not specified")
			} else if strings.HasPrefix(tokenAddressesRaw, "@") {
				filename := strings.TrimPrefix(tokenAddressesRaw, "@")
				contents, readErr := os.ReadFile(filename)
				if readErr != nil {
					return readErr
				}
				unmarshalErr := json.Unmarshal(contents, &tokenAddresses)
				if unmarshalErr != nil {
					return unmarshalErr
				}
			} else {
				unmarshalErr := json.Unmarshal([]byte(tokenAddressesRaw), &tokenAddresses)
				if unmarshalErr != nil {
					return unmarshalErr
				}
			}

			if amountsRaw == "" {
				return fmt.Errorf("--amounts argument not specified")
			} else if strings.HasPrefix(amountsRaw, "@") {
				filename := strings.TrimPrefix(amountsRaw, "@")
				contents, readErr := os.ReadFile(filename)
				if readErr != nil {
					return readErr
				}
				unmarshalErr := json.Unmarshal(contents, &amounts)
				if unmarshalErr != nil {
					return unmarshalErr
				}
			} else {
				unmarshalErr := json.Unmarshal([]byte(amountsRaw), &amounts)
				if unmarshalErr != nil {
					return unmarshalErr
				}
			}

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			abi, err := DegenCasinoAccountMetaData.GetAbi()
			if err != nil {
				return fmt.Errorf("failed to get ABI: %v", err)
			}

			// Generate transaction data (override method name if safe function is specified)
			methodName := "withdraw"
			if safeFunction != "" {
				methodName = safeFunction
			}

			txCalldata, err := abi.Pack(
				methodName,
				tokenAddresses,
				amounts,
			)

			if err != nil {
				return err
			}

			if calldata {
				txCalldataHex := hex.EncodeToString(txCalldata)
				cmd.Println(txCalldataHex)
				return nil
			}

			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			contract, contractErr := NewDegenCasinoAccount(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			session := DegenCasinoAccountTransactorSession{
				Contract:     &contract.DegenCasinoAccountTransactor,
				TransactOpts: *transactionOpts,
			}

			if safeAddress != "" {
				// Create Safe proposal for transaction
				value := transactionOpts.Value
				if value == nil {
					value = big.NewInt(0)
				}

				err = CreateSafeProposal(client, key, common.HexToAddress(safeAddress), contractAddress, txCalldata, value, safeApi, SafeOperationType(safeOperationType), safeNonce)
				if err != nil {
					return fmt.Errorf("failed to create Safe proposal: %v", err)
				}

				return nil
			}

			transaction, err := session.Withdraw(

				tokenAddresses,
				amounts,
			)
			if err != nil {
				return err
			}

			cmd.Printf("Transaction hash: %s\n", transaction.Hash().Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					To:   &contractAddress,
					Data: transaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := transaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&safeAddress, "safe", "", "Address of the Safe contract")
	cmd.Flags().StringVar(&safeApi, "safe-api", "", "Safe API for the Safe Transaction Service (optional)")
	cmd.Flags().Uint8Var(&safeOperationType, "safe-operation", 0, "Safe operation type: 0 (Call) or 1 (DelegateCall)")
	cmd.Flags().StringVar(&safeFunction, "safe-function", "", "Safe function overrider to use for the transaction (optional)")
	cmd.Flags().StringVar(&safeNonceRaw, "safe-nonce", "", "Safe nonce overrider for the transaction (optional)")
	cmd.Flags().BoolVar(&calldata, "calldata", false, "Set this flag if want to return the calldata instead of sending the transaction")

	cmd.Flags().StringVar(&tokenAddressesRaw, "token-addresses", "", "token-addresses argument ([]common.Address)")
	cmd.Flags().StringVar(&amountsRaw, "amounts", "", "amounts argument ([]*big.Int)")

	return cmd
}

var ErrNoRPCURL error = errors.New("no RPC URL provided -- please pass an RPC URL from the command line or set the DEGEN_CASINO_ACCOUNT_RPC_URL environment variable")

// Generates an Ethereum client to the JSONRPC API at the given URL. If rpcURL is empty, then it
// attempts to read the RPC URL from the DEGEN_CASINO_ACCOUNT_RPC_URL environment variable. If that is empty,
// too, then it returns an error.
func NewClient(rpcURL string) (*ethclient.Client, error) {
	if rpcURL == "" {
		rpcURL = os.Getenv("DEGEN_CASINO_ACCOUNT_RPC_URL")
	}

	if rpcURL == "" {
		return nil, ErrNoRPCURL
	}

	client, err := ethclient.Dial(rpcURL)
	return client, err
}

// Creates a new context to be used when interacting with the chain client.
func NewChainContext(timeout uint) (context.Context, context.CancelFunc) {
	baseCtx := context.Background()
	parsedTimeout := time.Duration(timeout) * time.Second
	ctx, cancel := context.WithTimeout(baseCtx, parsedTimeout)
	return ctx, cancel
}

// Unlocks a key from a keystore (byte contents of a keystore file) with the given password.
func UnlockKeystore(keystoreData []byte, password string) (*keystore.Key, error) {
	key, err := keystore.DecryptKey(keystoreData, password)
	return key, err
}

// Loads a key from file, prompting the user for the password if it is not provided as a function argument.
func KeyFromFile(keystoreFile string, password string) (*keystore.Key, error) {
	var emptyKey *keystore.Key
	keystoreContent, readErr := os.ReadFile(keystoreFile)
	if readErr != nil {
		return emptyKey, readErr
	}

	// If password is "", prompt user for password.
	if password == "" {
		fmt.Printf("Please provide a password for keystore (%s): ", keystoreFile)
		passwordRaw, inputErr := term.ReadPassword(int(os.Stdin.Fd()))
		if inputErr != nil {
			return emptyKey, fmt.Errorf("error reading password: %s", inputErr.Error())
		}
		fmt.Print("\n")
		password = string(passwordRaw)
	}

	key, err := UnlockKeystore(keystoreContent, password)
	return key, err
}

// This method is used to set the parameters on a view call from command line arguments (represented mostly as
// strings).
func SetCallParametersFromArgs(opts *bind.CallOpts, pending bool, fromAddress, blockNumber string) {
	if pending {
		opts.Pending = true
	}

	if fromAddress != "" {
		opts.From = common.HexToAddress(fromAddress)
	}

	if blockNumber != "" {
		opts.BlockNumber = new(big.Int)
		opts.BlockNumber.SetString(blockNumber, 0)
	}
}

// This method is used to set the parameters on a transaction from command line arguments (represented mostly as
// strings).
func SetTransactionParametersFromArgs(opts *bind.TransactOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas string, gasLimit uint64, noSend bool) {
	if nonce != "" {
		opts.Nonce = new(big.Int)
		opts.Nonce.SetString(nonce, 0)
	}

	if value != "" {
		opts.Value = new(big.Int)
		opts.Value.SetString(value, 0)
	}

	if gasPrice != "" {
		opts.GasPrice = new(big.Int)
		opts.GasPrice.SetString(gasPrice, 0)
	}

	if maxFeePerGas != "" {
		opts.GasFeeCap = new(big.Int)
		opts.GasFeeCap.SetString(maxFeePerGas, 0)
	}

	if maxPriorityFeePerGas != "" {
		opts.GasTipCap = new(big.Int)
		opts.GasTipCap.SetString(maxPriorityFeePerGas, 0)
	}

	if gasLimit != 0 {
		opts.GasLimit = gasLimit
	}

	opts.NoSend = noSend
}

func CreateDegenCasinoAccountCommand() *cobra.Command {
	cmd := &cobra.Command{
		Use:   "degen-casino-account",
		Short: "Interact with the DegenCasinoAccount contract",
		Run: func(cmd *cobra.Command, args []string) {
			cmd.Help()
		},
	}

	cmd.SetOut(os.Stdout)

	DeployGroup := &cobra.Group{
		ID: "deploy", Title: "Commands which deploy contracts",
	}
	cmd.AddGroup(DeployGroup)
	ViewGroup := &cobra.Group{
		ID: "view", Title: "Commands which view contract state",
	}
	TransactGroup := &cobra.Group{
		ID: "transact", Title: "Commands which submit transactions",
	}
	cmd.AddGroup(ViewGroup, TransactGroup)

	cmdDeployDegenCasinoAccount := CreateDegenCasinoAccountDeploymentCommand()
	cmdDeployDegenCasinoAccount.GroupID = DeployGroup.ID
	cmd.AddCommand(cmdDeployDegenCasinoAccount)

	cmdViewAccountVersion := CreateAccountVersionCommand()
	cmdViewAccountVersion.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewAccountVersion)
	cmdViewActionHash := CreateActionHashCommand()
	cmdViewActionHash.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewActionHash)
	cmdViewEip712Domain := CreateEip712DomainCommand()
	cmdViewEip712Domain.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewEip712Domain)
	cmdViewExecutorTermsHash := CreateExecutorTermsHashCommand()
	cmdViewExecutorTermsHash.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewExecutorTermsHash)
	cmdViewLastRequest := CreateLastRequestCommand()
	cmdViewLastRequest.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewLastRequest)
	cmdViewPlayer := CreatePlayerCommand()
	cmdViewPlayer.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewPlayer)
	cmdViewSessionHash := CreateSessionHashCommand()
	cmdViewSessionHash.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewSessionHash)

	cmdTransactDrain := CreateDrainCommand()
	cmdTransactDrain.GroupID = TransactGroup.ID
	cmd.AddCommand(cmdTransactDrain)
	cmdTransactPlay := CreatePlayCommand()
	cmdTransactPlay.GroupID = TransactGroup.ID
	cmd.AddCommand(cmdTransactPlay)
	cmdTransactPlayInSession := CreatePlayInSessionCommand()
	cmdTransactPlayInSession.GroupID = TransactGroup.ID
	cmd.AddCommand(cmdTransactPlayInSession)
	cmdTransactReceive := CreateReceiveCommand()
	cmdTransactReceive.GroupID = TransactGroup.ID
	cmd.AddCommand(cmdTransactReceive)
	cmdTransactWithdraw := CreateWithdrawCommand()
	cmdTransactWithdraw.GroupID = TransactGroup.ID
	cmd.AddCommand(cmdTransactWithdraw)

	return cmd
}

// SafeOperationType represents the type of operation for a Safe transaction
type SafeOperationType uint8

const (
	Call         SafeOperationType = 0
	DelegateCall SafeOperationType = 1
)

// String returns the string representation of the SafeOperationType
func (o SafeOperationType) String() string {
	switch o {
	case Call:
		return "Call"
	case DelegateCall:
		return "DelegateCall"
	default:
		return "Unknown"
	}
}

// SafeTransactionData represents the data for a Safe transaction
type SafeTransactionData struct {
	To             string            `json:"to"`
	Value          string            `json:"value"`
	Data           string            `json:"data"`
	Operation      SafeOperationType `json:"operation"`
	SafeTxGas      uint64            `json:"safeTxGas"`
	BaseGas        uint64            `json:"baseGas"`
	GasPrice       string            `json:"gasPrice"`
	GasToken       string            `json:"gasToken"`
	RefundReceiver string            `json:"refundReceiver"`
	Nonce          *big.Int          `json:"nonce"`
	SafeTxHash     string            `json:"safeTxHash"`
	Sender         string            `json:"sender"`
	Signature      string            `json:"signature"`
	Origin         string            `json:"origin"`
}

const (
	NativeTokenAddress = "0x0000000000000000000000000000000000000000"
)

func DeployWithSafe(client *ethclient.Client, key *keystore.Key, safeAddress common.Address, factoryAddress common.Address, value *big.Int, safeApi string, deployBytecode []byte, safeOperationType SafeOperationType, salt [32]byte, safeNonce *big.Int) error {
	abi, err := CreateCall.CreateCallMetaData.GetAbi()
	if err != nil {
		return fmt.Errorf("failed to get ABI: %v", err)
	}

	safeCreateCallTxData, err := abi.Pack("performCreate2", value, deployBytecode, salt)
	if err != nil {
		return fmt.Errorf("failed to pack performCreate2 transaction: %v", err)
	}

	return CreateSafeProposal(client, key, safeAddress, factoryAddress, safeCreateCallTxData, value, safeApi, SafeOperationType(safeOperationType), safeNonce)
}

func PredictDeploymentAddressSafe(from common.Address, salt [32]byte, deployBytecode []byte) (common.Address, error) {
	// Calculate the hash of the init code (deployment bytecode)
	initCodeHash := crypto.Keccak256(deployBytecode)

	// Calculate the CREATE2 address
	deployedAddress := crypto.CreateAddress2(from, salt, initCodeHash)

	return deployedAddress, nil
}

func CreateSafeProposal(client *ethclient.Client, key *keystore.Key, safeAddress common.Address, to common.Address, data []byte, value *big.Int, safeApi string, safeOperationType SafeOperationType, safeNonce *big.Int) error {
	chainID, err := client.ChainID(context.Background())
	if err != nil {
		return fmt.Errorf("failed to get chain ID: %v", err)
	}

	// Create a new instance of the GnosisSafe contract
	safeInstance, err := GnosisSafe.NewGnosisSafe(safeAddress, client)
	if err != nil {
		return fmt.Errorf("failed to create GnosisSafe instance: %v", err)
	}

	nonce := safeNonce
	if safeNonce == nil {
		// Fetch the current nonce from the Safe contract
		fetchedNonce, err := safeInstance.Nonce(&bind.CallOpts{})
		if err != nil {
			return fmt.Errorf("failed to fetch nonce from Safe contract: %v", err)
		}
		nonce = fetchedNonce
	} else {
		nonce = safeNonce
	}

	safeTransactionData := SafeTransactionData{
		To:             to.Hex(),
		Value:          value.String(),
		Data:           common.Bytes2Hex(data),
		Operation:      safeOperationType,
		SafeTxGas:      0,
		BaseGas:        0,
		GasPrice:       "0",
		GasToken:       NativeTokenAddress,
		RefundReceiver: NativeTokenAddress,
		Nonce:          nonce,
	}

	// Calculate SafeTxHash
	safeTxHash, err := CalculateSafeTxHash(safeAddress, safeTransactionData, chainID)
	if err != nil {
		return fmt.Errorf("failed to calculate SafeTxHash: %v", err)
	}

	// Sign the SafeTxHash
	signature, err := crypto.Sign(safeTxHash.Bytes(), key.PrivateKey)
	if err != nil {
		return fmt.Errorf("failed to sign SafeTxHash: %v", err)
	}

	// Adjust V value for Ethereum's replay protection
	signature[64] += 27

	// Convert signature to hex
	senderSignature := "0x" + common.Bytes2Hex(signature)

	// Prepare the request body
	requestBody := map[string]interface{}{
		"to":             safeTransactionData.To,
		"value":          safeTransactionData.Value,
		"data":           "0x" + safeTransactionData.Data,
		"operation":      int(safeTransactionData.Operation),
		"safeTxGas":      fmt.Sprintf("%d", safeTransactionData.SafeTxGas),
		"baseGas":        fmt.Sprintf("%d", safeTransactionData.BaseGas),
		"gasPrice":       safeTransactionData.GasPrice,
		"gasToken":       safeTransactionData.GasToken,
		"refundReceiver": safeTransactionData.RefundReceiver,
		"nonce":          fmt.Sprintf("%d", safeTransactionData.Nonce),
		"safeTxHash":     safeTxHash.Hex(),
		"sender":         key.Address.Hex(),
		"signature":      senderSignature,
		"origin":         fmt.Sprintf("{\"url\":\"%s\",\"name\":\"TokenSender Deployment\"}", safeApi),
	}

	// Marshal the request body to JSON
	jsonBody, err := json.Marshal(requestBody)
	if err != nil {
		return fmt.Errorf("failed to marshal request body: %v", err)
	}

	// Send the request to the Safe Transaction Service
	req, err := http.NewRequest("POST", safeApi, bytes.NewBuffer(jsonBody))
	if err != nil {
		return fmt.Errorf("failed to create request: %v", err)
	}

	req.Header.Set("Content-Type", "application/json")

	httpClient := &http.Client{}
	resp, err := httpClient.Do(req)
	if err != nil {
		return fmt.Errorf("failed to send request: %v", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK && resp.StatusCode != http.StatusCreated {
		return fmt.Errorf("unexpected status code: %d", resp.StatusCode)
	}

	fmt.Println("Safe proposal created successfully")
	return nil
}

func CalculateSafeTxHash(safeAddress common.Address, txData SafeTransactionData, chainID *big.Int) (common.Hash, error) {
	domainSeparator := apitypes.TypedDataDomain{
		ChainId:           (*math.HexOrDecimal256)(chainID),
		VerifyingContract: safeAddress.Hex(),
	}

	typedData := apitypes.TypedData{
		Types: apitypes.Types{
			"EIP712Domain": []apitypes.Type{
				{Name: "chainId", Type: "uint256"},
				{Name: "verifyingContract", Type: "address"},
			},
			"SafeTx": []apitypes.Type{
				{Name: "to", Type: "address"},
				{Name: "value", Type: "uint256"},
				{Name: "data", Type: "bytes"},
				{Name: "operation", Type: "uint8"},
				{Name: "safeTxGas", Type: "uint256"},
				{Name: "baseGas", Type: "uint256"},
				{Name: "gasPrice", Type: "uint256"},
				{Name: "gasToken", Type: "address"},
				{Name: "refundReceiver", Type: "address"},
				{Name: "nonce", Type: "uint256"},
			},
		},
		Domain:      domainSeparator,
		PrimaryType: "SafeTx",
		Message: apitypes.TypedDataMessage{
			"to":             txData.To,
			"value":          txData.Value,
			"data":           "0x" + txData.Data,
			"operation":      fmt.Sprintf("%d", txData.Operation),
			"safeTxGas":      fmt.Sprintf("%d", txData.SafeTxGas),
			"baseGas":        fmt.Sprintf("%d", txData.BaseGas),
			"gasPrice":       txData.GasPrice,
			"gasToken":       txData.GasToken,
			"refundReceiver": txData.RefundReceiver,
			"nonce":          fmt.Sprintf("%d", txData.Nonce),
		},
	}

	typedDataHash, _, err := apitypes.TypedDataAndHash(typedData)
	if err != nil {
		return common.Hash{}, fmt.Errorf("failed to hash typed data: %v", err)
	}

	return common.BytesToHash(typedDataHash), nil
}
