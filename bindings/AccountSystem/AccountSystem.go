// This file was generated by seer: https://github.com/G7DAO/seer.
// seer version: 0.3.5
// seer command: seer evm generate --package AccountSystem --cli --foundry out/AccountSystem.sol/AccountSystem.json --struct AccountSystem --output bindings/AccountSystem/AccountSystem.go
// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package AccountSystem

import (
	"bytes"
	"crypto/rand"
	"errors"
	"math/big"
	"net/http"
	"strings"

	"context"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
	"github.com/ethereum/go-ethereum/signer/core/apitypes"

	// Reference imports to suppress errors if they are not otherwise used.
	"encoding/hex"
	"encoding/json"
	"fmt"
	"os"
	"time"

	"github.com/G7DAO/seer/bindings/CreateCall"
	"github.com/G7DAO/seer/bindings/GnosisSafe"
	"github.com/ethereum/go-ethereum/accounts/keystore"
	"github.com/ethereum/go-ethereum/ethclient"
	"github.com/spf13/cobra"
	"golang.org/x/term"

	// AccountSystemMetaData contains all meta data concerning the AccountSystem contract.
	"github.com/ethereum/go-ethereum/common/math"
	"github.com/ethereum/go-ethereum/crypto"
)

var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

var AccountSystemMetaData = &bind.MetaData{
	ABI: "[{\"type\":\"constructor\",\"inputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"accountVersion\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string\",\"internalType\":\"string\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"accounts\",\"inputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractDegenCasinoAccount\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"calculateAccountAddress\",\"inputs\":[{\"name\":\"player\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"result\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"createAccount\",\"inputs\":[{\"name\":\"player\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"systemVersion\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string\",\"internalType\":\"string\"}],\"stateMutability\":\"view\"},{\"type\":\"event\",\"name\":\"AccountCreated\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"},{\"name\":\"player\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"accountVersion\",\"type\":\"string\",\"indexed\":true,\"internalType\":\"string\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"AccountSystemCreated\",\"inputs\":[{\"name\":\"systemVersion\",\"type\":\"string\",\"indexed\":true,\"internalType\":\"string\"},{\"name\":\"accountVersion\",\"type\":\"string\",\"indexed\":true,\"internalType\":\"string\"}],\"anonymous\":false}]",
	Bin: "0x608060405234801561001057600080fd5b5060408051808201825260018152603160f81b602082015290516100349190610093565b60408051918290038220828201825260018352603160f81b60208401529051909161005e91610093565b604051908190038120907f9a4839360296e1c3040189492f73de36001eb81c3fcfbc90ecd3138c9d695c8290600090a36100c2565b6000825160005b818110156100b4576020818601810151858301520161009a565b506000920191825250919050565b61223b806100d16000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80635202f4371461005c578063535e15471461008c5780635e5c06e2146100b95780639859387b146100e2578063d26369021461008c575b600080fd5b61006f61006a36600461030f565b610114565b6040516001600160a01b0390911681526020015b60405180910390f35b6100ac604051806040016040528060018152602001603160f81b81525081565b6040516100839190610363565b61006f6100c736600461030f565b6000602081905290815260409020546001600160a01b031681565b6100f56100f036600461030f565b6101a8565b604080516001600160a01b039093168352901515602083015201610083565b6040516000903090829061012a60208201610302565b601f1982820381018352601f9091011660408181526001600160a01b03871660208301520160408051601f198184030181529082905261016d9291602001610396565b60408051601f19818403018152828252805160209182012091830182905282018690528382529150600b0160ff815360559020949350505050565b6001600160a01b038181166000908152602081905260408120549091829116156101ee5750506001600160a01b0390811660009081526020819052604081205490911691565b604080516001600160a01b03851660208201526000910160405160208183030381529060405261021d906103c5565b8460405161022a90610302565b6001600160a01b0390911681526020018190604051809103906000f590508015801561025a573d6000803e3d6000fd5b506001600160a01b038581166000908152602081815260409182902080546001600160a01b031916938516939093179092558051808201825260018152603160f81b92810192909252519192506102b0916103ec565b6040519081900381206001600160a01b0383811683529091908616907efa0c50b0f4cf669e4f59b5372d3925b09d456bcf33eacb3dcd05dfb04a7c359060200160405180910390a39360019350915050565b611dfd8061040983390190565b60006020828403121561032157600080fd5b81356001600160a01b038116811461033857600080fd5b9392505050565b60005b8381101561035a578181015183820152602001610342565b50506000910152565b602081526000825180602084015261038281604085016020870161033f565b601f01601f19169190910160400192915050565b600083516103a881846020880161033f565b8351908301906103bc81836020880161033f565b01949350505050565b805160208083015191908110156103e6576000198160200360031b1b821691505b50919050565b600082516103fe81846020870161033f565b919091019291505056fe6101606040523480156200001257600080fd5b5060405162001dfd38038062001dfd8339810160408190526200003591620001d7565b6040805180820182526012815271111959d95b90d85cda5b9bd058d8dbdd5b9d60721b602080830191909152825180840190935260018352603160f81b90830152906200008482600062000152565b610120526200009581600162000152565b61014052815160208084019190912060e052815190820120610100524660a0526200012360e05161010051604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201529081019290925260608201524660808201523060a082015260009060c00160405160208183030381529060405280519060200120905090565b60805250503060c052600280546001600160a01b0319166001600160a01b0392909216919091179055620003f2565b600060208351101562000172576200016a836200018b565b905062000185565b816200017f8482620002b0565b5060ff90505b92915050565b600080829050601f81511115620001c2578260405163305a27a960e01b8152600401620001b991906200037c565b60405180910390fd5b8051620001cf82620003cd565b179392505050565b600060208284031215620001ea57600080fd5b81516001600160a01b03811681146200020257600080fd5b9392505050565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806200023457607f821691505b6020821081036200025557634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620002ab576000816000526020600020601f850160051c81016020861015620002865750805b601f850160051c820191505b81811015620002a75782815560010162000292565b5050505b505050565b81516001600160401b03811115620002cc57620002cc62000209565b620002e481620002dd84546200021f565b846200025b565b602080601f8311600181146200031c5760008415620003035750858301515b600019600386901b1c1916600185901b178555620002a7565b600085815260208120601f198616915b828110156200034d578886015182559484019460019091019084016200032c565b50858210156200036c5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60006020808352835180602085015260005b81811015620003ac578581018301518582016040015282016200038e565b506000604082860101526040601f19601f8301168501019250505092915050565b80516020808301519190811015620002555760001960209190910360031b1b16919050565b60805160a05160c05160e0516101005161012051610140516119b06200044d6000396000610ce301526000610cb101526000610f1e01526000610ef601526000610e5101526000610e7b01526000610ea501526119b06000f3fe60806040526004361061008a5760003560e01c8063a71f8a3e11610059578063a71f8a3e14610157578063b1ebcf0914610185578063cd9deaca146101a5578063de6d6d96146101bb578063fb1bf119146101db57600080fd5b806301fa41501461009657806348db5f89146100b8578063535e1547146100f557806384b0196e1461012f57600080fd5b3661009157005b600080fd5b3480156100a257600080fd5b506100b66100b13660046112f3565b6101fb565b005b3480156100c457600080fd5b506002546100d8906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561010157600080fd5b50610122604051806040016040528060018152602001603160f81b81525081565b6040516100ec9190611380565b34801561013b57600080fd5b506101446103f7565b6040516100ec979695949392919061139a565b34801561016357600080fd5b5061017761017236600461152d565b61043d565b6040519081526020016100ec565b34801561019157600080fd5b506101776101a0366004611638565b6104d9565b3480156101b157600080fd5b5061017760035481565b3480156101c757600080fd5b506100b66101d636600461166d565b610574565b3480156101e757600080fd5b506100b66101f6366004611728565b610751565b6002546001600160a01b03163314610225576040516282b42960e81b815260040160405180910390fd5b60005b81518110156103f3576000806001600160a01b031683838151811061024f5761024f6117d5565b60200260200101516001600160a01b0316036102e4575060025460405147916000916001600160a01b039091169083908381818185875af1925050503d80600081146102b7576040519150601f19603f3d011682016040523d82523d6000602084013e6102bc565b606091505b50509050806102de576040516381775cc360e01b815260040160405180910390fd5b506103ea565b60008383815181106102f8576102f86117d5565b60209081029190910101516040516370a0823160e01b81523060048201529091506001600160a01b038216906370a0823190602401602060405180830381865afa15801561034a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061036e91906117eb565b60025460405163a9059cbb60e01b81526001600160a01b0391821660048201526024810183905291935082169063a9059cbb906044016020604051808303816000875af11580156103c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103e79190611804565b50505b50600101610228565b5050565b60006060806000806000606061040b610caa565b610413610cdc565b60408051600080825260208201909252600f60f81b9b939a50919850469750309650945092509050565b60006104d37e01bc44bf02c89b0b73ae32efb1fd056563fcb99b0eaa6c14883420d1534ae88360000151846020015180519060200120856040015186606001516040516020016104b89594939291909485526001600160a01b0393909316602085015260408401919091526060830152608082015260a00190565b60405160208183030381529060405280519060200120610d09565b92915050565b60006104d37f8e2cde8bc847d0bf8bfaa4c7d8a948811efeb03adb250508f930f62cce908c4783600001516040516020016105149190611826565b60405160208183030381529060405280519060200120846020015160405160200161053f9190611865565b60408051601f1981840301815282825280516020918201209083019490945281019190915260608101919091526080016104b8565b6002546001600160a01b0316331461059e576040516282b42960e81b815260040160405180910390fd5b60005b825181101561074c5760006001600160a01b03168382815181106105c7576105c76117d5565b60200260200101516001600160a01b0316036106765760025482516000916001600160a01b031690849084908110610601576106016117d5565b602002602001015160405160006040518083038185875af1925050503d8060008114610649576040519150601f19603f3d011682016040523d82523d6000602084013e61064e565b606091505b5050905080610670576040516381775cc360e01b815260040160405180910390fd5b50610744565b828181518110610688576106886117d5565b60200260200101516001600160a01b031663a9059cbb600260009054906101000a90046001600160a01b03168484815181106106c6576106c66117d5565b60200260200101516040518363ffffffff1660e01b81526004016106ff9291906001600160a01b03929092168252602082015260400190565b6020604051808303816000875af115801561071e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107429190611804565b505b6001016105a1565b505050565b60035484606001511161077757604051637699333d60e11b815260040160405180910390fd5b6020830151518351511461079e57604051632b477e7160e11b815260040160405180910390fd5b606084015160035560006107b18561043d565b905060006107be856104d9565b6002549091506107d8906001600160a01b03168386610d36565b6107f5576040516383abd19560e01b815260040160405180910390fd5b60025461080c906001600160a01b03168285610d36565b6108295760405163cbdd469560e01b815260040160405180910390fd5b84515160009067ffffffffffffffff811115610847576108476111cd565b604051908082528060200260200182016040528015610870578160200160208202803683370190505b50905060005b86515181101561098157865180516000919083908110610898576108986117d5565b60200260200101516001600160a01b0316036108d257478282815181106108c1576108c16117d5565b602002602001018181525050610979565b86518051829081106108e6576108e66117d5565b60209081029190910101516040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015610936573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061095a91906117eb565b82828151811061096c5761096c6117d5565b6020026020010181815250505b600101610876565b50600087600001516001600160a01b0316886040015189602001516040516109a99190611893565b60006040518083038185875af1925050503d80600081146109e6576040519150601f19603f3d011682016040523d82523d6000602084013e6109eb565b606091505b5050905080610a0d5760405163080a1c2760e01b815260040160405180910390fd5b60005b875151811015610c9f5787518051600091829184908110610a3357610a336117d5565b60200260200101516001600160a01b031603610a50575047610adb565b8851805183908110610a6457610a646117d5565b60209081029190910101516040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015610ab4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad891906117eb565b90505b838281518110610aed57610aed6117d5565b6020026020010151811115610c96576000848381518110610b1057610b106117d5565b602002602001015182610b2391906118c5565b905060006127108b602001518581518110610b4057610b406117d5565b602002602001015161ffff1683610b5791906118d8565b610b6191906118ef565b8b51805191925060009186908110610b7b57610b7b6117d5565b60200260200101516001600160a01b031603610c0057604051600090339083908381818185875af1925050503d8060008114610bd3576040519150601f19603f3d011682016040523d82523d6000602084013e610bd8565b606091505b5050905080610bfa5760405163c96d18b560e01b815260040160405180910390fd5b50610c93565b8a51805185908110610c1457610c146117d5565b602090810291909101015160405163a9059cbb60e01b8152336004820152602481018390526001600160a01b039091169063a9059cbb906044016020604051808303816000875af1158015610c6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c919190611804565b505b50505b50600101610a10565b505050505050505050565b6060610cd77f00000000000000000000000000000000000000000000000000000000000000006000610d98565b905090565b6060610cd77f00000000000000000000000000000000000000000000000000000000000000006001610d98565b60006104d3610d16610e44565b8360405161190160f01b8152600281019290925260228201526042902090565b6000806000610d458585610f6f565b5090925090506000816003811115610d5f57610d5f611911565b148015610d7d5750856001600160a01b0316826001600160a01b0316145b80610d8e5750610d8e868686610fbc565b9695505050505050565b606060ff8314610db257610dab83611097565b90506104d3565b818054610dbe90611927565b80601f0160208091040260200160405190810160405280929190818152602001828054610dea90611927565b8015610e375780601f10610e0c57610100808354040283529160200191610e37565b820191906000526020600020905b815481529060010190602001808311610e1a57829003601f168201915b5050505050905092915050565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148015610e9d57507f000000000000000000000000000000000000000000000000000000000000000046145b15610ec757507f000000000000000000000000000000000000000000000000000000000000000090565b610cd7604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201527f0000000000000000000000000000000000000000000000000000000000000000918101919091527f000000000000000000000000000000000000000000000000000000000000000060608201524660808201523060a082015260009060c00160405160208183030381529060405280519060200120905090565b60008060008351604103610fa95760208401516040850151606086015160001a610f9b888285856110d6565b955095509550505050610fb5565b50508151600091506002905b9250925092565b6000806000856001600160a01b03168585604051602401610fde929190611961565b60408051601f198184030181529181526020820180516001600160e01b0316630b135d3f60e11b179052516110139190611893565b600060405180830381855afa9150503d806000811461104e576040519150601f19603f3d011682016040523d82523d6000602084013e611053565b606091505b509150915081801561106757506020815110155b8015610d8e57508051630b135d3f60e11b9061108c90830160209081019084016117eb565b149695505050505050565b606060006110a4836111a5565b604080516020808252818301909252919250600091906020820181803683375050509182525060208101929092525090565b600080807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0841115611111575060009150600390508261119b565b604080516000808252602082018084528a905260ff891692820192909252606081018790526080810186905260019060a0016020604051602081039080840390855afa158015611165573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166111915750600092506001915082905061119b565b9250600091508190505b9450945094915050565b600060ff8216601f8111156104d357604051632cd44ac360e21b815260040160405180910390fd5b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff81118282101715611206576112066111cd565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715611235576112356111cd565b604052919050565b600067ffffffffffffffff821115611257576112576111cd565b5060051b60200190565b80356001600160a01b038116811461127857600080fd5b919050565b600082601f83011261128e57600080fd5b813560206112a361129e8361123d565b61120c565b8083825260208201915060208460051b8701019350868411156112c557600080fd5b602086015b848110156112e8576112db81611261565b83529183019183016112ca565b509695505050505050565b60006020828403121561130557600080fd5b813567ffffffffffffffff81111561131c57600080fd5b6113288482850161127d565b949350505050565b60005b8381101561134b578181015183820152602001611333565b50506000910152565b6000815180845261136c816020860160208601611330565b601f01601f19169290920160200192915050565b6020815260006113936020830184611354565b9392505050565b60ff60f81b881681526000602060e060208401526113bb60e084018a611354565b83810360408501526113cd818a611354565b606085018990526001600160a01b038816608086015260a0850187905284810360c08601528551808252602080880193509091019060005b8181101561142157835183529284019291840191600101611405565b50909c9b505050505050505050505050565b600082601f83011261144457600080fd5b813567ffffffffffffffff81111561145e5761145e6111cd565b611471601f8201601f191660200161120c565b81815284602083860101111561148657600080fd5b816020850160208301376000918101602001919091529392505050565b6000608082840312156114b557600080fd5b6040516080810167ffffffffffffffff82821081831117156114d9576114d96111cd565b816040528293506114e985611261565b835260208501359150808211156114ff57600080fd5b5061150c85828601611433565b60208301525060408301356040820152606083013560608201525092915050565b60006020828403121561153f57600080fd5b813567ffffffffffffffff81111561155657600080fd5b611328848285016114a3565b60006040828403121561157457600080fd5b61157c6111e3565b9050813567ffffffffffffffff8082111561159657600080fd5b6115a28583860161127d565b83526020915081840135818111156115b957600080fd5b84019050601f810185136115cc57600080fd5b80356115da61129e8261123d565b81815260059190911b820183019083810190878311156115f957600080fd5b928401925b8284101561162857833561ffff811681146116195760008081fd5b825292840192908401906115fe565b8085870152505050505092915050565b60006020828403121561164a57600080fd5b813567ffffffffffffffff81111561166157600080fd5b61132884828501611562565b6000806040838503121561168057600080fd5b823567ffffffffffffffff8082111561169857600080fd5b6116a48683870161127d565b93506020915081850135818111156116bb57600080fd5b85019050601f810186136116ce57600080fd5b80356116dc61129e8261123d565b81815260059190911b820183019083810190888311156116fb57600080fd5b928401925b8284101561171957833582529284019290840190611700565b80955050505050509250929050565b6000806000806080858703121561173e57600080fd5b843567ffffffffffffffff8082111561175657600080fd5b611762888389016114a3565b9550602087013591508082111561177857600080fd5b61178488838901611562565b9450604087013591508082111561179a57600080fd5b6117a688838901611433565b935060608701359150808211156117bc57600080fd5b506117c987828801611433565b91505092959194509250565b634e487b7160e01b600052603260045260246000fd5b6000602082840312156117fd57600080fd5b5051919050565b60006020828403121561181657600080fd5b8151801515811461139357600080fd5b815160009082906020808601845b838110156118595781516001600160a01b031685529382019390820190600101611834565b50929695505050505050565b815160009082906020808601845b8381101561185957815161ffff1685529382019390820190600101611873565b600082516118a5818460208701611330565b9190910192915050565b634e487b7160e01b600052601160045260246000fd5b818103818111156104d3576104d36118af565b80820281158282048414176104d3576104d36118af565b60008261190c57634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052602160045260246000fd5b600181811c9082168061193b57607f821691505b60208210810361195b57634e487b7160e01b600052602260045260246000fd5b50919050565b828152604060208201526000611328604083018461135456fea2646970667358221220b8aed518d1c396cf0d50f2995a6a7220a58305d828c115ca6b548fc6ffcf045964736f6c63430008180033a26469706673582212203d5c18eccbed95a5d62feba3371103bcd69e11415e1c411ff6619f29658106d164736f6c63430008180033",
}

// AccountSystemABI is the input ABI used to generate the binding from.
// Deprecated: Use AccountSystemMetaData.ABI instead.
var AccountSystemABI = AccountSystemMetaData.ABI

// AccountSystemBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use AccountSystemMetaData.Bin instead.
var AccountSystemBin = AccountSystemMetaData.Bin

// DeployAccountSystem deploys a new Ethereum contract, binding an instance of AccountSystem to it.
func DeployAccountSystem(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *AccountSystem, error) {
	parsed, err := AccountSystemMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(AccountSystemBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &AccountSystem{AccountSystemCaller: AccountSystemCaller{contract: contract}, AccountSystemTransactor: AccountSystemTransactor{contract: contract}, AccountSystemFilterer: AccountSystemFilterer{contract: contract}}, nil
}

// AccountSystem is an auto generated Go binding around an Ethereum contract.
type AccountSystem struct {
	AccountSystemCaller     // Read-only binding to the contract
	AccountSystemTransactor // Write-only binding to the contract
	AccountSystemFilterer   // Log filterer for contract events
}

// AccountSystemCaller is an auto generated read-only Go binding around an Ethereum contract.
type AccountSystemCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AccountSystemTransactor is an auto generated write-only Go binding around an Ethereum contract.
type AccountSystemTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AccountSystemFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type AccountSystemFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AccountSystemSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type AccountSystemSession struct {
	Contract     *AccountSystem    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// AccountSystemCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type AccountSystemCallerSession struct {
	Contract *AccountSystemCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// AccountSystemTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type AccountSystemTransactorSession struct {
	Contract     *AccountSystemTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// AccountSystemRaw is an auto generated low-level Go binding around an Ethereum contract.
type AccountSystemRaw struct {
	Contract *AccountSystem // Generic contract binding to access the raw methods on
}

// AccountSystemCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type AccountSystemCallerRaw struct {
	Contract *AccountSystemCaller // Generic read-only contract binding to access the raw methods on
}

// AccountSystemTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type AccountSystemTransactorRaw struct {
	Contract *AccountSystemTransactor // Generic write-only contract binding to access the raw methods on
}

// NewAccountSystem creates a new instance of AccountSystem, bound to a specific deployed contract.
func NewAccountSystem(address common.Address, backend bind.ContractBackend) (*AccountSystem, error) {
	contract, err := bindAccountSystem(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &AccountSystem{AccountSystemCaller: AccountSystemCaller{contract: contract}, AccountSystemTransactor: AccountSystemTransactor{contract: contract}, AccountSystemFilterer: AccountSystemFilterer{contract: contract}}, nil
}

// NewAccountSystemCaller creates a new read-only instance of AccountSystem, bound to a specific deployed contract.
func NewAccountSystemCaller(address common.Address, caller bind.ContractCaller) (*AccountSystemCaller, error) {
	contract, err := bindAccountSystem(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &AccountSystemCaller{contract: contract}, nil
}

// NewAccountSystemTransactor creates a new write-only instance of AccountSystem, bound to a specific deployed contract.
func NewAccountSystemTransactor(address common.Address, transactor bind.ContractTransactor) (*AccountSystemTransactor, error) {
	contract, err := bindAccountSystem(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &AccountSystemTransactor{contract: contract}, nil
}

// NewAccountSystemFilterer creates a new log filterer instance of AccountSystem, bound to a specific deployed contract.
func NewAccountSystemFilterer(address common.Address, filterer bind.ContractFilterer) (*AccountSystemFilterer, error) {
	contract, err := bindAccountSystem(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &AccountSystemFilterer{contract: contract}, nil
}

// bindAccountSystem binds a generic wrapper to an already deployed contract.
func bindAccountSystem(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := AccountSystemMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_AccountSystem *AccountSystemRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _AccountSystem.Contract.AccountSystemCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_AccountSystem *AccountSystemRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AccountSystem.Contract.AccountSystemTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_AccountSystem *AccountSystemRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _AccountSystem.Contract.AccountSystemTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_AccountSystem *AccountSystemCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _AccountSystem.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_AccountSystem *AccountSystemTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AccountSystem.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_AccountSystem *AccountSystemTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _AccountSystem.Contract.contract.Transact(opts, method, params...)
}

// AccountVersion is a free data retrieval call binding the contract method 0x535e1547.
//
// Solidity: function accountVersion() view returns(string)
func (_AccountSystem *AccountSystemCaller) AccountVersion(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _AccountSystem.contract.Call(opts, &out, "accountVersion")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// AccountVersion is a free data retrieval call binding the contract method 0x535e1547.
//
// Solidity: function accountVersion() view returns(string)
func (_AccountSystem *AccountSystemSession) AccountVersion() (string, error) {
	return _AccountSystem.Contract.AccountVersion(&_AccountSystem.CallOpts)
}

// AccountVersion is a free data retrieval call binding the contract method 0x535e1547.
//
// Solidity: function accountVersion() view returns(string)
func (_AccountSystem *AccountSystemCallerSession) AccountVersion() (string, error) {
	return _AccountSystem.Contract.AccountVersion(&_AccountSystem.CallOpts)
}

// Accounts is a free data retrieval call binding the contract method 0x5e5c06e2.
//
// Solidity: function accounts(address ) view returns(address)
func (_AccountSystem *AccountSystemCaller) Accounts(opts *bind.CallOpts, arg0 common.Address) (common.Address, error) {
	var out []interface{}
	err := _AccountSystem.contract.Call(opts, &out, "accounts", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Accounts is a free data retrieval call binding the contract method 0x5e5c06e2.
//
// Solidity: function accounts(address ) view returns(address)
func (_AccountSystem *AccountSystemSession) Accounts(arg0 common.Address) (common.Address, error) {
	return _AccountSystem.Contract.Accounts(&_AccountSystem.CallOpts, arg0)
}

// Accounts is a free data retrieval call binding the contract method 0x5e5c06e2.
//
// Solidity: function accounts(address ) view returns(address)
func (_AccountSystem *AccountSystemCallerSession) Accounts(arg0 common.Address) (common.Address, error) {
	return _AccountSystem.Contract.Accounts(&_AccountSystem.CallOpts, arg0)
}

// CalculateAccountAddress is a free data retrieval call binding the contract method 0x5202f437.
//
// Solidity: function calculateAccountAddress(address player) view returns(address result)
func (_AccountSystem *AccountSystemCaller) CalculateAccountAddress(opts *bind.CallOpts, player common.Address) (common.Address, error) {
	var out []interface{}
	err := _AccountSystem.contract.Call(opts, &out, "calculateAccountAddress", player)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// CalculateAccountAddress is a free data retrieval call binding the contract method 0x5202f437.
//
// Solidity: function calculateAccountAddress(address player) view returns(address result)
func (_AccountSystem *AccountSystemSession) CalculateAccountAddress(player common.Address) (common.Address, error) {
	return _AccountSystem.Contract.CalculateAccountAddress(&_AccountSystem.CallOpts, player)
}

// CalculateAccountAddress is a free data retrieval call binding the contract method 0x5202f437.
//
// Solidity: function calculateAccountAddress(address player) view returns(address result)
func (_AccountSystem *AccountSystemCallerSession) CalculateAccountAddress(player common.Address) (common.Address, error) {
	return _AccountSystem.Contract.CalculateAccountAddress(&_AccountSystem.CallOpts, player)
}

// SystemVersion is a free data retrieval call binding the contract method 0xd2636902.
//
// Solidity: function systemVersion() view returns(string)
func (_AccountSystem *AccountSystemCaller) SystemVersion(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _AccountSystem.contract.Call(opts, &out, "systemVersion")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// SystemVersion is a free data retrieval call binding the contract method 0xd2636902.
//
// Solidity: function systemVersion() view returns(string)
func (_AccountSystem *AccountSystemSession) SystemVersion() (string, error) {
	return _AccountSystem.Contract.SystemVersion(&_AccountSystem.CallOpts)
}

// SystemVersion is a free data retrieval call binding the contract method 0xd2636902.
//
// Solidity: function systemVersion() view returns(string)
func (_AccountSystem *AccountSystemCallerSession) SystemVersion() (string, error) {
	return _AccountSystem.Contract.SystemVersion(&_AccountSystem.CallOpts)
}

// CreateAccount is a paid mutator transaction binding the contract method 0x9859387b.
//
// Solidity: function createAccount(address player) returns(address, bool)
func (_AccountSystem *AccountSystemTransactor) CreateAccount(opts *bind.TransactOpts, player common.Address) (*types.Transaction, error) {
	return _AccountSystem.contract.Transact(opts, "createAccount", player)
}

// CreateAccount is a paid mutator transaction binding the contract method 0x9859387b.
//
// Solidity: function createAccount(address player) returns(address, bool)
func (_AccountSystem *AccountSystemSession) CreateAccount(player common.Address) (*types.Transaction, error) {
	return _AccountSystem.Contract.CreateAccount(&_AccountSystem.TransactOpts, player)
}

// CreateAccount is a paid mutator transaction binding the contract method 0x9859387b.
//
// Solidity: function createAccount(address player) returns(address, bool)
func (_AccountSystem *AccountSystemTransactorSession) CreateAccount(player common.Address) (*types.Transaction, error) {
	return _AccountSystem.Contract.CreateAccount(&_AccountSystem.TransactOpts, player)
}

// AccountSystemAccountCreatedIterator is returned from FilterAccountCreated and is used to iterate over the raw logs and unpacked data for AccountCreated events raised by the AccountSystem contract.
type AccountSystemAccountCreatedIterator struct {
	Event *AccountSystemAccountCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AccountSystemAccountCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AccountSystemAccountCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AccountSystemAccountCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AccountSystemAccountCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AccountSystemAccountCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AccountSystemAccountCreated represents a AccountCreated event raised by the AccountSystem contract.
type AccountSystemAccountCreated struct {
	Account        common.Address
	Player         common.Address
	AccountVersion common.Hash
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterAccountCreated is a free log retrieval operation binding the contract event 0x00fa0c50b0f4cf669e4f59b5372d3925b09d456bcf33eacb3dcd05dfb04a7c35.
//
// Solidity: event AccountCreated(address account, address indexed player, string indexed accountVersion)
func (_AccountSystem *AccountSystemFilterer) FilterAccountCreated(opts *bind.FilterOpts, player []common.Address, accountVersion []string) (*AccountSystemAccountCreatedIterator, error) {

	var playerRule []interface{}
	for _, playerItem := range player {
		playerRule = append(playerRule, playerItem)
	}
	var accountVersionRule []interface{}
	for _, accountVersionItem := range accountVersion {
		accountVersionRule = append(accountVersionRule, accountVersionItem)
	}

	logs, sub, err := _AccountSystem.contract.FilterLogs(opts, "AccountCreated", playerRule, accountVersionRule)
	if err != nil {
		return nil, err
	}
	return &AccountSystemAccountCreatedIterator{contract: _AccountSystem.contract, event: "AccountCreated", logs: logs, sub: sub}, nil
}

// WatchAccountCreated is a free log subscription operation binding the contract event 0x00fa0c50b0f4cf669e4f59b5372d3925b09d456bcf33eacb3dcd05dfb04a7c35.
//
// Solidity: event AccountCreated(address account, address indexed player, string indexed accountVersion)
func (_AccountSystem *AccountSystemFilterer) WatchAccountCreated(opts *bind.WatchOpts, sink chan<- *AccountSystemAccountCreated, player []common.Address, accountVersion []string) (event.Subscription, error) {

	var playerRule []interface{}
	for _, playerItem := range player {
		playerRule = append(playerRule, playerItem)
	}
	var accountVersionRule []interface{}
	for _, accountVersionItem := range accountVersion {
		accountVersionRule = append(accountVersionRule, accountVersionItem)
	}

	logs, sub, err := _AccountSystem.contract.WatchLogs(opts, "AccountCreated", playerRule, accountVersionRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AccountSystemAccountCreated)
				if err := _AccountSystem.contract.UnpackLog(event, "AccountCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAccountCreated is a log parse operation binding the contract event 0x00fa0c50b0f4cf669e4f59b5372d3925b09d456bcf33eacb3dcd05dfb04a7c35.
//
// Solidity: event AccountCreated(address account, address indexed player, string indexed accountVersion)
func (_AccountSystem *AccountSystemFilterer) ParseAccountCreated(log types.Log) (*AccountSystemAccountCreated, error) {
	event := new(AccountSystemAccountCreated)
	if err := _AccountSystem.contract.UnpackLog(event, "AccountCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AccountSystemAccountSystemCreatedIterator is returned from FilterAccountSystemCreated and is used to iterate over the raw logs and unpacked data for AccountSystemCreated events raised by the AccountSystem contract.
type AccountSystemAccountSystemCreatedIterator struct {
	Event *AccountSystemAccountSystemCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AccountSystemAccountSystemCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AccountSystemAccountSystemCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AccountSystemAccountSystemCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AccountSystemAccountSystemCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AccountSystemAccountSystemCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AccountSystemAccountSystemCreated represents a AccountSystemCreated event raised by the AccountSystem contract.
type AccountSystemAccountSystemCreated struct {
	SystemVersion  common.Hash
	AccountVersion common.Hash
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterAccountSystemCreated is a free log retrieval operation binding the contract event 0x9a4839360296e1c3040189492f73de36001eb81c3fcfbc90ecd3138c9d695c82.
//
// Solidity: event AccountSystemCreated(string indexed systemVersion, string indexed accountVersion)
func (_AccountSystem *AccountSystemFilterer) FilterAccountSystemCreated(opts *bind.FilterOpts, systemVersion []string, accountVersion []string) (*AccountSystemAccountSystemCreatedIterator, error) {

	var systemVersionRule []interface{}
	for _, systemVersionItem := range systemVersion {
		systemVersionRule = append(systemVersionRule, systemVersionItem)
	}
	var accountVersionRule []interface{}
	for _, accountVersionItem := range accountVersion {
		accountVersionRule = append(accountVersionRule, accountVersionItem)
	}

	logs, sub, err := _AccountSystem.contract.FilterLogs(opts, "AccountSystemCreated", systemVersionRule, accountVersionRule)
	if err != nil {
		return nil, err
	}
	return &AccountSystemAccountSystemCreatedIterator{contract: _AccountSystem.contract, event: "AccountSystemCreated", logs: logs, sub: sub}, nil
}

// WatchAccountSystemCreated is a free log subscription operation binding the contract event 0x9a4839360296e1c3040189492f73de36001eb81c3fcfbc90ecd3138c9d695c82.
//
// Solidity: event AccountSystemCreated(string indexed systemVersion, string indexed accountVersion)
func (_AccountSystem *AccountSystemFilterer) WatchAccountSystemCreated(opts *bind.WatchOpts, sink chan<- *AccountSystemAccountSystemCreated, systemVersion []string, accountVersion []string) (event.Subscription, error) {

	var systemVersionRule []interface{}
	for _, systemVersionItem := range systemVersion {
		systemVersionRule = append(systemVersionRule, systemVersionItem)
	}
	var accountVersionRule []interface{}
	for _, accountVersionItem := range accountVersion {
		accountVersionRule = append(accountVersionRule, accountVersionItem)
	}

	logs, sub, err := _AccountSystem.contract.WatchLogs(opts, "AccountSystemCreated", systemVersionRule, accountVersionRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AccountSystemAccountSystemCreated)
				if err := _AccountSystem.contract.UnpackLog(event, "AccountSystemCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAccountSystemCreated is a log parse operation binding the contract event 0x9a4839360296e1c3040189492f73de36001eb81c3fcfbc90ecd3138c9d695c82.
//
// Solidity: event AccountSystemCreated(string indexed systemVersion, string indexed accountVersion)
func (_AccountSystem *AccountSystemFilterer) ParseAccountSystemCreated(log types.Log) (*AccountSystemAccountSystemCreated, error) {
	event := new(AccountSystemAccountSystemCreated)
	if err := _AccountSystem.contract.UnpackLog(event, "AccountSystemCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

func CreateAccountSystemDeploymentCommand() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc string
	var gasLimit uint64
	var simulate bool
	var timeout uint
	var safeAddress, safeApi, safeCreateCall, safeSaltRaw, safeNonceRaw string
	var safeOperationType uint8
	var salt [32]byte
	var predictAddress bool
	var safeNonce *big.Int

	cmd := &cobra.Command{
		Use:   "deploy",
		Short: "Deploy a new AccountSystem contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if keyfile == "" {
				return fmt.Errorf("--keystore not specified (this should be a path to an Ethereum account keystore file)")
			}

			if rpc == "" {
				return fmt.Errorf("--rpc not specified (this should be a URL to an Ethereum JSONRPC API)")
			}

			if safeAddress != "" {
				if !common.IsHexAddress(safeAddress) {
					return fmt.Errorf("--safe is not a valid Ethereum address")
				}
				if safeApi == "" {
					client, clientErr := NewClient(rpc)
					if clientErr != nil {
						return clientErr
					}
					chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
					defer cancelChainIDCtx()
					chainID, chainIDErr := client.ChainID(chainIDCtx)
					if chainIDErr != nil {
						return chainIDErr
					}
					safeApi = fmt.Sprintf("https://safe-client.safe.global/v1/chains/%s/transactions/%s/propose", chainID.String(), safeAddress)
					fmt.Println("--safe-api not specified, using default (", safeApi, ")")
				}

				if safeCreateCall == "" {
					fmt.Println("--safe-create-call not specified, using default (0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4)")
					safeCreateCall = "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4"
				}
				if !common.IsHexAddress(safeCreateCall) {
					return fmt.Errorf("--safe-create-call is not a valid Ethereum address")
				}

				if SafeOperationType(safeOperationType).String() == "Unknown" {
					return fmt.Errorf("--safe-operation must be 0 (Call) or 1 (DelegateCall)")
				}

				if safeSaltRaw == "" {
					fmt.Println("--safe-salt not specified, generating random salt")
					_, err := rand.Read(salt[:])
					if err != nil {
						return fmt.Errorf("failed to generate random salt: %v", err)
					}
					// prompt user to accept random salt
					fmt.Println("Generated salt:", common.Bytes2Hex(salt[:]))
					fmt.Println("Please check the salt and confirm (y/n)")
					var confirm string
					fmt.Scanln(&confirm)
					if confirm != "y" && confirm != "Y" && confirm != "\n" && confirm != "" {
						return fmt.Errorf("salt not accepted, please specify a valid salt")
					}
				} else {
					copy(salt[:], safeSaltRaw)
				}

				if safeNonceRaw == "" {
					fmt.Println("--safe-nonce not specified, fetching nonce from Safe contract")
				} else {
					safeNonce = new(big.Int)
					_, ok := safeNonce.SetString(safeNonceRaw, 0)
					if !ok {
						return fmt.Errorf("--safe-nonce is not a valid big integer")
					}
				}
			}

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			if safeAddress != "" {
				// Generate deploy bytecode with constructor arguments
				deployBytecode, err := generateAccountSystemDeployBytecode()
				if err != nil {
					return fmt.Errorf("failed to generate deploy bytecode: %v", err)
				}

				// Create Safe proposal for deployment
				value := transactionOpts.Value
				if value == nil {
					value = big.NewInt(0)
				}

				if predictAddress {
					fmt.Println("Predicting deployment address...")
					from := common.HexToAddress(safeAddress)
					if safeOperationType == 0 {
						from = common.HexToAddress(safeCreateCall)
					}
					deploymentAddress, err := PredictDeploymentAddressSafe(from, salt, deployBytecode)
					if err != nil {
						return fmt.Errorf("failed to predict deployment address: %v", err)
					}
					fmt.Println("Predicted deployment address:", deploymentAddress.Hex())
					return nil
				} else {
					fmt.Println("Creating Safe proposal...")
					err = DeployWithSafe(client, key, common.HexToAddress(safeAddress), common.HexToAddress(safeCreateCall), value, safeApi, deployBytecode, SafeOperationType(safeOperationType), salt, safeNonce)
					if err != nil {
						return fmt.Errorf("failed to create Safe proposal: %v", err)
					}
				}

				return nil
			}

			address, deploymentTransaction, _, deploymentErr := DeployAccountSystem(
				transactionOpts,
				client,
			)
			if deploymentErr != nil {
				return deploymentErr
			}

			cmd.Printf("Transaction hash: %s\nContract address: %s\n", deploymentTransaction.Hash().Hex(), address.Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					Data: deploymentTransaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := deploymentTransaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&safeAddress, "safe", "", "Address of the Safe contract")
	cmd.Flags().StringVar(&safeApi, "safe-api", "", "Safe API for the Safe Transaction Service (optional)")
	cmd.Flags().StringVar(&safeCreateCall, "safe-create-call", "", "Address of the CreateCall contract (optional)")
	cmd.Flags().Uint8Var(&safeOperationType, "safe-operation", 1, "Safe operation type: 0 (Call) or 1 (DelegateCall) - default is 1")
	cmd.Flags().StringVar(&safeSaltRaw, "safe-salt", "", "Salt to use for the Safe transaction")
	cmd.Flags().BoolVar(&predictAddress, "safe-predict-address", false, "Predict the deployment address (only works for Safe transactions)")
	cmd.Flags().StringVar(&safeNonceRaw, "safe-nonce", "", "Safe nonce overrider for the transaction (optional)")

	return cmd
}

func generateAccountSystemDeployBytecode() ([]byte, error) {
	abiPacked, err := AccountSystemMetaData.GetAbi()
	if err != nil {
		return nil, fmt.Errorf("failed to get ABI: %v", err)
	}

	constructorArguments, err := abiPacked.Pack("")
	if err != nil {
		return nil, fmt.Errorf("failed to pack constructor arguments: %v", err)
	}

	deployBytecode := append(common.FromHex(AccountSystemMetaData.Bin), constructorArguments...)
	return deployBytecode, nil
}

func CreateAccountVersionCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var capture0 string

	cmd := &cobra.Command{
		Use:   "account-version",
		Short: "Call the AccountVersion view method on a AccountSystem contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewAccountSystem(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := AccountSystemCallerSession{
				Contract: &contract.AccountSystemCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.AccountVersion()
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0)

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	return cmd
}
func CreateAccountsCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var arg0 common.Address
	var arg0Raw string

	var capture0 common.Address

	cmd := &cobra.Command{
		Use:   "accounts",
		Short: "Call the Accounts view method on a AccountSystem contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if arg0Raw == "" {
				return fmt.Errorf("--arg-0 argument not specified")
			} else if !common.IsHexAddress(arg0Raw) {
				return fmt.Errorf("--arg-0 argument is not a valid Ethereum address")
			}
			arg0 = common.HexToAddress(arg0Raw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewAccountSystem(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := AccountSystemCallerSession{
				Contract: &contract.AccountSystemCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.Accounts(
				arg0,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0.Hex())

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&arg0Raw, "arg-0", "", "arg-0 argument (common.Address)")

	return cmd
}
func CreateCalculateAccountAddressCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var player common.Address
	var playerRaw string

	var capture0 common.Address

	cmd := &cobra.Command{
		Use:   "calculate-account-address",
		Short: "Call the CalculateAccountAddress view method on a AccountSystem contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if playerRaw == "" {
				return fmt.Errorf("--player argument not specified")
			} else if !common.IsHexAddress(playerRaw) {
				return fmt.Errorf("--player argument is not a valid Ethereum address")
			}
			player = common.HexToAddress(playerRaw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewAccountSystem(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := AccountSystemCallerSession{
				Contract: &contract.AccountSystemCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.CalculateAccountAddress(
				player,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0.Hex())

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&playerRaw, "player", "", "player argument (common.Address)")

	return cmd
}
func CreateSystemVersionCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var capture0 string

	cmd := &cobra.Command{
		Use:   "system-version",
		Short: "Call the SystemVersion view method on a AccountSystem contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewAccountSystem(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := AccountSystemCallerSession{
				Contract: &contract.AccountSystemCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.SystemVersion()
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0)

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	return cmd
}

func CreateCreateAccountCommand() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc, contractAddressRaw, safeFunction, safeNonceRaw string
	var gasLimit uint64
	var simulate bool
	var timeout uint
	var contractAddress common.Address
	var safeAddress, safeApi string
	var safeOperationType uint8
	var safeNonce *big.Int

	var player common.Address
	var playerRaw string

	cmd := &cobra.Command{
		Use:   "create-account",
		Short: "Execute the CreateAccount method on a AccountSystem contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if keyfile == "" {
				return fmt.Errorf("--keystore not specified (this should be a path to an Ethereum account keystore file)")
			}

			if rpc == "" {
				return fmt.Errorf("--rpc not specified (this should be a URL to an Ethereum JSONRPC API)")
			}

			if safeAddress != "" {
				if !common.IsHexAddress(safeAddress) {
					return fmt.Errorf("--safe is not a valid Ethereum address")
				}
				if safeApi == "" {
					client, clientErr := NewClient(rpc)
					if clientErr != nil {
						return clientErr
					}
					chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
					defer cancelChainIDCtx()
					chainID, chainIDErr := client.ChainID(chainIDCtx)
					if chainIDErr != nil {
						return chainIDErr
					}
					safeApi = fmt.Sprintf("https://safe-client.safe.global/v1/chains/%s/transactions/%s/propose", chainID.String(), safeAddress)
					fmt.Println("--safe-api not specified, using default (", safeApi, ")")
				}

				if SafeOperationType(safeOperationType).String() == "Unknown" {
					return fmt.Errorf("--safe-operation must be 0 (Call) or 1 (DelegateCall)")
				}

				if safeNonceRaw == "" {
					fmt.Println("--safe-nonce not specified, fetching nonce from Safe contract")
				} else {
					safeNonce = new(big.Int)
					_, ok := safeNonce.SetString(safeNonceRaw, 0)
					if !ok {
						return fmt.Errorf("--safe-nonce is not a valid big integer")
					}
				}
			}

			if playerRaw == "" {
				return fmt.Errorf("--player argument not specified")
			} else if !common.IsHexAddress(playerRaw) {
				return fmt.Errorf("--player argument is not a valid Ethereum address")
			}
			player = common.HexToAddress(playerRaw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			contract, contractErr := NewAccountSystem(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			session := AccountSystemTransactorSession{
				Contract:     &contract.AccountSystemTransactor,
				TransactOpts: *transactionOpts,
			}

			if safeAddress != "" {
				abi, err := AccountSystemMetaData.GetAbi()
				if err != nil {
					return fmt.Errorf("failed to get ABI: %v", err)
				}

				// Generate transaction data (override method name if safe function is specified)
				methodName := "createAccount"
				if safeFunction != "" {
					methodName = safeFunction
				}

				transaction, err := abi.Pack(
					methodName,
					player,
				)

				if err != nil {
					return err
				}

				// Create Safe proposal for transaction
				value := transactionOpts.Value
				if value == nil {
					value = big.NewInt(0)
				}

				err = CreateSafeProposal(client, key, common.HexToAddress(safeAddress), contractAddress, transaction, value, safeApi, SafeOperationType(safeOperationType), safeNonce)
				if err != nil {
					return fmt.Errorf("failed to create Safe proposal: %v", err)
				}

				return nil
			}

			transaction, err := session.CreateAccount(

				player,
			)
			if err != nil {
				return err
			}

			cmd.Printf("Transaction hash: %s\n", transaction.Hash().Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					To:   &contractAddress,
					Data: transaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := transaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&safeAddress, "safe", "", "Address of the Safe contract")
	cmd.Flags().StringVar(&safeApi, "safe-api", "", "Safe API for the Safe Transaction Service (optional)")
	cmd.Flags().Uint8Var(&safeOperationType, "safe-operation", 0, "Safe operation type: 0 (Call) or 1 (DelegateCall)")
	cmd.Flags().StringVar(&safeFunction, "safe-function", "", "Safe function overrider to use for the transaction (optional)")
	cmd.Flags().StringVar(&safeNonceRaw, "safe-nonce", "", "Safe nonce overrider for the transaction (optional)")

	cmd.Flags().StringVar(&playerRaw, "player", "", "player argument (common.Address)")

	return cmd
}

var ErrNoRPCURL error = errors.New("no RPC URL provided -- please pass an RPC URL from the command line or set the ACCOUNT_SYSTEM_RPC_URL environment variable")

// Generates an Ethereum client to the JSONRPC API at the given URL. If rpcURL is empty, then it
// attempts to read the RPC URL from the ACCOUNT_SYSTEM_RPC_URL environment variable. If that is empty,
// too, then it returns an error.
func NewClient(rpcURL string) (*ethclient.Client, error) {
	if rpcURL == "" {
		rpcURL = os.Getenv("ACCOUNT_SYSTEM_RPC_URL")
	}

	if rpcURL == "" {
		return nil, ErrNoRPCURL
	}

	client, err := ethclient.Dial(rpcURL)
	return client, err
}

// Creates a new context to be used when interacting with the chain client.
func NewChainContext(timeout uint) (context.Context, context.CancelFunc) {
	baseCtx := context.Background()
	parsedTimeout := time.Duration(timeout) * time.Second
	ctx, cancel := context.WithTimeout(baseCtx, parsedTimeout)
	return ctx, cancel
}

// Unlocks a key from a keystore (byte contents of a keystore file) with the given password.
func UnlockKeystore(keystoreData []byte, password string) (*keystore.Key, error) {
	key, err := keystore.DecryptKey(keystoreData, password)
	return key, err
}

// Loads a key from file, prompting the user for the password if it is not provided as a function argument.
func KeyFromFile(keystoreFile string, password string) (*keystore.Key, error) {
	var emptyKey *keystore.Key
	keystoreContent, readErr := os.ReadFile(keystoreFile)
	if readErr != nil {
		return emptyKey, readErr
	}

	// If password is "", prompt user for password.
	if password == "" {
		fmt.Printf("Please provide a password for keystore (%s): ", keystoreFile)
		passwordRaw, inputErr := term.ReadPassword(int(os.Stdin.Fd()))
		if inputErr != nil {
			return emptyKey, fmt.Errorf("error reading password: %s", inputErr.Error())
		}
		fmt.Print("\n")
		password = string(passwordRaw)
	}

	key, err := UnlockKeystore(keystoreContent, password)
	return key, err
}

// This method is used to set the parameters on a view call from command line arguments (represented mostly as
// strings).
func SetCallParametersFromArgs(opts *bind.CallOpts, pending bool, fromAddress, blockNumber string) {
	if pending {
		opts.Pending = true
	}

	if fromAddress != "" {
		opts.From = common.HexToAddress(fromAddress)
	}

	if blockNumber != "" {
		opts.BlockNumber = new(big.Int)
		opts.BlockNumber.SetString(blockNumber, 0)
	}
}

// This method is used to set the parameters on a transaction from command line arguments (represented mostly as
// strings).
func SetTransactionParametersFromArgs(opts *bind.TransactOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas string, gasLimit uint64, noSend bool) {
	if nonce != "" {
		opts.Nonce = new(big.Int)
		opts.Nonce.SetString(nonce, 0)
	}

	if value != "" {
		opts.Value = new(big.Int)
		opts.Value.SetString(value, 0)
	}

	if gasPrice != "" {
		opts.GasPrice = new(big.Int)
		opts.GasPrice.SetString(gasPrice, 0)
	}

	if maxFeePerGas != "" {
		opts.GasFeeCap = new(big.Int)
		opts.GasFeeCap.SetString(maxFeePerGas, 0)
	}

	if maxPriorityFeePerGas != "" {
		opts.GasTipCap = new(big.Int)
		opts.GasTipCap.SetString(maxPriorityFeePerGas, 0)
	}

	if gasLimit != 0 {
		opts.GasLimit = gasLimit
	}

	opts.NoSend = noSend
}

func CreateAccountSystemCommand() *cobra.Command {
	cmd := &cobra.Command{
		Use:   "account-system",
		Short: "Interact with the AccountSystem contract",
		Run: func(cmd *cobra.Command, args []string) {
			cmd.Help()
		},
	}

	cmd.SetOut(os.Stdout)

	DeployGroup := &cobra.Group{
		ID: "deploy", Title: "Commands which deploy contracts",
	}
	cmd.AddGroup(DeployGroup)
	ViewGroup := &cobra.Group{
		ID: "view", Title: "Commands which view contract state",
	}
	TransactGroup := &cobra.Group{
		ID: "transact", Title: "Commands which submit transactions",
	}
	cmd.AddGroup(ViewGroup, TransactGroup)

	cmdDeployAccountSystem := CreateAccountSystemDeploymentCommand()
	cmdDeployAccountSystem.GroupID = DeployGroup.ID
	cmd.AddCommand(cmdDeployAccountSystem)

	cmdViewAccountVersion := CreateAccountVersionCommand()
	cmdViewAccountVersion.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewAccountVersion)
	cmdViewAccounts := CreateAccountsCommand()
	cmdViewAccounts.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewAccounts)
	cmdViewCalculateAccountAddress := CreateCalculateAccountAddressCommand()
	cmdViewCalculateAccountAddress.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewCalculateAccountAddress)
	cmdViewSystemVersion := CreateSystemVersionCommand()
	cmdViewSystemVersion.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewSystemVersion)

	cmdTransactCreateAccount := CreateCreateAccountCommand()
	cmdTransactCreateAccount.GroupID = TransactGroup.ID
	cmd.AddCommand(cmdTransactCreateAccount)

	return cmd
}

// SafeOperationType represents the type of operation for a Safe transaction
type SafeOperationType uint8

const (
	Call         SafeOperationType = 0
	DelegateCall SafeOperationType = 1
)

// String returns the string representation of the SafeOperationType
func (o SafeOperationType) String() string {
	switch o {
	case Call:
		return "Call"
	case DelegateCall:
		return "DelegateCall"
	default:
		return "Unknown"
	}
}

// SafeTransactionData represents the data for a Safe transaction
type SafeTransactionData struct {
	To             string            `json:"to"`
	Value          string            `json:"value"`
	Data           string            `json:"data"`
	Operation      SafeOperationType `json:"operation"`
	SafeTxGas      uint64            `json:"safeTxGas"`
	BaseGas        uint64            `json:"baseGas"`
	GasPrice       string            `json:"gasPrice"`
	GasToken       string            `json:"gasToken"`
	RefundReceiver string            `json:"refundReceiver"`
	Nonce          *big.Int          `json:"nonce"`
	SafeTxHash     string            `json:"safeTxHash"`
	Sender         string            `json:"sender"`
	Signature      string            `json:"signature"`
	Origin         string            `json:"origin"`
}

const (
	NativeTokenAddress = "0x0000000000000000000000000000000000000000"
)

func DeployWithSafe(client *ethclient.Client, key *keystore.Key, safeAddress common.Address, factoryAddress common.Address, value *big.Int, safeApi string, deployBytecode []byte, safeOperationType SafeOperationType, salt [32]byte, safeNonce *big.Int) error {
	abi, err := CreateCall.CreateCallMetaData.GetAbi()
	if err != nil {
		return fmt.Errorf("failed to get ABI: %v", err)
	}

	safeCreateCallTxData, err := abi.Pack("performCreate2", value, deployBytecode, salt)
	if err != nil {
		return fmt.Errorf("failed to pack performCreate2 transaction: %v", err)
	}

	return CreateSafeProposal(client, key, safeAddress, factoryAddress, safeCreateCallTxData, value, safeApi, SafeOperationType(safeOperationType), safeNonce)
}

func PredictDeploymentAddressSafe(from common.Address, salt [32]byte, deployBytecode []byte) (common.Address, error) {
	// Calculate the hash of the init code (deployment bytecode)
	initCodeHash := crypto.Keccak256(deployBytecode)

	// Calculate the CREATE2 address
	deployedAddress := crypto.CreateAddress2(from, salt, initCodeHash)

	return deployedAddress, nil
}

func CreateSafeProposal(client *ethclient.Client, key *keystore.Key, safeAddress common.Address, to common.Address, data []byte, value *big.Int, safeApi string, safeOperationType SafeOperationType, safeNonce *big.Int) error {
	chainID, err := client.ChainID(context.Background())
	if err != nil {
		return fmt.Errorf("failed to get chain ID: %v", err)
	}

	// Create a new instance of the GnosisSafe contract
	safeInstance, err := GnosisSafe.NewGnosisSafe(safeAddress, client)
	if err != nil {
		return fmt.Errorf("failed to create GnosisSafe instance: %v", err)
	}

	nonce := safeNonce
	if safeNonce == nil {
		// Fetch the current nonce from the Safe contract
		fetchedNonce, err := safeInstance.Nonce(&bind.CallOpts{})
		if err != nil {
			return fmt.Errorf("failed to fetch nonce from Safe contract: %v", err)
		}
		nonce = fetchedNonce
	} else {
		nonce = safeNonce
	}

	safeTransactionData := SafeTransactionData{
		To:             to.Hex(),
		Value:          value.String(),
		Data:           common.Bytes2Hex(data),
		Operation:      safeOperationType,
		SafeTxGas:      0,
		BaseGas:        0,
		GasPrice:       "0",
		GasToken:       NativeTokenAddress,
		RefundReceiver: NativeTokenAddress,
		Nonce:          nonce,
	}

	// Calculate SafeTxHash
	safeTxHash, err := CalculateSafeTxHash(safeAddress, safeTransactionData, chainID)
	if err != nil {
		return fmt.Errorf("failed to calculate SafeTxHash: %v", err)
	}

	// Sign the SafeTxHash
	signature, err := crypto.Sign(safeTxHash.Bytes(), key.PrivateKey)
	if err != nil {
		return fmt.Errorf("failed to sign SafeTxHash: %v", err)
	}

	// Adjust V value for Ethereum's replay protection
	signature[64] += 27

	// Convert signature to hex
	senderSignature := "0x" + common.Bytes2Hex(signature)

	// Prepare the request body
	requestBody := map[string]interface{}{
		"to":             safeTransactionData.To,
		"value":          safeTransactionData.Value,
		"data":           "0x" + safeTransactionData.Data,
		"operation":      int(safeTransactionData.Operation),
		"safeTxGas":      fmt.Sprintf("%d", safeTransactionData.SafeTxGas),
		"baseGas":        fmt.Sprintf("%d", safeTransactionData.BaseGas),
		"gasPrice":       safeTransactionData.GasPrice,
		"gasToken":       safeTransactionData.GasToken,
		"refundReceiver": safeTransactionData.RefundReceiver,
		"nonce":          fmt.Sprintf("%d", safeTransactionData.Nonce),
		"safeTxHash":     safeTxHash.Hex(),
		"sender":         key.Address.Hex(),
		"signature":      senderSignature,
		"origin":         fmt.Sprintf("{\"url\":\"%s\",\"name\":\"TokenSender Deployment\"}", safeApi),
	}

	// Marshal the request body to JSON
	jsonBody, err := json.Marshal(requestBody)
	if err != nil {
		return fmt.Errorf("failed to marshal request body: %v", err)
	}

	// Send the request to the Safe Transaction Service
	req, err := http.NewRequest("POST", safeApi, bytes.NewBuffer(jsonBody))
	if err != nil {
		return fmt.Errorf("failed to create request: %v", err)
	}

	req.Header.Set("Content-Type", "application/json")

	httpClient := &http.Client{}
	resp, err := httpClient.Do(req)
	if err != nil {
		return fmt.Errorf("failed to send request: %v", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK && resp.StatusCode != http.StatusCreated {
		return fmt.Errorf("unexpected status code: %d", resp.StatusCode)
	}

	fmt.Println("Safe proposal created successfully")
	return nil
}

func CalculateSafeTxHash(safeAddress common.Address, txData SafeTransactionData, chainID *big.Int) (common.Hash, error) {
	domainSeparator := apitypes.TypedDataDomain{
		ChainId:           (*math.HexOrDecimal256)(chainID),
		VerifyingContract: safeAddress.Hex(),
	}

	typedData := apitypes.TypedData{
		Types: apitypes.Types{
			"EIP712Domain": []apitypes.Type{
				{Name: "chainId", Type: "uint256"},
				{Name: "verifyingContract", Type: "address"},
			},
			"SafeTx": []apitypes.Type{
				{Name: "to", Type: "address"},
				{Name: "value", Type: "uint256"},
				{Name: "data", Type: "bytes"},
				{Name: "operation", Type: "uint8"},
				{Name: "safeTxGas", Type: "uint256"},
				{Name: "baseGas", Type: "uint256"},
				{Name: "gasPrice", Type: "uint256"},
				{Name: "gasToken", Type: "address"},
				{Name: "refundReceiver", Type: "address"},
				{Name: "nonce", Type: "uint256"},
			},
		},
		Domain:      domainSeparator,
		PrimaryType: "SafeTx",
		Message: apitypes.TypedDataMessage{
			"to":             txData.To,
			"value":          txData.Value,
			"data":           "0x" + txData.Data,
			"operation":      fmt.Sprintf("%d", txData.Operation),
			"safeTxGas":      fmt.Sprintf("%d", txData.SafeTxGas),
			"baseGas":        fmt.Sprintf("%d", txData.BaseGas),
			"gasPrice":       txData.GasPrice,
			"gasToken":       txData.GasToken,
			"refundReceiver": txData.RefundReceiver,
			"nonce":          fmt.Sprintf("%d", txData.Nonce),
		},
	}

	typedDataHash, _, err := apitypes.TypedDataAndHash(typedData)
	if err != nil {
		return common.Hash{}, fmt.Errorf("failed to hash typed data: %v", err)
	}

	return common.BytesToHash(typedDataHash), nil
}
