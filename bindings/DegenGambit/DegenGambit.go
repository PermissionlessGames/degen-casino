// This file was generated by seer: https://github.com/moonstream-to/seer.
// seer version: 0.1.15
// seer command: seer evm generate --package DegenGambit --cli --foundry out/DegenGambit.sol/DegenGambit.json --struct DegenGambit --output bindings/DegenGambit/DegenGambit.go
// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package DegenGambit

import (
	"errors"
	"math/big"
	"strings"

	"context"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"

	// Reference imports to suppress errors if they are not otherwise used.
	"encoding/hex"
	"fmt"
	"os"
	"time"

	"github.com/ethereum/go-ethereum/accounts/keystore"
	"github.com/ethereum/go-ethereum/ethclient"
	"github.com/spf13/cobra"
	"golang.org/x/term"
)

var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// DegenGambitMetaData contains all meta data concerning the DegenGambit contract.
var DegenGambitMetaData = &bind.MetaData{
	ABI: "[{\"type\":\"constructor\",\"inputs\":[{\"name\":\"blocksToAct\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"costToSpin\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"costToRespin\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"receive\",\"stateMutability\":\"payable\"},{\"type\":\"function\",\"name\":\"BlocksToAct\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"CostToRespin\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"CostToSpin\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"ImprovedCenterReel\",\"inputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"ImprovedLeftReel\",\"inputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"ImprovedRightReel\",\"inputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"LastSpinBlock\",\"inputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"LastSpinBoosted\",\"inputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"UnmodifiedCenterReel\",\"inputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"UnmodifiedLeftReel\",\"inputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"UnmodifiedRightReel\",\"inputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"accept\",\"inputs\":[],\"outputs\":[{\"name\":\"left\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"center\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"right\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"remainingEntropy\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"allowance\",\"inputs\":[{\"name\":\"owner\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"spender\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"approve\",\"inputs\":[{\"name\":\"spender\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"balanceOf\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"decimals\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint8\",\"internalType\":\"uint8\"}],\"stateMutability\":\"pure\"},{\"type\":\"function\",\"name\":\"name\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string\",\"internalType\":\"string\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"outcome\",\"inputs\":[{\"name\":\"entropy\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"boosted\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"outputs\":[{\"name\":\"left\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"center\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"right\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"remainingEntropy\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"payout\",\"inputs\":[{\"name\":\"left\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"center\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"right\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"result\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"sampleImprovedCenterReel\",\"inputs\":[{\"name\":\"entropy\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"sampleImprovedLeftReel\",\"inputs\":[{\"name\":\"entropy\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"sampleImprovedRightReel\",\"inputs\":[{\"name\":\"entropy\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"sampleUnmodifiedCenterReel\",\"inputs\":[{\"name\":\"entropy\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"sampleUnmodifiedLeftReel\",\"inputs\":[{\"name\":\"entropy\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"sampleUnmodifiedRightReel\",\"inputs\":[{\"name\":\"entropy\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"spin\",\"inputs\":[{\"name\":\"boost\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"outputs\":[],\"stateMutability\":\"payable\"},{\"type\":\"function\",\"name\":\"spinCost\",\"inputs\":[{\"name\":\"degenerate\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"supportsInterface\",\"inputs\":[{\"name\":\"interfaceID\",\"type\":\"bytes4\",\"internalType\":\"bytes4\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"pure\"},{\"type\":\"function\",\"name\":\"symbol\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string\",\"internalType\":\"string\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"totalSupply\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"transfer\",\"inputs\":[{\"name\":\"to\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"transferFrom\",\"inputs\":[{\"name\":\"from\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"to\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"event\",\"name\":\"Approval\",\"inputs\":[{\"name\":\"owner\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"spender\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Award\",\"inputs\":[{\"name\":\"player\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Spin\",\"inputs\":[{\"name\":\"player\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"bonus\",\"type\":\"bool\",\"indexed\":true,\"internalType\":\"bool\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Transfer\",\"inputs\":[{\"name\":\"from\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"to\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"error\",\"name\":\"DeadlineExceeded\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"ERC20InsufficientAllowance\",\"inputs\":[{\"name\":\"spender\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"allowance\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"needed\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"type\":\"error\",\"name\":\"ERC20InsufficientBalance\",\"inputs\":[{\"name\":\"sender\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"balance\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"needed\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"type\":\"error\",\"name\":\"ERC20InvalidApprover\",\"inputs\":[{\"name\":\"approver\",\"type\":\"address\",\"internalType\":\"address\"}]},{\"type\":\"error\",\"name\":\"ERC20InvalidReceiver\",\"inputs\":[{\"name\":\"receiver\",\"type\":\"address\",\"internalType\":\"address\"}]},{\"type\":\"error\",\"name\":\"ERC20InvalidSender\",\"inputs\":[{\"name\":\"sender\",\"type\":\"address\",\"internalType\":\"address\"}]},{\"type\":\"error\",\"name\":\"ERC20InvalidSpender\",\"inputs\":[{\"name\":\"spender\",\"type\":\"address\",\"internalType\":\"address\"}]},{\"type\":\"error\",\"name\":\"InsufficientValue\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"OutcomeOutOfBounds\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"ReentrancyGuardReentrantCall\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"WaitForTick\",\"inputs\":[]}]",
	Bin: "0x6102e060405263017d05f860809081526307711dc860a052630a6b29b060c052630d65359860e0526313594d686101005263165359506101205263194d653861014052631f417d086101605263223b88f06101805263253594d86101a052632b29aca86101c052632e23b8906101e05263311dc47861020052633711dc4861022052633a0be83061024052633d05f41861026052633e82fa0c61028052633f417d066102a05263400000006102c0526100bc9060069060136105ca565b50604080516102608101825263017d05f8815263047711e06020820152630a6b29b091810191909152630d653598606082015263105f41806080820152631653595060a082015263194d653860c0820152631c47712060e082015263223b88f061010082015263253594d861012082015263282fa0c0610140820152632e23b89061016082015263311dc478610180820152633417d0606101a0820152633a0be8306101c0820152633d05f4186101e0820152633dc47712610200820152633f417d06610220820152634000000061024082015261019e9060199060136105ca565b50604080516102608101825263017d05f8815263047711e060208201526307711dc891810191909152630d653598606082015263105f418060808201526313594d6860a082015263194d653860c0820152631c47712060e0820152631f417d0861010082015263253594d861012082015263282fa0c0610140820152632b29aca861016082015263311dc478610180820152633417d0606101a0820152633711dc486101c0820152633d05f4186101e0820152633dc47712610200820152633e82fa0c610220820152634000000061024082015261028090602c9060136105ca565b50604080516102608101825262268cce815263063bfca56020820152630946b47891810191909152630c516c4b6060820152631266dc22608082015263157193f560a082015263187c4bc860c0820152631e91bb9f60e082015263219c73726101008201526324a72b45610120820152632abc9b1c610140820152632dc752ef6101608201526330d20ac26101808201526336e77a996101a08201526339f2326c6101c0820152633cfcea3f6101e0820152633e7e7520610200820152633f3f3a90610220820152634000000061024082015261036190603f9060136105ca565b50604080516102608101825262268cce815263033144a16020820152630946b47891810191909152630c516c4b6060820152630f5c241e608082015263157193f560a082015263187c4bc860c0820152631b87039b60e082015263219c73726101008201526324a72b456101208201526327b1e318610140820152632dc752ef6101608201526330d20ac26101808201526333dcc2956101a08201526339f2326c6101c0820152633cfcea3f6101e0820152633dbdafaf610200820152633f3f3a9061022082015263400000006102408201526104429060529060136105ca565b50604080516102608101825262268cce815263033144a1602082015263063bfc7491810191909152630c516c4b6060820152630f5c241e6080820152631266dbf160a082015263187c4bc860c0820152631b87039b60e0820152631e91bb6e6101008201526324a72b456101208201526327b1e318610140820152632abc9aeb6101608201526330d20ac26101808201526333dcc2956101a08201526336e77a686101c0820152633cfcea3f6101e0820152633dbdafaf610200820152633e7e751f61022082015263400000006102408201526105239060659060136105ca565b5034801561053057600080fd5b506040516121b03803806121b083398101604081905261054f91610625565b6040518060400160405280600e81526020016d111959d95b89dcc811d85b589a5d60921b8152506040518060400160405280600681526020016511d05350925560d21b81525081600390816105a491906106f4565b5060046105b182826106f4565b5050600160055550607892909255607b55607c556107b3565b8260138101928215610600579160200282015b82811115610600578251829063ffffffff169055916020019190600101906105dd565b5061060c929150610610565b5090565b5b8082111561060c5760008155600101610611565b60008060006060848603121561063a57600080fd5b8351925060208401519150604084015190509250925092565b634e487b7160e01b600052604160045260246000fd5b600181811c9082168061067d57607f821691505b60208210810361069d57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156106ef576000816000526020600020601f850160051c810160208610156106cc5750805b601f850160051c820191505b818110156106eb578281556001016106d8565b5050505b505050565b81516001600160401b0381111561070d5761070d610653565b6107218161071b8454610669565b846106a3565b602080601f831160018114610756576000841561073e5750858301515b600019600386901b1c1916600185901b1785556106eb565b600085815260208120601f198616915b8281101561078557888601518255948401946001909101908401610766565b50858210156107a35787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6119ee806107c26000396000f3fe6080604052600436106101e75760003560e01c806370a0823111610102578063bac1d23111610095578063dd62ed3e11610064578063dd62ed3e14610597578063dd6fc50f146105dd578063e4a2e5b31461060d578063fcb9f0031461062357600080fd5b8063bac1d23114610521578063bd0ebd4b14610541578063be59cce314610561578063d19476a01461057757600080fd5b8063a8b530e4116100d1578063a8b530e4146104ab578063a9059cbb146104cb578063ab6282c8146104eb578063b3dfa13d1461050157600080fd5b806370a082311461042057806382e8263414610456578063873c12271461047657806395d89b411461049657600080fd5b806323b872dd1161017a57806339fdf45f1161014957806339fdf45f1461039e5780636499572f146103be57806365d032ea146103d35780636f7855581461040057600080fd5b806323b872dd1461032d5780632852b71c1461034d5780632c932d0114610362578063313ce5671461038257600080fd5b8063095ea7b3116101b6578063095ea7b3146102b857806318160ddd146102d85780631b502962146102ed5780631e3dac951461030d57600080fd5b806301ffc9a7146101f357806302de1a7e1461022857806306fdde0314610256578063090ec5101461027857600080fd5b366101ee57005b600080fd5b3480156101ff57600080fd5b5061021361020e366004611762565b610643565b60405190151581526020015b60405180910390f35b34801561023457600080fd5b5061024861024336600461178c565b61067a565b60405190815260200161021f565b34801561026257600080fd5b5061026b6107e8565b60405161021f91906117a5565b34801561028457600080fd5b50610298610293366004611809565b61087a565b60408051948552602085019390935291830152606082015260800161021f565b3480156102c457600080fd5b506102136102d336600461184c565b6108de565b3480156102e457600080fd5b50600254610248565b3480156102f957600080fd5b5061024861030836600461178c565b6108f6565b34801561031957600080fd5b5061024861032836600461178c565b61090d565b34801561033957600080fd5b50610213610348366004611876565b61091d565b34801561035957600080fd5b50610298610943565b34801561036e57600080fd5b5061024861037d36600461178c565b610a62565b34801561038e57600080fd5b506040516000815260200161021f565b3480156103aa57600080fd5b506102486103b936600461178c565b610a72565b6103d16103cc3660046118b2565b610a82565b005b3480156103df57600080fd5b506102486103ee3660046118cd565b60796020526000908152604090205481565b34801561040c57600080fd5b5061024861041b3660046118cd565b610b13565b34801561042c57600080fd5b5061024861043b3660046118cd565b6001600160a01b031660009081526020819052604090205490565b34801561046257600080fd5b5061024861047136600461178c565b610b50565b34801561048257600080fd5b5061024861049136600461178c565b610cab565b3480156104a257600080fd5b5061026b610e06565b3480156104b757600080fd5b506102486104c636600461178c565b610e15565b3480156104d757600080fd5b506102136104e636600461184c565b610f6c565b3480156104f757600080fd5b50610248607b5481565b34801561050d57600080fd5b5061024861051c3660046118e8565b610f7a565b34801561052d57600080fd5b5061024861053c36600461178c565b6110b4565b34801561054d57600080fd5b5061024861055c36600461178c565b61120f565b34801561056d57600080fd5b5061024860785481565b34801561058357600080fd5b5061024861059236600461178c565b61121f565b3480156105a357600080fd5b506102486105b2366004611914565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b3480156105e957600080fd5b506102136105f83660046118cd565b607a6020526000908152604090205460ff1681565b34801561061957600080fd5b50610248607c5481565b34801561062f57600080fd5b5061024861063e36600461178c565b61122f565b60006301ffc9a760e01b6001600160e01b03198316148061067457506336372b0760e01b6001600160e01b03198316145b92915050565b6000633fffffff8216602c8201548110156106985750600092915050565b602d548110156106ab5750600192915050565b602e548110156106be5750600292915050565b602f548110156106d15750600392915050565b6030548110156106e45750600492915050565b6031548110156106f75750600592915050565b60325481101561070a5750600692915050565b60335481101561071d5750600792915050565b6034548110156107305750600892915050565b6035548110156107435750600992915050565b6036548110156107565750600a92915050565b6037548110156107695750600b92915050565b60385481101561077c5750600c92915050565b60395481101561078f5750600d92915050565b603a548110156107a25750600e92915050565b603b548110156107b55750600f92915050565b603c548110156107c85750601092915050565b602c60115b01548110156107df5750601192915050565b50601292915050565b6060600380546107f79061193e565b80601f01602080910402602001604051908101604052809291908181526020018280546108239061193e565b80156108705780601f1061084557610100808354040283529160200191610870565b820191906000526020600020905b81548152906001019060200180831161085357829003601f168201915b5050505050905090565b60008060008084156108ac5761088f866110b4565b935061089a86610b50565b92506108a586610e15565b91506108ce565b6108b58661122f565b93506108c086610cab565b92506108cb8661067a565b91505b605a86901c905092959194509250565b6000336108ec81858561138a565b5060019392505050565b603f816013811061090657600080fd5b0154905081565b6052816013811061090657600080fd5b60003361092b85828561139c565b61093685858561141f565b60019150505b9392505050565b60008060008061095161147e565b61095a336114a8565b610963336114e3565b33600081815260796020908152604080832054815190408184015280820185905281518082038301815260609091018252805190830120938352607a9091529020546109b2919060ff1661087a565b9296509094509250905060006109c9858585610f7a565b604051909150339082156108fc029083906000818181858888f193505050501580156109f9573d6000803e3d6000fd5b5060405181815233907f473edf73b107bf5d270ea55a7ea4ce98a1b5618dd196e00d5a48e101299b26d49060200160405180910390a250336000908152607a60209081526040808320805460ff191690556079909152812055610a5c6001600555565b90919293565b6006816013811061090657600080fd5b602c816013811061090657600080fd5b6000610a8d33610b13565b905080341015610ab05760405163044044a560e21b815260040160405180910390fd5b8115610ac157610ac1336001611529565b336000818152607960209081526040808320439055607a909152808220805460ff191690555184151592917fc028bd493df31fdde3d19c91126b5780fc658410d5fe9b0234e3c65675e0d95791a35050565b6078546001600160a01b0382166000908152607960205260408120549091610b3a9161198e565b4311610b48575050607c5490565b5050607b5490565b6000601e82901c633fffffff166052820154811015610b725750600092915050565b605354811015610b855750600192915050565b605454811015610b985750600292915050565b605554811015610bab5750600392915050565b605654811015610bbe5750600492915050565b605754811015610bd15750600592915050565b605854811015610be45750600692915050565b605954811015610bf75750600792915050565b605a54811015610c0a5750600892915050565b605b54811015610c1d5750600992915050565b605c54811015610c305750600a92915050565b605d54811015610c435750600b92915050565b605e54811015610c565750600c92915050565b605f54811015610c695750600d92915050565b606054811015610c7c5750600e92915050565b606154811015610c8f5750600f92915050565b606254811015610ca25750601092915050565b605260116107cd565b6000601e82901c633fffffff166019820154811015610ccd5750600092915050565b601a54811015610ce05750600192915050565b601b54811015610cf35750600292915050565b601c54811015610d065750600392915050565b601d54811015610d195750600492915050565b601e54811015610d2c5750600592915050565b601f54811015610d3f5750600692915050565b602054811015610d525750600792915050565b602154811015610d655750600892915050565b602254811015610d785750600992915050565b602354811015610d8b5750600a92915050565b602454811015610d9e5750600b92915050565b602554811015610db15750600c92915050565b602654811015610dc45750600d92915050565b602754811015610dd75750600e92915050565b602854811015610dea5750600f92915050565b602954811015610dfd5750601092915050565b601960116107cd565b6060600480546107f79061193e565b6000633fffffff82166065820154811015610e335750600092915050565b606654811015610e465750600192915050565b606754811015610e595750600292915050565b606854811015610e6c5750600392915050565b606954811015610e7f5750600492915050565b606a54811015610e925750600592915050565b606b54811015610ea55750600692915050565b606c54811015610eb85750600792915050565b606d54811015610ecb5750600892915050565b606e54811015610ede5750600992915050565b606f54811015610ef15750600a92915050565b607054811015610f045750600b92915050565b607154811015610f175750600c92915050565b607254811015610f2a5750600d92915050565b607354811015610f3d5750600e92915050565b607454811015610f505750600f92915050565b607554811015610f635750601092915050565b606560116107cd565b6000336108ec81858561141f565b6000601384101580610f8d575060138310155b80610f99575060138210155b15610fb75760405163e1185f0160e01b815260040160405180910390fd5b5060008383148015610fc857508183145b1561101c5760018410158015610fdf5750600f8411155b1561100a57607b54610ff29060326119a1565b90504760061c81111561100557504760061c5b61093c565b6010841061100557504760011c61093c565b81840361106c57600184101580156110355750600f8411155b8015611042575060108310155b1561100557607b546110559060646119a1565b90504760041c81111561100557504760041c61093c565b6010841015801561107e575060108210155b801561108b575060108310155b80156110975750828414155b80156110a35750828214155b1561093c57504760031c9392505050565b6000603c82901c633fffffff16603f8201548110156110d65750600092915050565b6040548110156110e95750600192915050565b6041548110156110fc5750600292915050565b60425481101561110f5750600392915050565b6043548110156111225750600492915050565b6044548110156111355750600592915050565b6045548110156111485750600692915050565b60465481101561115b5750600792915050565b60475481101561116e5750600892915050565b6048548110156111815750600992915050565b6049548110156111945750600a92915050565b604a548110156111a75750600b92915050565b604b548110156111ba5750600c92915050565b604c548110156111cd5750600d92915050565b604d548110156111e05750600e92915050565b604e548110156111f35750600f92915050565b604f548110156112065750601092915050565b603f60116107cd565b6019816013811061090657600080fd5b6065816013811061090657600080fd5b6000603c82901c633fffffff1660068201548110156112515750600092915050565b6007548110156112645750600192915050565b6008548110156112775750600292915050565b60095481101561128a5750600392915050565b600a5481101561129d5750600492915050565b600b548110156112b05750600592915050565b600c548110156112c35750600692915050565b600d548110156112d65750600792915050565b600e548110156112e95750600892915050565b600f548110156112fc5750600992915050565b60105481101561130f5750600a92915050565b6011548110156113225750600b92915050565b6012548110156113355750600c92915050565b6013548110156113485750600d92915050565b60145481101561135b5750600e92915050565b60155481101561136e5750600f92915050565b6016548110156113815750601092915050565b600660116107cd565b6113978383836001611563565b505050565b6001600160a01b038381166000908152600160209081526040808320938616835292905220546000198114611419578181101561140a57604051637dc7a0d960e11b81526001600160a01b038416600482015260248101829052604481018390526064015b60405180910390fd5b61141984848484036000611563565b50505050565b6001600160a01b03831661144957604051634b637e8f60e11b815260006004820152602401611401565b6001600160a01b0382166114735760405163ec442f0560e01b815260006004820152602401611401565b611397838383611638565b6002600554036114a157604051633ee5aeb560e01b815260040160405180910390fd5b6002600555565b6001600160a01b03811660009081526079602052604090205443116114e05760405163bfc2936d60e01b815260040160405180910390fd5b50565b6078546001600160a01b038216600090815260796020526040902054611509919061198e565b4311156114e05760405163559895a360e01b815260040160405180910390fd5b6001600160a01b03821661155357604051634b637e8f60e11b815260006004820152602401611401565b61155f82600083611638565b5050565b6001600160a01b03841661158d5760405163e602df0560e01b815260006004820152602401611401565b6001600160a01b0383166115b757604051634a1406b160e11b815260006004820152602401611401565b6001600160a01b038085166000908152600160209081526040808320938716835292905220829055801561141957826001600160a01b0316846001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258460405161162a91815260200190565b60405180910390a350505050565b6001600160a01b038316611663578060026000828254611658919061198e565b909155506116d59050565b6001600160a01b038316600090815260208190526040902054818110156116b65760405163391434e360e21b81526001600160a01b03851660048201526024810182905260448101839052606401611401565b6001600160a01b03841660009081526020819052604090209082900390555b6001600160a01b0382166116f157600280548290039055611710565b6001600160a01b03821660009081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161175591815260200190565b60405180910390a3505050565b60006020828403121561177457600080fd5b81356001600160e01b03198116811461093c57600080fd5b60006020828403121561179e57600080fd5b5035919050565b60006020808352835180602085015260005b818110156117d3578581018301518582016040015282016117b7565b506000604082860101526040601f19601f8301168501019250505092915050565b8035801515811461180457600080fd5b919050565b6000806040838503121561181c57600080fd5b8235915061182c602084016117f4565b90509250929050565b80356001600160a01b038116811461180457600080fd5b6000806040838503121561185f57600080fd5b61186883611835565b946020939093013593505050565b60008060006060848603121561188b57600080fd5b61189484611835565b92506118a260208501611835565b9150604084013590509250925092565b6000602082840312156118c457600080fd5b61093c826117f4565b6000602082840312156118df57600080fd5b61093c82611835565b6000806000606084860312156118fd57600080fd5b505081359360208301359350604090920135919050565b6000806040838503121561192757600080fd5b61193083611835565b915061182c60208401611835565b600181811c9082168061195257607f821691505b60208210810361197257634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561067457610674611978565b80820281158282048414176106745761067461197856fea2646970667358221220a8eefb0c3fa45d4caed72bb93d596febffa8a3fbd11dfa760409c344b4b9d6c664736f6c63430008190033",
}

// DegenGambitABI is the input ABI used to generate the binding from.
// Deprecated: Use DegenGambitMetaData.ABI instead.
var DegenGambitABI = DegenGambitMetaData.ABI

// DegenGambitBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use DegenGambitMetaData.Bin instead.
var DegenGambitBin = DegenGambitMetaData.Bin

// DeployDegenGambit deploys a new Ethereum contract, binding an instance of DegenGambit to it.
func DeployDegenGambit(auth *bind.TransactOpts, backend bind.ContractBackend, blocksToAct *big.Int, costToSpin *big.Int, costToRespin *big.Int) (common.Address, *types.Transaction, *DegenGambit, error) {
	parsed, err := DegenGambitMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(DegenGambitBin), backend, blocksToAct, costToSpin, costToRespin)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &DegenGambit{DegenGambitCaller: DegenGambitCaller{contract: contract}, DegenGambitTransactor: DegenGambitTransactor{contract: contract}, DegenGambitFilterer: DegenGambitFilterer{contract: contract}}, nil
}

// DegenGambit is an auto generated Go binding around an Ethereum contract.
type DegenGambit struct {
	DegenGambitCaller     // Read-only binding to the contract
	DegenGambitTransactor // Write-only binding to the contract
	DegenGambitFilterer   // Log filterer for contract events
}

// DegenGambitCaller is an auto generated read-only Go binding around an Ethereum contract.
type DegenGambitCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DegenGambitTransactor is an auto generated write-only Go binding around an Ethereum contract.
type DegenGambitTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DegenGambitFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type DegenGambitFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DegenGambitSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type DegenGambitSession struct {
	Contract     *DegenGambit      // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// DegenGambitCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type DegenGambitCallerSession struct {
	Contract *DegenGambitCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts      // Call options to use throughout this session
}

// DegenGambitTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type DegenGambitTransactorSession struct {
	Contract     *DegenGambitTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// DegenGambitRaw is an auto generated low-level Go binding around an Ethereum contract.
type DegenGambitRaw struct {
	Contract *DegenGambit // Generic contract binding to access the raw methods on
}

// DegenGambitCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type DegenGambitCallerRaw struct {
	Contract *DegenGambitCaller // Generic read-only contract binding to access the raw methods on
}

// DegenGambitTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type DegenGambitTransactorRaw struct {
	Contract *DegenGambitTransactor // Generic write-only contract binding to access the raw methods on
}

// NewDegenGambit creates a new instance of DegenGambit, bound to a specific deployed contract.
func NewDegenGambit(address common.Address, backend bind.ContractBackend) (*DegenGambit, error) {
	contract, err := bindDegenGambit(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &DegenGambit{DegenGambitCaller: DegenGambitCaller{contract: contract}, DegenGambitTransactor: DegenGambitTransactor{contract: contract}, DegenGambitFilterer: DegenGambitFilterer{contract: contract}}, nil
}

// NewDegenGambitCaller creates a new read-only instance of DegenGambit, bound to a specific deployed contract.
func NewDegenGambitCaller(address common.Address, caller bind.ContractCaller) (*DegenGambitCaller, error) {
	contract, err := bindDegenGambit(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &DegenGambitCaller{contract: contract}, nil
}

// NewDegenGambitTransactor creates a new write-only instance of DegenGambit, bound to a specific deployed contract.
func NewDegenGambitTransactor(address common.Address, transactor bind.ContractTransactor) (*DegenGambitTransactor, error) {
	contract, err := bindDegenGambit(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &DegenGambitTransactor{contract: contract}, nil
}

// NewDegenGambitFilterer creates a new log filterer instance of DegenGambit, bound to a specific deployed contract.
func NewDegenGambitFilterer(address common.Address, filterer bind.ContractFilterer) (*DegenGambitFilterer, error) {
	contract, err := bindDegenGambit(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &DegenGambitFilterer{contract: contract}, nil
}

// bindDegenGambit binds a generic wrapper to an already deployed contract.
func bindDegenGambit(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := DegenGambitMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_DegenGambit *DegenGambitRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _DegenGambit.Contract.DegenGambitCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_DegenGambit *DegenGambitRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DegenGambit.Contract.DegenGambitTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_DegenGambit *DegenGambitRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _DegenGambit.Contract.DegenGambitTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_DegenGambit *DegenGambitCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _DegenGambit.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_DegenGambit *DegenGambitTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DegenGambit.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_DegenGambit *DegenGambitTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _DegenGambit.Contract.contract.Transact(opts, method, params...)
}

// BlocksToAct is a free data retrieval call binding the contract method 0xbe59cce3.
//
// Solidity: function BlocksToAct() view returns(uint256)
func (_DegenGambit *DegenGambitCaller) BlocksToAct(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _DegenGambit.contract.Call(opts, &out, "BlocksToAct")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BlocksToAct is a free data retrieval call binding the contract method 0xbe59cce3.
//
// Solidity: function BlocksToAct() view returns(uint256)
func (_DegenGambit *DegenGambitSession) BlocksToAct() (*big.Int, error) {
	return _DegenGambit.Contract.BlocksToAct(&_DegenGambit.CallOpts)
}

// BlocksToAct is a free data retrieval call binding the contract method 0xbe59cce3.
//
// Solidity: function BlocksToAct() view returns(uint256)
func (_DegenGambit *DegenGambitCallerSession) BlocksToAct() (*big.Int, error) {
	return _DegenGambit.Contract.BlocksToAct(&_DegenGambit.CallOpts)
}

// CostToRespin is a free data retrieval call binding the contract method 0xe4a2e5b3.
//
// Solidity: function CostToRespin() view returns(uint256)
func (_DegenGambit *DegenGambitCaller) CostToRespin(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _DegenGambit.contract.Call(opts, &out, "CostToRespin")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CostToRespin is a free data retrieval call binding the contract method 0xe4a2e5b3.
//
// Solidity: function CostToRespin() view returns(uint256)
func (_DegenGambit *DegenGambitSession) CostToRespin() (*big.Int, error) {
	return _DegenGambit.Contract.CostToRespin(&_DegenGambit.CallOpts)
}

// CostToRespin is a free data retrieval call binding the contract method 0xe4a2e5b3.
//
// Solidity: function CostToRespin() view returns(uint256)
func (_DegenGambit *DegenGambitCallerSession) CostToRespin() (*big.Int, error) {
	return _DegenGambit.Contract.CostToRespin(&_DegenGambit.CallOpts)
}

// CostToSpin is a free data retrieval call binding the contract method 0xab6282c8.
//
// Solidity: function CostToSpin() view returns(uint256)
func (_DegenGambit *DegenGambitCaller) CostToSpin(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _DegenGambit.contract.Call(opts, &out, "CostToSpin")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CostToSpin is a free data retrieval call binding the contract method 0xab6282c8.
//
// Solidity: function CostToSpin() view returns(uint256)
func (_DegenGambit *DegenGambitSession) CostToSpin() (*big.Int, error) {
	return _DegenGambit.Contract.CostToSpin(&_DegenGambit.CallOpts)
}

// CostToSpin is a free data retrieval call binding the contract method 0xab6282c8.
//
// Solidity: function CostToSpin() view returns(uint256)
func (_DegenGambit *DegenGambitCallerSession) CostToSpin() (*big.Int, error) {
	return _DegenGambit.Contract.CostToSpin(&_DegenGambit.CallOpts)
}

// ImprovedCenterReel is a free data retrieval call binding the contract method 0x1e3dac95.
//
// Solidity: function ImprovedCenterReel(uint256 ) view returns(uint256)
func (_DegenGambit *DegenGambitCaller) ImprovedCenterReel(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _DegenGambit.contract.Call(opts, &out, "ImprovedCenterReel", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ImprovedCenterReel is a free data retrieval call binding the contract method 0x1e3dac95.
//
// Solidity: function ImprovedCenterReel(uint256 ) view returns(uint256)
func (_DegenGambit *DegenGambitSession) ImprovedCenterReel(arg0 *big.Int) (*big.Int, error) {
	return _DegenGambit.Contract.ImprovedCenterReel(&_DegenGambit.CallOpts, arg0)
}

// ImprovedCenterReel is a free data retrieval call binding the contract method 0x1e3dac95.
//
// Solidity: function ImprovedCenterReel(uint256 ) view returns(uint256)
func (_DegenGambit *DegenGambitCallerSession) ImprovedCenterReel(arg0 *big.Int) (*big.Int, error) {
	return _DegenGambit.Contract.ImprovedCenterReel(&_DegenGambit.CallOpts, arg0)
}

// ImprovedLeftReel is a free data retrieval call binding the contract method 0x1b502962.
//
// Solidity: function ImprovedLeftReel(uint256 ) view returns(uint256)
func (_DegenGambit *DegenGambitCaller) ImprovedLeftReel(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _DegenGambit.contract.Call(opts, &out, "ImprovedLeftReel", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ImprovedLeftReel is a free data retrieval call binding the contract method 0x1b502962.
//
// Solidity: function ImprovedLeftReel(uint256 ) view returns(uint256)
func (_DegenGambit *DegenGambitSession) ImprovedLeftReel(arg0 *big.Int) (*big.Int, error) {
	return _DegenGambit.Contract.ImprovedLeftReel(&_DegenGambit.CallOpts, arg0)
}

// ImprovedLeftReel is a free data retrieval call binding the contract method 0x1b502962.
//
// Solidity: function ImprovedLeftReel(uint256 ) view returns(uint256)
func (_DegenGambit *DegenGambitCallerSession) ImprovedLeftReel(arg0 *big.Int) (*big.Int, error) {
	return _DegenGambit.Contract.ImprovedLeftReel(&_DegenGambit.CallOpts, arg0)
}

// ImprovedRightReel is a free data retrieval call binding the contract method 0xd19476a0.
//
// Solidity: function ImprovedRightReel(uint256 ) view returns(uint256)
func (_DegenGambit *DegenGambitCaller) ImprovedRightReel(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _DegenGambit.contract.Call(opts, &out, "ImprovedRightReel", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ImprovedRightReel is a free data retrieval call binding the contract method 0xd19476a0.
//
// Solidity: function ImprovedRightReel(uint256 ) view returns(uint256)
func (_DegenGambit *DegenGambitSession) ImprovedRightReel(arg0 *big.Int) (*big.Int, error) {
	return _DegenGambit.Contract.ImprovedRightReel(&_DegenGambit.CallOpts, arg0)
}

// ImprovedRightReel is a free data retrieval call binding the contract method 0xd19476a0.
//
// Solidity: function ImprovedRightReel(uint256 ) view returns(uint256)
func (_DegenGambit *DegenGambitCallerSession) ImprovedRightReel(arg0 *big.Int) (*big.Int, error) {
	return _DegenGambit.Contract.ImprovedRightReel(&_DegenGambit.CallOpts, arg0)
}

// LastSpinBlock is a free data retrieval call binding the contract method 0x65d032ea.
//
// Solidity: function LastSpinBlock(address ) view returns(uint256)
func (_DegenGambit *DegenGambitCaller) LastSpinBlock(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _DegenGambit.contract.Call(opts, &out, "LastSpinBlock", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// LastSpinBlock is a free data retrieval call binding the contract method 0x65d032ea.
//
// Solidity: function LastSpinBlock(address ) view returns(uint256)
func (_DegenGambit *DegenGambitSession) LastSpinBlock(arg0 common.Address) (*big.Int, error) {
	return _DegenGambit.Contract.LastSpinBlock(&_DegenGambit.CallOpts, arg0)
}

// LastSpinBlock is a free data retrieval call binding the contract method 0x65d032ea.
//
// Solidity: function LastSpinBlock(address ) view returns(uint256)
func (_DegenGambit *DegenGambitCallerSession) LastSpinBlock(arg0 common.Address) (*big.Int, error) {
	return _DegenGambit.Contract.LastSpinBlock(&_DegenGambit.CallOpts, arg0)
}

// LastSpinBoosted is a free data retrieval call binding the contract method 0xdd6fc50f.
//
// Solidity: function LastSpinBoosted(address ) view returns(bool)
func (_DegenGambit *DegenGambitCaller) LastSpinBoosted(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _DegenGambit.contract.Call(opts, &out, "LastSpinBoosted", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// LastSpinBoosted is a free data retrieval call binding the contract method 0xdd6fc50f.
//
// Solidity: function LastSpinBoosted(address ) view returns(bool)
func (_DegenGambit *DegenGambitSession) LastSpinBoosted(arg0 common.Address) (bool, error) {
	return _DegenGambit.Contract.LastSpinBoosted(&_DegenGambit.CallOpts, arg0)
}

// LastSpinBoosted is a free data retrieval call binding the contract method 0xdd6fc50f.
//
// Solidity: function LastSpinBoosted(address ) view returns(bool)
func (_DegenGambit *DegenGambitCallerSession) LastSpinBoosted(arg0 common.Address) (bool, error) {
	return _DegenGambit.Contract.LastSpinBoosted(&_DegenGambit.CallOpts, arg0)
}

// UnmodifiedCenterReel is a free data retrieval call binding the contract method 0xbd0ebd4b.
//
// Solidity: function UnmodifiedCenterReel(uint256 ) view returns(uint256)
func (_DegenGambit *DegenGambitCaller) UnmodifiedCenterReel(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _DegenGambit.contract.Call(opts, &out, "UnmodifiedCenterReel", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// UnmodifiedCenterReel is a free data retrieval call binding the contract method 0xbd0ebd4b.
//
// Solidity: function UnmodifiedCenterReel(uint256 ) view returns(uint256)
func (_DegenGambit *DegenGambitSession) UnmodifiedCenterReel(arg0 *big.Int) (*big.Int, error) {
	return _DegenGambit.Contract.UnmodifiedCenterReel(&_DegenGambit.CallOpts, arg0)
}

// UnmodifiedCenterReel is a free data retrieval call binding the contract method 0xbd0ebd4b.
//
// Solidity: function UnmodifiedCenterReel(uint256 ) view returns(uint256)
func (_DegenGambit *DegenGambitCallerSession) UnmodifiedCenterReel(arg0 *big.Int) (*big.Int, error) {
	return _DegenGambit.Contract.UnmodifiedCenterReel(&_DegenGambit.CallOpts, arg0)
}

// UnmodifiedLeftReel is a free data retrieval call binding the contract method 0x2c932d01.
//
// Solidity: function UnmodifiedLeftReel(uint256 ) view returns(uint256)
func (_DegenGambit *DegenGambitCaller) UnmodifiedLeftReel(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _DegenGambit.contract.Call(opts, &out, "UnmodifiedLeftReel", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// UnmodifiedLeftReel is a free data retrieval call binding the contract method 0x2c932d01.
//
// Solidity: function UnmodifiedLeftReel(uint256 ) view returns(uint256)
func (_DegenGambit *DegenGambitSession) UnmodifiedLeftReel(arg0 *big.Int) (*big.Int, error) {
	return _DegenGambit.Contract.UnmodifiedLeftReel(&_DegenGambit.CallOpts, arg0)
}

// UnmodifiedLeftReel is a free data retrieval call binding the contract method 0x2c932d01.
//
// Solidity: function UnmodifiedLeftReel(uint256 ) view returns(uint256)
func (_DegenGambit *DegenGambitCallerSession) UnmodifiedLeftReel(arg0 *big.Int) (*big.Int, error) {
	return _DegenGambit.Contract.UnmodifiedLeftReel(&_DegenGambit.CallOpts, arg0)
}

// UnmodifiedRightReel is a free data retrieval call binding the contract method 0x39fdf45f.
//
// Solidity: function UnmodifiedRightReel(uint256 ) view returns(uint256)
func (_DegenGambit *DegenGambitCaller) UnmodifiedRightReel(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _DegenGambit.contract.Call(opts, &out, "UnmodifiedRightReel", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// UnmodifiedRightReel is a free data retrieval call binding the contract method 0x39fdf45f.
//
// Solidity: function UnmodifiedRightReel(uint256 ) view returns(uint256)
func (_DegenGambit *DegenGambitSession) UnmodifiedRightReel(arg0 *big.Int) (*big.Int, error) {
	return _DegenGambit.Contract.UnmodifiedRightReel(&_DegenGambit.CallOpts, arg0)
}

// UnmodifiedRightReel is a free data retrieval call binding the contract method 0x39fdf45f.
//
// Solidity: function UnmodifiedRightReel(uint256 ) view returns(uint256)
func (_DegenGambit *DegenGambitCallerSession) UnmodifiedRightReel(arg0 *big.Int) (*big.Int, error) {
	return _DegenGambit.Contract.UnmodifiedRightReel(&_DegenGambit.CallOpts, arg0)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_DegenGambit *DegenGambitCaller) Allowance(opts *bind.CallOpts, owner common.Address, spender common.Address) (*big.Int, error) {
	var out []interface{}
	err := _DegenGambit.contract.Call(opts, &out, "allowance", owner, spender)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_DegenGambit *DegenGambitSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _DegenGambit.Contract.Allowance(&_DegenGambit.CallOpts, owner, spender)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_DegenGambit *DegenGambitCallerSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _DegenGambit.Contract.Allowance(&_DegenGambit.CallOpts, owner, spender)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_DegenGambit *DegenGambitCaller) BalanceOf(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _DegenGambit.contract.Call(opts, &out, "balanceOf", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_DegenGambit *DegenGambitSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _DegenGambit.Contract.BalanceOf(&_DegenGambit.CallOpts, account)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_DegenGambit *DegenGambitCallerSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _DegenGambit.Contract.BalanceOf(&_DegenGambit.CallOpts, account)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() pure returns(uint8)
func (_DegenGambit *DegenGambitCaller) Decimals(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _DegenGambit.contract.Call(opts, &out, "decimals")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() pure returns(uint8)
func (_DegenGambit *DegenGambitSession) Decimals() (uint8, error) {
	return _DegenGambit.Contract.Decimals(&_DegenGambit.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() pure returns(uint8)
func (_DegenGambit *DegenGambitCallerSession) Decimals() (uint8, error) {
	return _DegenGambit.Contract.Decimals(&_DegenGambit.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_DegenGambit *DegenGambitCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _DegenGambit.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_DegenGambit *DegenGambitSession) Name() (string, error) {
	return _DegenGambit.Contract.Name(&_DegenGambit.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_DegenGambit *DegenGambitCallerSession) Name() (string, error) {
	return _DegenGambit.Contract.Name(&_DegenGambit.CallOpts)
}

// Outcome is a free data retrieval call binding the contract method 0x090ec510.
//
// Solidity: function outcome(uint256 entropy, bool boosted) view returns(uint256 left, uint256 center, uint256 right, uint256 remainingEntropy)
func (_DegenGambit *DegenGambitCaller) Outcome(opts *bind.CallOpts, entropy *big.Int, boosted bool) (struct {
	Left             *big.Int
	Center           *big.Int
	Right            *big.Int
	RemainingEntropy *big.Int
}, error) {
	var out []interface{}
	err := _DegenGambit.contract.Call(opts, &out, "outcome", entropy, boosted)

	outstruct := new(struct {
		Left             *big.Int
		Center           *big.Int
		Right            *big.Int
		RemainingEntropy *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Left = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Center = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.Right = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.RemainingEntropy = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// Outcome is a free data retrieval call binding the contract method 0x090ec510.
//
// Solidity: function outcome(uint256 entropy, bool boosted) view returns(uint256 left, uint256 center, uint256 right, uint256 remainingEntropy)
func (_DegenGambit *DegenGambitSession) Outcome(entropy *big.Int, boosted bool) (struct {
	Left             *big.Int
	Center           *big.Int
	Right            *big.Int
	RemainingEntropy *big.Int
}, error) {
	return _DegenGambit.Contract.Outcome(&_DegenGambit.CallOpts, entropy, boosted)
}

// Outcome is a free data retrieval call binding the contract method 0x090ec510.
//
// Solidity: function outcome(uint256 entropy, bool boosted) view returns(uint256 left, uint256 center, uint256 right, uint256 remainingEntropy)
func (_DegenGambit *DegenGambitCallerSession) Outcome(entropy *big.Int, boosted bool) (struct {
	Left             *big.Int
	Center           *big.Int
	Right            *big.Int
	RemainingEntropy *big.Int
}, error) {
	return _DegenGambit.Contract.Outcome(&_DegenGambit.CallOpts, entropy, boosted)
}

// Payout is a free data retrieval call binding the contract method 0xb3dfa13d.
//
// Solidity: function payout(uint256 left, uint256 center, uint256 right) view returns(uint256 result)
func (_DegenGambit *DegenGambitCaller) Payout(opts *bind.CallOpts, left *big.Int, center *big.Int, right *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _DegenGambit.contract.Call(opts, &out, "payout", left, center, right)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Payout is a free data retrieval call binding the contract method 0xb3dfa13d.
//
// Solidity: function payout(uint256 left, uint256 center, uint256 right) view returns(uint256 result)
func (_DegenGambit *DegenGambitSession) Payout(left *big.Int, center *big.Int, right *big.Int) (*big.Int, error) {
	return _DegenGambit.Contract.Payout(&_DegenGambit.CallOpts, left, center, right)
}

// Payout is a free data retrieval call binding the contract method 0xb3dfa13d.
//
// Solidity: function payout(uint256 left, uint256 center, uint256 right) view returns(uint256 result)
func (_DegenGambit *DegenGambitCallerSession) Payout(left *big.Int, center *big.Int, right *big.Int) (*big.Int, error) {
	return _DegenGambit.Contract.Payout(&_DegenGambit.CallOpts, left, center, right)
}

// SampleImprovedCenterReel is a free data retrieval call binding the contract method 0x82e82634.
//
// Solidity: function sampleImprovedCenterReel(uint256 entropy) view returns(uint256)
func (_DegenGambit *DegenGambitCaller) SampleImprovedCenterReel(opts *bind.CallOpts, entropy *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _DegenGambit.contract.Call(opts, &out, "sampleImprovedCenterReel", entropy)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// SampleImprovedCenterReel is a free data retrieval call binding the contract method 0x82e82634.
//
// Solidity: function sampleImprovedCenterReel(uint256 entropy) view returns(uint256)
func (_DegenGambit *DegenGambitSession) SampleImprovedCenterReel(entropy *big.Int) (*big.Int, error) {
	return _DegenGambit.Contract.SampleImprovedCenterReel(&_DegenGambit.CallOpts, entropy)
}

// SampleImprovedCenterReel is a free data retrieval call binding the contract method 0x82e82634.
//
// Solidity: function sampleImprovedCenterReel(uint256 entropy) view returns(uint256)
func (_DegenGambit *DegenGambitCallerSession) SampleImprovedCenterReel(entropy *big.Int) (*big.Int, error) {
	return _DegenGambit.Contract.SampleImprovedCenterReel(&_DegenGambit.CallOpts, entropy)
}

// SampleImprovedLeftReel is a free data retrieval call binding the contract method 0xbac1d231.
//
// Solidity: function sampleImprovedLeftReel(uint256 entropy) view returns(uint256)
func (_DegenGambit *DegenGambitCaller) SampleImprovedLeftReel(opts *bind.CallOpts, entropy *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _DegenGambit.contract.Call(opts, &out, "sampleImprovedLeftReel", entropy)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// SampleImprovedLeftReel is a free data retrieval call binding the contract method 0xbac1d231.
//
// Solidity: function sampleImprovedLeftReel(uint256 entropy) view returns(uint256)
func (_DegenGambit *DegenGambitSession) SampleImprovedLeftReel(entropy *big.Int) (*big.Int, error) {
	return _DegenGambit.Contract.SampleImprovedLeftReel(&_DegenGambit.CallOpts, entropy)
}

// SampleImprovedLeftReel is a free data retrieval call binding the contract method 0xbac1d231.
//
// Solidity: function sampleImprovedLeftReel(uint256 entropy) view returns(uint256)
func (_DegenGambit *DegenGambitCallerSession) SampleImprovedLeftReel(entropy *big.Int) (*big.Int, error) {
	return _DegenGambit.Contract.SampleImprovedLeftReel(&_DegenGambit.CallOpts, entropy)
}

// SampleImprovedRightReel is a free data retrieval call binding the contract method 0xa8b530e4.
//
// Solidity: function sampleImprovedRightReel(uint256 entropy) view returns(uint256)
func (_DegenGambit *DegenGambitCaller) SampleImprovedRightReel(opts *bind.CallOpts, entropy *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _DegenGambit.contract.Call(opts, &out, "sampleImprovedRightReel", entropy)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// SampleImprovedRightReel is a free data retrieval call binding the contract method 0xa8b530e4.
//
// Solidity: function sampleImprovedRightReel(uint256 entropy) view returns(uint256)
func (_DegenGambit *DegenGambitSession) SampleImprovedRightReel(entropy *big.Int) (*big.Int, error) {
	return _DegenGambit.Contract.SampleImprovedRightReel(&_DegenGambit.CallOpts, entropy)
}

// SampleImprovedRightReel is a free data retrieval call binding the contract method 0xa8b530e4.
//
// Solidity: function sampleImprovedRightReel(uint256 entropy) view returns(uint256)
func (_DegenGambit *DegenGambitCallerSession) SampleImprovedRightReel(entropy *big.Int) (*big.Int, error) {
	return _DegenGambit.Contract.SampleImprovedRightReel(&_DegenGambit.CallOpts, entropy)
}

// SampleUnmodifiedCenterReel is a free data retrieval call binding the contract method 0x873c1227.
//
// Solidity: function sampleUnmodifiedCenterReel(uint256 entropy) view returns(uint256)
func (_DegenGambit *DegenGambitCaller) SampleUnmodifiedCenterReel(opts *bind.CallOpts, entropy *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _DegenGambit.contract.Call(opts, &out, "sampleUnmodifiedCenterReel", entropy)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// SampleUnmodifiedCenterReel is a free data retrieval call binding the contract method 0x873c1227.
//
// Solidity: function sampleUnmodifiedCenterReel(uint256 entropy) view returns(uint256)
func (_DegenGambit *DegenGambitSession) SampleUnmodifiedCenterReel(entropy *big.Int) (*big.Int, error) {
	return _DegenGambit.Contract.SampleUnmodifiedCenterReel(&_DegenGambit.CallOpts, entropy)
}

// SampleUnmodifiedCenterReel is a free data retrieval call binding the contract method 0x873c1227.
//
// Solidity: function sampleUnmodifiedCenterReel(uint256 entropy) view returns(uint256)
func (_DegenGambit *DegenGambitCallerSession) SampleUnmodifiedCenterReel(entropy *big.Int) (*big.Int, error) {
	return _DegenGambit.Contract.SampleUnmodifiedCenterReel(&_DegenGambit.CallOpts, entropy)
}

// SampleUnmodifiedLeftReel is a free data retrieval call binding the contract method 0xfcb9f003.
//
// Solidity: function sampleUnmodifiedLeftReel(uint256 entropy) view returns(uint256)
func (_DegenGambit *DegenGambitCaller) SampleUnmodifiedLeftReel(opts *bind.CallOpts, entropy *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _DegenGambit.contract.Call(opts, &out, "sampleUnmodifiedLeftReel", entropy)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// SampleUnmodifiedLeftReel is a free data retrieval call binding the contract method 0xfcb9f003.
//
// Solidity: function sampleUnmodifiedLeftReel(uint256 entropy) view returns(uint256)
func (_DegenGambit *DegenGambitSession) SampleUnmodifiedLeftReel(entropy *big.Int) (*big.Int, error) {
	return _DegenGambit.Contract.SampleUnmodifiedLeftReel(&_DegenGambit.CallOpts, entropy)
}

// SampleUnmodifiedLeftReel is a free data retrieval call binding the contract method 0xfcb9f003.
//
// Solidity: function sampleUnmodifiedLeftReel(uint256 entropy) view returns(uint256)
func (_DegenGambit *DegenGambitCallerSession) SampleUnmodifiedLeftReel(entropy *big.Int) (*big.Int, error) {
	return _DegenGambit.Contract.SampleUnmodifiedLeftReel(&_DegenGambit.CallOpts, entropy)
}

// SampleUnmodifiedRightReel is a free data retrieval call binding the contract method 0x02de1a7e.
//
// Solidity: function sampleUnmodifiedRightReel(uint256 entropy) view returns(uint256)
func (_DegenGambit *DegenGambitCaller) SampleUnmodifiedRightReel(opts *bind.CallOpts, entropy *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _DegenGambit.contract.Call(opts, &out, "sampleUnmodifiedRightReel", entropy)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// SampleUnmodifiedRightReel is a free data retrieval call binding the contract method 0x02de1a7e.
//
// Solidity: function sampleUnmodifiedRightReel(uint256 entropy) view returns(uint256)
func (_DegenGambit *DegenGambitSession) SampleUnmodifiedRightReel(entropy *big.Int) (*big.Int, error) {
	return _DegenGambit.Contract.SampleUnmodifiedRightReel(&_DegenGambit.CallOpts, entropy)
}

// SampleUnmodifiedRightReel is a free data retrieval call binding the contract method 0x02de1a7e.
//
// Solidity: function sampleUnmodifiedRightReel(uint256 entropy) view returns(uint256)
func (_DegenGambit *DegenGambitCallerSession) SampleUnmodifiedRightReel(entropy *big.Int) (*big.Int, error) {
	return _DegenGambit.Contract.SampleUnmodifiedRightReel(&_DegenGambit.CallOpts, entropy)
}

// SpinCost is a free data retrieval call binding the contract method 0x6f785558.
//
// Solidity: function spinCost(address degenerate) view returns(uint256)
func (_DegenGambit *DegenGambitCaller) SpinCost(opts *bind.CallOpts, degenerate common.Address) (*big.Int, error) {
	var out []interface{}
	err := _DegenGambit.contract.Call(opts, &out, "spinCost", degenerate)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// SpinCost is a free data retrieval call binding the contract method 0x6f785558.
//
// Solidity: function spinCost(address degenerate) view returns(uint256)
func (_DegenGambit *DegenGambitSession) SpinCost(degenerate common.Address) (*big.Int, error) {
	return _DegenGambit.Contract.SpinCost(&_DegenGambit.CallOpts, degenerate)
}

// SpinCost is a free data retrieval call binding the contract method 0x6f785558.
//
// Solidity: function spinCost(address degenerate) view returns(uint256)
func (_DegenGambit *DegenGambitCallerSession) SpinCost(degenerate common.Address) (*big.Int, error) {
	return _DegenGambit.Contract.SpinCost(&_DegenGambit.CallOpts, degenerate)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceID) pure returns(bool)
func (_DegenGambit *DegenGambitCaller) SupportsInterface(opts *bind.CallOpts, interfaceID [4]byte) (bool, error) {
	var out []interface{}
	err := _DegenGambit.contract.Call(opts, &out, "supportsInterface", interfaceID)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceID) pure returns(bool)
func (_DegenGambit *DegenGambitSession) SupportsInterface(interfaceID [4]byte) (bool, error) {
	return _DegenGambit.Contract.SupportsInterface(&_DegenGambit.CallOpts, interfaceID)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceID) pure returns(bool)
func (_DegenGambit *DegenGambitCallerSession) SupportsInterface(interfaceID [4]byte) (bool, error) {
	return _DegenGambit.Contract.SupportsInterface(&_DegenGambit.CallOpts, interfaceID)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_DegenGambit *DegenGambitCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _DegenGambit.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_DegenGambit *DegenGambitSession) Symbol() (string, error) {
	return _DegenGambit.Contract.Symbol(&_DegenGambit.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_DegenGambit *DegenGambitCallerSession) Symbol() (string, error) {
	return _DegenGambit.Contract.Symbol(&_DegenGambit.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_DegenGambit *DegenGambitCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _DegenGambit.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_DegenGambit *DegenGambitSession) TotalSupply() (*big.Int, error) {
	return _DegenGambit.Contract.TotalSupply(&_DegenGambit.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_DegenGambit *DegenGambitCallerSession) TotalSupply() (*big.Int, error) {
	return _DegenGambit.Contract.TotalSupply(&_DegenGambit.CallOpts)
}

// Accept is a paid mutator transaction binding the contract method 0x2852b71c.
//
// Solidity: function accept() returns(uint256 left, uint256 center, uint256 right, uint256 remainingEntropy)
func (_DegenGambit *DegenGambitTransactor) Accept(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DegenGambit.contract.Transact(opts, "accept")
}

// Accept is a paid mutator transaction binding the contract method 0x2852b71c.
//
// Solidity: function accept() returns(uint256 left, uint256 center, uint256 right, uint256 remainingEntropy)
func (_DegenGambit *DegenGambitSession) Accept() (*types.Transaction, error) {
	return _DegenGambit.Contract.Accept(&_DegenGambit.TransactOpts)
}

// Accept is a paid mutator transaction binding the contract method 0x2852b71c.
//
// Solidity: function accept() returns(uint256 left, uint256 center, uint256 right, uint256 remainingEntropy)
func (_DegenGambit *DegenGambitTransactorSession) Accept() (*types.Transaction, error) {
	return _DegenGambit.Contract.Accept(&_DegenGambit.TransactOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 value) returns(bool)
func (_DegenGambit *DegenGambitTransactor) Approve(opts *bind.TransactOpts, spender common.Address, value *big.Int) (*types.Transaction, error) {
	return _DegenGambit.contract.Transact(opts, "approve", spender, value)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 value) returns(bool)
func (_DegenGambit *DegenGambitSession) Approve(spender common.Address, value *big.Int) (*types.Transaction, error) {
	return _DegenGambit.Contract.Approve(&_DegenGambit.TransactOpts, spender, value)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 value) returns(bool)
func (_DegenGambit *DegenGambitTransactorSession) Approve(spender common.Address, value *big.Int) (*types.Transaction, error) {
	return _DegenGambit.Contract.Approve(&_DegenGambit.TransactOpts, spender, value)
}

// Spin is a paid mutator transaction binding the contract method 0x6499572f.
//
// Solidity: function spin(bool boost) payable returns()
func (_DegenGambit *DegenGambitTransactor) Spin(opts *bind.TransactOpts, boost bool) (*types.Transaction, error) {
	return _DegenGambit.contract.Transact(opts, "spin", boost)
}

// Spin is a paid mutator transaction binding the contract method 0x6499572f.
//
// Solidity: function spin(bool boost) payable returns()
func (_DegenGambit *DegenGambitSession) Spin(boost bool) (*types.Transaction, error) {
	return _DegenGambit.Contract.Spin(&_DegenGambit.TransactOpts, boost)
}

// Spin is a paid mutator transaction binding the contract method 0x6499572f.
//
// Solidity: function spin(bool boost) payable returns()
func (_DegenGambit *DegenGambitTransactorSession) Spin(boost bool) (*types.Transaction, error) {
	return _DegenGambit.Contract.Spin(&_DegenGambit.TransactOpts, boost)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 value) returns(bool)
func (_DegenGambit *DegenGambitTransactor) Transfer(opts *bind.TransactOpts, to common.Address, value *big.Int) (*types.Transaction, error) {
	return _DegenGambit.contract.Transact(opts, "transfer", to, value)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 value) returns(bool)
func (_DegenGambit *DegenGambitSession) Transfer(to common.Address, value *big.Int) (*types.Transaction, error) {
	return _DegenGambit.Contract.Transfer(&_DegenGambit.TransactOpts, to, value)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 value) returns(bool)
func (_DegenGambit *DegenGambitTransactorSession) Transfer(to common.Address, value *big.Int) (*types.Transaction, error) {
	return _DegenGambit.Contract.Transfer(&_DegenGambit.TransactOpts, to, value)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 value) returns(bool)
func (_DegenGambit *DegenGambitTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, value *big.Int) (*types.Transaction, error) {
	return _DegenGambit.contract.Transact(opts, "transferFrom", from, to, value)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 value) returns(bool)
func (_DegenGambit *DegenGambitSession) TransferFrom(from common.Address, to common.Address, value *big.Int) (*types.Transaction, error) {
	return _DegenGambit.Contract.TransferFrom(&_DegenGambit.TransactOpts, from, to, value)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 value) returns(bool)
func (_DegenGambit *DegenGambitTransactorSession) TransferFrom(from common.Address, to common.Address, value *big.Int) (*types.Transaction, error) {
	return _DegenGambit.Contract.TransferFrom(&_DegenGambit.TransactOpts, from, to, value)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_DegenGambit *DegenGambitTransactor) Receive(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DegenGambit.contract.RawTransact(opts, nil) // calldata is disallowed for receive function
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_DegenGambit *DegenGambitSession) Receive() (*types.Transaction, error) {
	return _DegenGambit.Contract.Receive(&_DegenGambit.TransactOpts)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_DegenGambit *DegenGambitTransactorSession) Receive() (*types.Transaction, error) {
	return _DegenGambit.Contract.Receive(&_DegenGambit.TransactOpts)
}

// DegenGambitApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the DegenGambit contract.
type DegenGambitApprovalIterator struct {
	Event *DegenGambitApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DegenGambitApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DegenGambitApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DegenGambitApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DegenGambitApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DegenGambitApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DegenGambitApproval represents a Approval event raised by the DegenGambit contract.
type DegenGambitApproval struct {
	Owner   common.Address
	Spender common.Address
	Value   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_DegenGambit *DegenGambitFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*DegenGambitApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _DegenGambit.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return &DegenGambitApprovalIterator{contract: _DegenGambit.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_DegenGambit *DegenGambitFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *DegenGambitApproval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _DegenGambit.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DegenGambitApproval)
				if err := _DegenGambit.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_DegenGambit *DegenGambitFilterer) ParseApproval(log types.Log) (*DegenGambitApproval, error) {
	event := new(DegenGambitApproval)
	if err := _DegenGambit.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DegenGambitAwardIterator is returned from FilterAward and is used to iterate over the raw logs and unpacked data for Award events raised by the DegenGambit contract.
type DegenGambitAwardIterator struct {
	Event *DegenGambitAward // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DegenGambitAwardIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DegenGambitAward)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DegenGambitAward)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DegenGambitAwardIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DegenGambitAwardIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DegenGambitAward represents a Award event raised by the DegenGambit contract.
type DegenGambitAward struct {
	Player common.Address
	Value  *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterAward is a free log retrieval operation binding the contract event 0x473edf73b107bf5d270ea55a7ea4ce98a1b5618dd196e00d5a48e101299b26d4.
//
// Solidity: event Award(address indexed player, uint256 value)
func (_DegenGambit *DegenGambitFilterer) FilterAward(opts *bind.FilterOpts, player []common.Address) (*DegenGambitAwardIterator, error) {

	var playerRule []interface{}
	for _, playerItem := range player {
		playerRule = append(playerRule, playerItem)
	}

	logs, sub, err := _DegenGambit.contract.FilterLogs(opts, "Award", playerRule)
	if err != nil {
		return nil, err
	}
	return &DegenGambitAwardIterator{contract: _DegenGambit.contract, event: "Award", logs: logs, sub: sub}, nil
}

// WatchAward is a free log subscription operation binding the contract event 0x473edf73b107bf5d270ea55a7ea4ce98a1b5618dd196e00d5a48e101299b26d4.
//
// Solidity: event Award(address indexed player, uint256 value)
func (_DegenGambit *DegenGambitFilterer) WatchAward(opts *bind.WatchOpts, sink chan<- *DegenGambitAward, player []common.Address) (event.Subscription, error) {

	var playerRule []interface{}
	for _, playerItem := range player {
		playerRule = append(playerRule, playerItem)
	}

	logs, sub, err := _DegenGambit.contract.WatchLogs(opts, "Award", playerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DegenGambitAward)
				if err := _DegenGambit.contract.UnpackLog(event, "Award", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAward is a log parse operation binding the contract event 0x473edf73b107bf5d270ea55a7ea4ce98a1b5618dd196e00d5a48e101299b26d4.
//
// Solidity: event Award(address indexed player, uint256 value)
func (_DegenGambit *DegenGambitFilterer) ParseAward(log types.Log) (*DegenGambitAward, error) {
	event := new(DegenGambitAward)
	if err := _DegenGambit.contract.UnpackLog(event, "Award", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DegenGambitSpinIterator is returned from FilterSpin and is used to iterate over the raw logs and unpacked data for Spin events raised by the DegenGambit contract.
type DegenGambitSpinIterator struct {
	Event *DegenGambitSpin // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DegenGambitSpinIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DegenGambitSpin)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DegenGambitSpin)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DegenGambitSpinIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DegenGambitSpinIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DegenGambitSpin represents a Spin event raised by the DegenGambit contract.
type DegenGambitSpin struct {
	Player common.Address
	Bonus  bool
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterSpin is a free log retrieval operation binding the contract event 0xc028bd493df31fdde3d19c91126b5780fc658410d5fe9b0234e3c65675e0d957.
//
// Solidity: event Spin(address indexed player, bool indexed bonus)
func (_DegenGambit *DegenGambitFilterer) FilterSpin(opts *bind.FilterOpts, player []common.Address, bonus []bool) (*DegenGambitSpinIterator, error) {

	var playerRule []interface{}
	for _, playerItem := range player {
		playerRule = append(playerRule, playerItem)
	}
	var bonusRule []interface{}
	for _, bonusItem := range bonus {
		bonusRule = append(bonusRule, bonusItem)
	}

	logs, sub, err := _DegenGambit.contract.FilterLogs(opts, "Spin", playerRule, bonusRule)
	if err != nil {
		return nil, err
	}
	return &DegenGambitSpinIterator{contract: _DegenGambit.contract, event: "Spin", logs: logs, sub: sub}, nil
}

// WatchSpin is a free log subscription operation binding the contract event 0xc028bd493df31fdde3d19c91126b5780fc658410d5fe9b0234e3c65675e0d957.
//
// Solidity: event Spin(address indexed player, bool indexed bonus)
func (_DegenGambit *DegenGambitFilterer) WatchSpin(opts *bind.WatchOpts, sink chan<- *DegenGambitSpin, player []common.Address, bonus []bool) (event.Subscription, error) {

	var playerRule []interface{}
	for _, playerItem := range player {
		playerRule = append(playerRule, playerItem)
	}
	var bonusRule []interface{}
	for _, bonusItem := range bonus {
		bonusRule = append(bonusRule, bonusItem)
	}

	logs, sub, err := _DegenGambit.contract.WatchLogs(opts, "Spin", playerRule, bonusRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DegenGambitSpin)
				if err := _DegenGambit.contract.UnpackLog(event, "Spin", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSpin is a log parse operation binding the contract event 0xc028bd493df31fdde3d19c91126b5780fc658410d5fe9b0234e3c65675e0d957.
//
// Solidity: event Spin(address indexed player, bool indexed bonus)
func (_DegenGambit *DegenGambitFilterer) ParseSpin(log types.Log) (*DegenGambitSpin, error) {
	event := new(DegenGambitSpin)
	if err := _DegenGambit.contract.UnpackLog(event, "Spin", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DegenGambitTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the DegenGambit contract.
type DegenGambitTransferIterator struct {
	Event *DegenGambitTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DegenGambitTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DegenGambitTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DegenGambitTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DegenGambitTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DegenGambitTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DegenGambitTransfer represents a Transfer event raised by the DegenGambit contract.
type DegenGambitTransfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_DegenGambit *DegenGambitFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*DegenGambitTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _DegenGambit.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &DegenGambitTransferIterator{contract: _DegenGambit.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_DegenGambit *DegenGambitFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *DegenGambitTransfer, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _DegenGambit.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DegenGambitTransfer)
				if err := _DegenGambit.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_DegenGambit *DegenGambitFilterer) ParseTransfer(log types.Log) (*DegenGambitTransfer, error) {
	event := new(DegenGambitTransfer)
	if err := _DegenGambit.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

func CreateDegenGambitDeploymentCommand() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc string
	var gasLimit uint64
	var simulate bool
	var timeout uint

	var blocksToAct *big.Int
	var blocksToActRaw string
	var costToSpin *big.Int
	var costToSpinRaw string
	var costToRespin *big.Int
	var costToRespinRaw string

	cmd := &cobra.Command{
		Use:   "deploy",
		Short: "Deploy a new DegenGambit contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if keyfile == "" {
				return fmt.Errorf("--keystore not specified (this should be a path to an Ethereum account keystore file)")
			}

			if blocksToActRaw == "" {
				return fmt.Errorf("--blocks-to-act argument not specified")
			}
			blocksToAct = new(big.Int)
			blocksToAct.SetString(blocksToActRaw, 0)

			if costToSpinRaw == "" {
				return fmt.Errorf("--cost-to-spin argument not specified")
			}
			costToSpin = new(big.Int)
			costToSpin.SetString(costToSpinRaw, 0)

			if costToRespinRaw == "" {
				return fmt.Errorf("--cost-to-respin argument not specified")
			}
			costToRespin = new(big.Int)
			costToRespin.SetString(costToRespinRaw, 0)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			address, deploymentTransaction, _, deploymentErr := DeployDegenGambit(
				transactionOpts,
				client,
				blocksToAct,
				costToSpin,
				costToRespin,
			)
			if deploymentErr != nil {
				return deploymentErr
			}

			cmd.Printf("Transaction hash: %s\nContract address: %s\n", deploymentTransaction.Hash().Hex(), address.Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					Data: deploymentTransaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := deploymentTransaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")

	cmd.Flags().StringVar(&blocksToActRaw, "blocks-to-act", "", "blocks-to-act argument")
	cmd.Flags().StringVar(&costToSpinRaw, "cost-to-spin", "", "cost-to-spin argument")
	cmd.Flags().StringVar(&costToRespinRaw, "cost-to-respin", "", "cost-to-respin argument")

	return cmd
}

func CreateSupportsInterfaceCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var interfaceID [4]byte
	var interfaceIDRaw string

	var capture0 bool

	cmd := &cobra.Command{
		Use:   "supports-interface",
		Short: "Call the SupportsInterface view method on a DegenGambit contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			var interfaceIDIntermediate []byte

			var interfaceIDIntermediateHexDecodeErr error
			interfaceIDIntermediate, interfaceIDIntermediateHexDecodeErr = hex.DecodeString(interfaceIDRaw)
			if interfaceIDIntermediateHexDecodeErr != nil {
				return interfaceIDIntermediateHexDecodeErr
			}

			copy(interfaceID[:], interfaceIDIntermediate)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewDegenGambit(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := DegenGambitCallerSession{
				Contract: &contract.DegenGambitCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.SupportsInterface(
				interfaceID,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %t\n", capture0)

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&interfaceIDRaw, "interface-id", "", "interface-id argument ([4]byte)")

	return cmd
}
func CreateCostToSpinCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var capture0 *big.Int

	cmd := &cobra.Command{
		Use:   "cost-to-spin",
		Short: "Call the CostToSpin view method on a DegenGambit contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewDegenGambit(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := DegenGambitCallerSession{
				Contract: &contract.DegenGambitCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.CostToSpin()
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0.String())

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	return cmd
}
func CreateImprovedCenterReelCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var arg0 *big.Int
	var arg0Raw string

	var capture0 *big.Int

	cmd := &cobra.Command{
		Use:   "improved-center-reel",
		Short: "Call the ImprovedCenterReel view method on a DegenGambit contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if arg0Raw == "" {
				return fmt.Errorf("--arg-0 argument not specified")
			}
			arg0 = new(big.Int)
			arg0.SetString(arg0Raw, 0)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewDegenGambit(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := DegenGambitCallerSession{
				Contract: &contract.DegenGambitCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.ImprovedCenterReel(
				arg0,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0.String())

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&arg0Raw, "arg-0", "", "arg-0 argument")

	return cmd
}
func CreateUnmodifiedRightReelCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var arg0 *big.Int
	var arg0Raw string

	var capture0 *big.Int

	cmd := &cobra.Command{
		Use:   "unmodified-right-reel",
		Short: "Call the UnmodifiedRightReel view method on a DegenGambit contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if arg0Raw == "" {
				return fmt.Errorf("--arg-0 argument not specified")
			}
			arg0 = new(big.Int)
			arg0.SetString(arg0Raw, 0)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewDegenGambit(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := DegenGambitCallerSession{
				Contract: &contract.DegenGambitCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.UnmodifiedRightReel(
				arg0,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0.String())

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&arg0Raw, "arg-0", "", "arg-0 argument")

	return cmd
}
func CreatePayoutCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var left *big.Int
	var leftRaw string
	var center *big.Int
	var centerRaw string
	var right *big.Int
	var rightRaw string

	var capture0 *big.Int

	cmd := &cobra.Command{
		Use:   "payout",
		Short: "Call the Payout view method on a DegenGambit contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if leftRaw == "" {
				return fmt.Errorf("--left argument not specified")
			}
			left = new(big.Int)
			left.SetString(leftRaw, 0)

			if centerRaw == "" {
				return fmt.Errorf("--center argument not specified")
			}
			center = new(big.Int)
			center.SetString(centerRaw, 0)

			if rightRaw == "" {
				return fmt.Errorf("--right argument not specified")
			}
			right = new(big.Int)
			right.SetString(rightRaw, 0)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewDegenGambit(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := DegenGambitCallerSession{
				Contract: &contract.DegenGambitCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.Payout(
				left,
				center,
				right,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0.String())

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&leftRaw, "left", "", "left argument")
	cmd.Flags().StringVar(&centerRaw, "center", "", "center argument")
	cmd.Flags().StringVar(&rightRaw, "right", "", "right argument")

	return cmd
}
func CreateSymbolCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var capture0 string

	cmd := &cobra.Command{
		Use:   "symbol",
		Short: "Call the Symbol view method on a DegenGambit contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewDegenGambit(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := DegenGambitCallerSession{
				Contract: &contract.DegenGambitCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.Symbol()
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0)

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	return cmd
}
func CreateSampleImprovedLeftReelCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var entropy *big.Int
	var entropyRaw string

	var capture0 *big.Int

	cmd := &cobra.Command{
		Use:   "sample-improved-left-reel",
		Short: "Call the SampleImprovedLeftReel view method on a DegenGambit contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if entropyRaw == "" {
				return fmt.Errorf("--entropy argument not specified")
			}
			entropy = new(big.Int)
			entropy.SetString(entropyRaw, 0)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewDegenGambit(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := DegenGambitCallerSession{
				Contract: &contract.DegenGambitCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.SampleImprovedLeftReel(
				entropy,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0.String())

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&entropyRaw, "entropy", "", "entropy argument")

	return cmd
}
func CreateSampleImprovedRightReelCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var entropy *big.Int
	var entropyRaw string

	var capture0 *big.Int

	cmd := &cobra.Command{
		Use:   "sample-improved-right-reel",
		Short: "Call the SampleImprovedRightReel view method on a DegenGambit contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if entropyRaw == "" {
				return fmt.Errorf("--entropy argument not specified")
			}
			entropy = new(big.Int)
			entropy.SetString(entropyRaw, 0)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewDegenGambit(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := DegenGambitCallerSession{
				Contract: &contract.DegenGambitCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.SampleImprovedRightReel(
				entropy,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0.String())

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&entropyRaw, "entropy", "", "entropy argument")

	return cmd
}
func CreateAllowanceCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var owner common.Address
	var ownerRaw string
	var spender common.Address
	var spenderRaw string

	var capture0 *big.Int

	cmd := &cobra.Command{
		Use:   "allowance",
		Short: "Call the Allowance view method on a DegenGambit contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if ownerRaw == "" {
				return fmt.Errorf("--owner argument not specified")
			} else if !common.IsHexAddress(ownerRaw) {
				return fmt.Errorf("--owner argument is not a valid Ethereum address")
			}
			owner = common.HexToAddress(ownerRaw)

			if spenderRaw == "" {
				return fmt.Errorf("--spender argument not specified")
			} else if !common.IsHexAddress(spenderRaw) {
				return fmt.Errorf("--spender argument is not a valid Ethereum address")
			}
			spender = common.HexToAddress(spenderRaw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewDegenGambit(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := DegenGambitCallerSession{
				Contract: &contract.DegenGambitCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.Allowance(
				owner,
				spender,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0.String())

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&ownerRaw, "owner", "", "owner argument (common.Address)")
	cmd.Flags().StringVar(&spenderRaw, "spender", "", "spender argument (common.Address)")

	return cmd
}
func CreateNameCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var capture0 string

	cmd := &cobra.Command{
		Use:   "name",
		Short: "Call the Name view method on a DegenGambit contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewDegenGambit(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := DegenGambitCallerSession{
				Contract: &contract.DegenGambitCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.Name()
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0)

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	return cmd
}
func CreateImprovedRightReelCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var arg0 *big.Int
	var arg0Raw string

	var capture0 *big.Int

	cmd := &cobra.Command{
		Use:   "improved-right-reel",
		Short: "Call the ImprovedRightReel view method on a DegenGambit contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if arg0Raw == "" {
				return fmt.Errorf("--arg-0 argument not specified")
			}
			arg0 = new(big.Int)
			arg0.SetString(arg0Raw, 0)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewDegenGambit(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := DegenGambitCallerSession{
				Contract: &contract.DegenGambitCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.ImprovedRightReel(
				arg0,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0.String())

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&arg0Raw, "arg-0", "", "arg-0 argument")

	return cmd
}
func CreateLastSpinBoostedCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var arg0 common.Address
	var arg0Raw string

	var capture0 bool

	cmd := &cobra.Command{
		Use:   "last-spin-boosted",
		Short: "Call the LastSpinBoosted view method on a DegenGambit contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if arg0Raw == "" {
				return fmt.Errorf("--arg-0 argument not specified")
			} else if !common.IsHexAddress(arg0Raw) {
				return fmt.Errorf("--arg-0 argument is not a valid Ethereum address")
			}
			arg0 = common.HexToAddress(arg0Raw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewDegenGambit(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := DegenGambitCallerSession{
				Contract: &contract.DegenGambitCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.LastSpinBoosted(
				arg0,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %t\n", capture0)

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&arg0Raw, "arg-0", "", "arg-0 argument (common.Address)")

	return cmd
}
func CreateBalanceOfCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var account common.Address
	var accountRaw string

	var capture0 *big.Int

	cmd := &cobra.Command{
		Use:   "balance-of",
		Short: "Call the BalanceOf view method on a DegenGambit contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if accountRaw == "" {
				return fmt.Errorf("--account argument not specified")
			} else if !common.IsHexAddress(accountRaw) {
				return fmt.Errorf("--account argument is not a valid Ethereum address")
			}
			account = common.HexToAddress(accountRaw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewDegenGambit(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := DegenGambitCallerSession{
				Contract: &contract.DegenGambitCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.BalanceOf(
				account,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0.String())

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&accountRaw, "account", "", "account argument (common.Address)")

	return cmd
}
func CreateSampleUnmodifiedRightReelCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var entropy *big.Int
	var entropyRaw string

	var capture0 *big.Int

	cmd := &cobra.Command{
		Use:   "sample-unmodified-right-reel",
		Short: "Call the SampleUnmodifiedRightReel view method on a DegenGambit contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if entropyRaw == "" {
				return fmt.Errorf("--entropy argument not specified")
			}
			entropy = new(big.Int)
			entropy.SetString(entropyRaw, 0)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewDegenGambit(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := DegenGambitCallerSession{
				Contract: &contract.DegenGambitCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.SampleUnmodifiedRightReel(
				entropy,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0.String())

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&entropyRaw, "entropy", "", "entropy argument")

	return cmd
}
func CreateTotalSupplyCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var capture0 *big.Int

	cmd := &cobra.Command{
		Use:   "total-supply",
		Short: "Call the TotalSupply view method on a DegenGambit contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewDegenGambit(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := DegenGambitCallerSession{
				Contract: &contract.DegenGambitCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.TotalSupply()
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0.String())

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	return cmd
}
func CreateSpinCostCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var degenerate common.Address
	var degenerateRaw string

	var capture0 *big.Int

	cmd := &cobra.Command{
		Use:   "spin-cost",
		Short: "Call the SpinCost view method on a DegenGambit contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if degenerateRaw == "" {
				return fmt.Errorf("--degenerate argument not specified")
			} else if !common.IsHexAddress(degenerateRaw) {
				return fmt.Errorf("--degenerate argument is not a valid Ethereum address")
			}
			degenerate = common.HexToAddress(degenerateRaw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewDegenGambit(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := DegenGambitCallerSession{
				Contract: &contract.DegenGambitCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.SpinCost(
				degenerate,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0.String())

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&degenerateRaw, "degenerate", "", "degenerate argument (common.Address)")

	return cmd
}
func CreateImprovedLeftReelCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var arg0 *big.Int
	var arg0Raw string

	var capture0 *big.Int

	cmd := &cobra.Command{
		Use:   "improved-left-reel",
		Short: "Call the ImprovedLeftReel view method on a DegenGambit contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if arg0Raw == "" {
				return fmt.Errorf("--arg-0 argument not specified")
			}
			arg0 = new(big.Int)
			arg0.SetString(arg0Raw, 0)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewDegenGambit(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := DegenGambitCallerSession{
				Contract: &contract.DegenGambitCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.ImprovedLeftReel(
				arg0,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0.String())

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&arg0Raw, "arg-0", "", "arg-0 argument")

	return cmd
}
func CreateSampleUnmodifiedCenterReelCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var entropy *big.Int
	var entropyRaw string

	var capture0 *big.Int

	cmd := &cobra.Command{
		Use:   "sample-unmodified-center-reel",
		Short: "Call the SampleUnmodifiedCenterReel view method on a DegenGambit contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if entropyRaw == "" {
				return fmt.Errorf("--entropy argument not specified")
			}
			entropy = new(big.Int)
			entropy.SetString(entropyRaw, 0)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewDegenGambit(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := DegenGambitCallerSession{
				Contract: &contract.DegenGambitCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.SampleUnmodifiedCenterReel(
				entropy,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0.String())

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&entropyRaw, "entropy", "", "entropy argument")

	return cmd
}
func CreateBlocksToActCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var capture0 *big.Int

	cmd := &cobra.Command{
		Use:   "blocks-to-act",
		Short: "Call the BlocksToAct view method on a DegenGambit contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewDegenGambit(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := DegenGambitCallerSession{
				Contract: &contract.DegenGambitCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.BlocksToAct()
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0.String())

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	return cmd
}
func CreateLastSpinBlockCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var arg0 common.Address
	var arg0Raw string

	var capture0 *big.Int

	cmd := &cobra.Command{
		Use:   "last-spin-block",
		Short: "Call the LastSpinBlock view method on a DegenGambit contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if arg0Raw == "" {
				return fmt.Errorf("--arg-0 argument not specified")
			} else if !common.IsHexAddress(arg0Raw) {
				return fmt.Errorf("--arg-0 argument is not a valid Ethereum address")
			}
			arg0 = common.HexToAddress(arg0Raw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewDegenGambit(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := DegenGambitCallerSession{
				Contract: &contract.DegenGambitCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.LastSpinBlock(
				arg0,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0.String())

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&arg0Raw, "arg-0", "", "arg-0 argument (common.Address)")

	return cmd
}
func CreateUnmodifiedLeftReelCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var arg0 *big.Int
	var arg0Raw string

	var capture0 *big.Int

	cmd := &cobra.Command{
		Use:   "unmodified-left-reel",
		Short: "Call the UnmodifiedLeftReel view method on a DegenGambit contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if arg0Raw == "" {
				return fmt.Errorf("--arg-0 argument not specified")
			}
			arg0 = new(big.Int)
			arg0.SetString(arg0Raw, 0)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewDegenGambit(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := DegenGambitCallerSession{
				Contract: &contract.DegenGambitCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.UnmodifiedLeftReel(
				arg0,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0.String())

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&arg0Raw, "arg-0", "", "arg-0 argument")

	return cmd
}
func CreateDecimalsCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var capture0 uint8

	cmd := &cobra.Command{
		Use:   "decimals",
		Short: "Call the Decimals view method on a DegenGambit contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewDegenGambit(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := DegenGambitCallerSession{
				Contract: &contract.DegenGambitCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.Decimals()
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %d\n", capture0)

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	return cmd
}
func CreateSampleImprovedCenterReelCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var entropy *big.Int
	var entropyRaw string

	var capture0 *big.Int

	cmd := &cobra.Command{
		Use:   "sample-improved-center-reel",
		Short: "Call the SampleImprovedCenterReel view method on a DegenGambit contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if entropyRaw == "" {
				return fmt.Errorf("--entropy argument not specified")
			}
			entropy = new(big.Int)
			entropy.SetString(entropyRaw, 0)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewDegenGambit(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := DegenGambitCallerSession{
				Contract: &contract.DegenGambitCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.SampleImprovedCenterReel(
				entropy,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0.String())

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&entropyRaw, "entropy", "", "entropy argument")

	return cmd
}
func CreateCostToRespinCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var capture0 *big.Int

	cmd := &cobra.Command{
		Use:   "cost-to-respin",
		Short: "Call the CostToRespin view method on a DegenGambit contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewDegenGambit(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := DegenGambitCallerSession{
				Contract: &contract.DegenGambitCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.CostToRespin()
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0.String())

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	return cmd
}
func CreateOutcomeCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var entropy *big.Int
	var entropyRaw string
	var boosted bool
	var boostedRaw string

	var capture0 struct {
		Left             *big.Int
		Center           *big.Int
		Right            *big.Int
		RemainingEntropy *big.Int
	}

	cmd := &cobra.Command{
		Use:   "outcome",
		Short: "Call the Outcome view method on a DegenGambit contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if entropyRaw == "" {
				return fmt.Errorf("--entropy argument not specified")
			}
			entropy = new(big.Int)
			entropy.SetString(entropyRaw, 0)

			boostedRawLower := strings.ToLower(boostedRaw)
			switch boostedRawLower {
			case "true", "t", "y", "yes", "1":
				boosted = true
			case "false", "f", "n", "no", "0":
				boosted = false
			default:
				return fmt.Errorf("--boosted argument is not valid (value: %s)", boostedRaw)
			}

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewDegenGambit(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := DegenGambitCallerSession{
				Contract: &contract.DegenGambitCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.Outcome(
				entropy,
				boosted,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %v\n", capture0)

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&entropyRaw, "entropy", "", "entropy argument")
	cmd.Flags().StringVar(&boostedRaw, "boosted", "", "boosted argument (true, t, y, yes, 1 OR false, f, n, no, 0)")

	return cmd
}
func CreateUnmodifiedCenterReelCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var arg0 *big.Int
	var arg0Raw string

	var capture0 *big.Int

	cmd := &cobra.Command{
		Use:   "unmodified-center-reel",
		Short: "Call the UnmodifiedCenterReel view method on a DegenGambit contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if arg0Raw == "" {
				return fmt.Errorf("--arg-0 argument not specified")
			}
			arg0 = new(big.Int)
			arg0.SetString(arg0Raw, 0)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewDegenGambit(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := DegenGambitCallerSession{
				Contract: &contract.DegenGambitCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.UnmodifiedCenterReel(
				arg0,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0.String())

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&arg0Raw, "arg-0", "", "arg-0 argument")

	return cmd
}
func CreateSampleUnmodifiedLeftReelCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var entropy *big.Int
	var entropyRaw string

	var capture0 *big.Int

	cmd := &cobra.Command{
		Use:   "sample-unmodified-left-reel",
		Short: "Call the SampleUnmodifiedLeftReel view method on a DegenGambit contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if entropyRaw == "" {
				return fmt.Errorf("--entropy argument not specified")
			}
			entropy = new(big.Int)
			entropy.SetString(entropyRaw, 0)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewDegenGambit(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := DegenGambitCallerSession{
				Contract: &contract.DegenGambitCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.SampleUnmodifiedLeftReel(
				entropy,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0.String())

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&entropyRaw, "entropy", "", "entropy argument")

	return cmd
}

func CreateAcceptCommand() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc, contractAddressRaw string
	var gasLimit uint64
	var simulate bool
	var timeout uint
	var contractAddress common.Address

	cmd := &cobra.Command{
		Use:   "accept",
		Short: "Execute the Accept method on a DegenGambit contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if keyfile == "" {
				return fmt.Errorf("--keystore not specified")
			}

			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			contract, contractErr := NewDegenGambit(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			session := DegenGambitTransactorSession{
				Contract:     &contract.DegenGambitTransactor,
				TransactOpts: *transactionOpts,
			}

			transaction, transactionErr := session.Accept()
			if transactionErr != nil {
				return transactionErr
			}

			cmd.Printf("Transaction hash: %s\n", transaction.Hash().Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					To:   &contractAddress,
					Data: transaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := transaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")

	return cmd
}
func CreateApproveCommand() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc, contractAddressRaw string
	var gasLimit uint64
	var simulate bool
	var timeout uint
	var contractAddress common.Address

	var spender common.Address
	var spenderRaw string
	var value0 *big.Int
	var value0Raw string

	cmd := &cobra.Command{
		Use:   "approve",
		Short: "Execute the Approve method on a DegenGambit contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if keyfile == "" {
				return fmt.Errorf("--keystore not specified")
			}

			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if spenderRaw == "" {
				return fmt.Errorf("--spender argument not specified")
			} else if !common.IsHexAddress(spenderRaw) {
				return fmt.Errorf("--spender argument is not a valid Ethereum address")
			}
			spender = common.HexToAddress(spenderRaw)

			if value0Raw == "" {
				return fmt.Errorf("--value-0 argument not specified")
			}
			value0 = new(big.Int)
			value0.SetString(value0Raw, 0)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			contract, contractErr := NewDegenGambit(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			session := DegenGambitTransactorSession{
				Contract:     &contract.DegenGambitTransactor,
				TransactOpts: *transactionOpts,
			}

			transaction, transactionErr := session.Approve(
				spender,
				value0,
			)
			if transactionErr != nil {
				return transactionErr
			}

			cmd.Printf("Transaction hash: %s\n", transaction.Hash().Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					To:   &contractAddress,
					Data: transaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := transaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")

	cmd.Flags().StringVar(&spenderRaw, "spender", "", "spender argument (common.Address)")
	cmd.Flags().StringVar(&value0Raw, "value-0", "", "value-0 argument")

	return cmd
}
func CreateSpinCommand() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc, contractAddressRaw string
	var gasLimit uint64
	var simulate bool
	var timeout uint
	var contractAddress common.Address

	var boost bool
	var boostRaw string

	cmd := &cobra.Command{
		Use:   "spin",
		Short: "Execute the Spin method on a DegenGambit contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if keyfile == "" {
				return fmt.Errorf("--keystore not specified")
			}

			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			boostRawLower := strings.ToLower(boostRaw)
			switch boostRawLower {
			case "true", "t", "y", "yes", "1":
				boost = true
			case "false", "f", "n", "no", "0":
				boost = false
			default:
				return fmt.Errorf("--boost argument is not valid (value: %s)", boostRaw)
			}

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			contract, contractErr := NewDegenGambit(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			session := DegenGambitTransactorSession{
				Contract:     &contract.DegenGambitTransactor,
				TransactOpts: *transactionOpts,
			}

			transaction, transactionErr := session.Spin(
				boost,
			)
			if transactionErr != nil {
				return transactionErr
			}

			cmd.Printf("Transaction hash: %s\n", transaction.Hash().Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					To:   &contractAddress,
					Data: transaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := transaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")

	cmd.Flags().StringVar(&boostRaw, "boost", "", "boost argument (true, t, y, yes, 1 OR false, f, n, no, 0)")

	return cmd
}
func CreateTransferCommand() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc, contractAddressRaw string
	var gasLimit uint64
	var simulate bool
	var timeout uint
	var contractAddress common.Address

	var to0 common.Address
	var to0Raw string
	var value0 *big.Int
	var value0Raw string

	cmd := &cobra.Command{
		Use:   "transfer",
		Short: "Execute the Transfer method on a DegenGambit contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if keyfile == "" {
				return fmt.Errorf("--keystore not specified")
			}

			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if to0Raw == "" {
				return fmt.Errorf("--to-0 argument not specified")
			} else if !common.IsHexAddress(to0Raw) {
				return fmt.Errorf("--to-0 argument is not a valid Ethereum address")
			}
			to0 = common.HexToAddress(to0Raw)

			if value0Raw == "" {
				return fmt.Errorf("--value-0 argument not specified")
			}
			value0 = new(big.Int)
			value0.SetString(value0Raw, 0)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			contract, contractErr := NewDegenGambit(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			session := DegenGambitTransactorSession{
				Contract:     &contract.DegenGambitTransactor,
				TransactOpts: *transactionOpts,
			}

			transaction, transactionErr := session.Transfer(
				to0,
				value0,
			)
			if transactionErr != nil {
				return transactionErr
			}

			cmd.Printf("Transaction hash: %s\n", transaction.Hash().Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					To:   &contractAddress,
					Data: transaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := transaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")

	cmd.Flags().StringVar(&to0Raw, "to-0", "", "to-0 argument (common.Address)")
	cmd.Flags().StringVar(&value0Raw, "value-0", "", "value-0 argument")

	return cmd
}
func CreateTransferFromCommand() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc, contractAddressRaw string
	var gasLimit uint64
	var simulate bool
	var timeout uint
	var contractAddress common.Address

	var from0 common.Address
	var from0Raw string
	var to0 common.Address
	var to0Raw string
	var value0 *big.Int
	var value0Raw string

	cmd := &cobra.Command{
		Use:   "transfer-from",
		Short: "Execute the TransferFrom method on a DegenGambit contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if keyfile == "" {
				return fmt.Errorf("--keystore not specified")
			}

			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if from0Raw == "" {
				return fmt.Errorf("--from-0 argument not specified")
			} else if !common.IsHexAddress(from0Raw) {
				return fmt.Errorf("--from-0 argument is not a valid Ethereum address")
			}
			from0 = common.HexToAddress(from0Raw)

			if to0Raw == "" {
				return fmt.Errorf("--to-0 argument not specified")
			} else if !common.IsHexAddress(to0Raw) {
				return fmt.Errorf("--to-0 argument is not a valid Ethereum address")
			}
			to0 = common.HexToAddress(to0Raw)

			if value0Raw == "" {
				return fmt.Errorf("--value-0 argument not specified")
			}
			value0 = new(big.Int)
			value0.SetString(value0Raw, 0)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			contract, contractErr := NewDegenGambit(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			session := DegenGambitTransactorSession{
				Contract:     &contract.DegenGambitTransactor,
				TransactOpts: *transactionOpts,
			}

			transaction, transactionErr := session.TransferFrom(
				from0,
				to0,
				value0,
			)
			if transactionErr != nil {
				return transactionErr
			}

			cmd.Printf("Transaction hash: %s\n", transaction.Hash().Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					To:   &contractAddress,
					Data: transaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := transaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")

	cmd.Flags().StringVar(&from0Raw, "from-0", "", "from-0 argument (common.Address)")
	cmd.Flags().StringVar(&to0Raw, "to-0", "", "to-0 argument (common.Address)")
	cmd.Flags().StringVar(&value0Raw, "value-0", "", "value-0 argument")

	return cmd
}
func CreateReceiveCommand() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc, contractAddressRaw string
	var gasLimit uint64
	var simulate bool
	var timeout uint
	var contractAddress common.Address

	cmd := &cobra.Command{
		Use:   "receive",
		Short: "Execute the Receive method on a DegenGambit contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if keyfile == "" {
				return fmt.Errorf("--keystore not specified")
			}

			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			contract, contractErr := NewDegenGambit(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			session := DegenGambitTransactorSession{
				Contract:     &contract.DegenGambitTransactor,
				TransactOpts: *transactionOpts,
			}

			transaction, transactionErr := session.Receive()
			if transactionErr != nil {
				return transactionErr
			}

			cmd.Printf("Transaction hash: %s\n", transaction.Hash().Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					To:   &contractAddress,
					Data: transaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := transaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")

	return cmd
}

var ErrNoRPCURL error = errors.New("no RPC URL provided -- please pass an RPC URL from the command line or set the DEGEN_GAMBIT_RPC_URL environment variable")

// Generates an Ethereum client to the JSONRPC API at the given URL. If rpcURL is empty, then it
// attempts to read the RPC URL from the DEGEN_GAMBIT_RPC_URL environment variable. If that is empty,
// too, then it returns an error.
func NewClient(rpcURL string) (*ethclient.Client, error) {
	if rpcURL == "" {
		rpcURL = os.Getenv("DEGEN_GAMBIT_RPC_URL")
	}

	if rpcURL == "" {
		return nil, ErrNoRPCURL
	}

	client, err := ethclient.Dial(rpcURL)
	return client, err
}

// Creates a new context to be used when interacting with the chain client.
func NewChainContext(timeout uint) (context.Context, context.CancelFunc) {
	baseCtx := context.Background()
	parsedTimeout := time.Duration(timeout) * time.Second
	ctx, cancel := context.WithTimeout(baseCtx, parsedTimeout)
	return ctx, cancel
}

// Unlocks a key from a keystore (byte contents of a keystore file) with the given password.
func UnlockKeystore(keystoreData []byte, password string) (*keystore.Key, error) {
	key, err := keystore.DecryptKey(keystoreData, password)
	return key, err
}

// Loads a key from file, prompting the user for the password if it is not provided as a function argument.
func KeyFromFile(keystoreFile string, password string) (*keystore.Key, error) {
	var emptyKey *keystore.Key
	keystoreContent, readErr := os.ReadFile(keystoreFile)
	if readErr != nil {
		return emptyKey, readErr
	}

	// If password is "", prompt user for password.
	if password == "" {
		fmt.Printf("Please provide a password for keystore (%s): ", keystoreFile)
		passwordRaw, inputErr := term.ReadPassword(int(os.Stdin.Fd()))
		if inputErr != nil {
			return emptyKey, fmt.Errorf("error reading password: %s", inputErr.Error())
		}
		fmt.Print("\n")
		password = string(passwordRaw)
	}

	key, err := UnlockKeystore(keystoreContent, password)
	return key, err
}

// This method is used to set the parameters on a view call from command line arguments (represented mostly as
// strings).
func SetCallParametersFromArgs(opts *bind.CallOpts, pending bool, fromAddress, blockNumber string) {
	if pending {
		opts.Pending = true
	}

	if fromAddress != "" {
		opts.From = common.HexToAddress(fromAddress)
	}

	if blockNumber != "" {
		opts.BlockNumber = new(big.Int)
		opts.BlockNumber.SetString(blockNumber, 0)
	}
}

// This method is used to set the parameters on a transaction from command line arguments (represented mostly as
// strings).
func SetTransactionParametersFromArgs(opts *bind.TransactOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas string, gasLimit uint64, noSend bool) {
	if nonce != "" {
		opts.Nonce = new(big.Int)
		opts.Nonce.SetString(nonce, 0)
	}

	if value != "" {
		opts.Value = new(big.Int)
		opts.Value.SetString(value, 0)
	}

	if gasPrice != "" {
		opts.GasPrice = new(big.Int)
		opts.GasPrice.SetString(gasPrice, 0)
	}

	if maxFeePerGas != "" {
		opts.GasFeeCap = new(big.Int)
		opts.GasFeeCap.SetString(maxFeePerGas, 0)
	}

	if maxPriorityFeePerGas != "" {
		opts.GasTipCap = new(big.Int)
		opts.GasTipCap.SetString(maxPriorityFeePerGas, 0)
	}

	if gasLimit != 0 {
		opts.GasLimit = gasLimit
	}

	opts.NoSend = noSend
}

func CreateDegenGambitCommand() *cobra.Command {
	cmd := &cobra.Command{
		Use:   "degen-gambit",
		Short: "Interact with the DegenGambit contract",
		Run: func(cmd *cobra.Command, args []string) {
			cmd.Help()
		},
	}

	cmd.SetOut(os.Stdout)

	DeployGroup := &cobra.Group{
		ID: "deploy", Title: "Commands which deploy contracts",
	}
	cmd.AddGroup(DeployGroup)
	ViewGroup := &cobra.Group{
		ID: "view", Title: "Commands which view contract state",
	}
	TransactGroup := &cobra.Group{
		ID: "transact", Title: "Commands which submit transactions",
	}
	cmd.AddGroup(ViewGroup, TransactGroup)

	cmdDeployDegenGambit := CreateDegenGambitDeploymentCommand()
	cmdDeployDegenGambit.GroupID = DeployGroup.ID
	cmd.AddCommand(cmdDeployDegenGambit)

	cmdViewSupportsInterface := CreateSupportsInterfaceCommand()
	cmdViewSupportsInterface.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewSupportsInterface)
	cmdViewCostToSpin := CreateCostToSpinCommand()
	cmdViewCostToSpin.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewCostToSpin)
	cmdViewImprovedCenterReel := CreateImprovedCenterReelCommand()
	cmdViewImprovedCenterReel.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewImprovedCenterReel)
	cmdViewUnmodifiedRightReel := CreateUnmodifiedRightReelCommand()
	cmdViewUnmodifiedRightReel.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewUnmodifiedRightReel)
	cmdViewPayout := CreatePayoutCommand()
	cmdViewPayout.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewPayout)
	cmdViewSymbol := CreateSymbolCommand()
	cmdViewSymbol.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewSymbol)
	cmdViewSampleImprovedLeftReel := CreateSampleImprovedLeftReelCommand()
	cmdViewSampleImprovedLeftReel.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewSampleImprovedLeftReel)
	cmdViewSampleImprovedRightReel := CreateSampleImprovedRightReelCommand()
	cmdViewSampleImprovedRightReel.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewSampleImprovedRightReel)
	cmdViewAllowance := CreateAllowanceCommand()
	cmdViewAllowance.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewAllowance)
	cmdViewName := CreateNameCommand()
	cmdViewName.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewName)
	cmdViewImprovedRightReel := CreateImprovedRightReelCommand()
	cmdViewImprovedRightReel.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewImprovedRightReel)
	cmdViewLastSpinBoosted := CreateLastSpinBoostedCommand()
	cmdViewLastSpinBoosted.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewLastSpinBoosted)
	cmdViewBalanceOf := CreateBalanceOfCommand()
	cmdViewBalanceOf.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewBalanceOf)
	cmdViewSampleUnmodifiedRightReel := CreateSampleUnmodifiedRightReelCommand()
	cmdViewSampleUnmodifiedRightReel.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewSampleUnmodifiedRightReel)
	cmdViewTotalSupply := CreateTotalSupplyCommand()
	cmdViewTotalSupply.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewTotalSupply)
	cmdViewSpinCost := CreateSpinCostCommand()
	cmdViewSpinCost.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewSpinCost)
	cmdViewImprovedLeftReel := CreateImprovedLeftReelCommand()
	cmdViewImprovedLeftReel.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewImprovedLeftReel)
	cmdViewSampleUnmodifiedCenterReel := CreateSampleUnmodifiedCenterReelCommand()
	cmdViewSampleUnmodifiedCenterReel.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewSampleUnmodifiedCenterReel)
	cmdViewBlocksToAct := CreateBlocksToActCommand()
	cmdViewBlocksToAct.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewBlocksToAct)
	cmdViewLastSpinBlock := CreateLastSpinBlockCommand()
	cmdViewLastSpinBlock.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewLastSpinBlock)
	cmdViewUnmodifiedLeftReel := CreateUnmodifiedLeftReelCommand()
	cmdViewUnmodifiedLeftReel.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewUnmodifiedLeftReel)
	cmdViewDecimals := CreateDecimalsCommand()
	cmdViewDecimals.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewDecimals)
	cmdViewSampleImprovedCenterReel := CreateSampleImprovedCenterReelCommand()
	cmdViewSampleImprovedCenterReel.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewSampleImprovedCenterReel)
	cmdViewCostToRespin := CreateCostToRespinCommand()
	cmdViewCostToRespin.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewCostToRespin)
	cmdViewOutcome := CreateOutcomeCommand()
	cmdViewOutcome.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewOutcome)
	cmdViewUnmodifiedCenterReel := CreateUnmodifiedCenterReelCommand()
	cmdViewUnmodifiedCenterReel.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewUnmodifiedCenterReel)
	cmdViewSampleUnmodifiedLeftReel := CreateSampleUnmodifiedLeftReelCommand()
	cmdViewSampleUnmodifiedLeftReel.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewSampleUnmodifiedLeftReel)

	cmdTransactAccept := CreateAcceptCommand()
	cmdTransactAccept.GroupID = TransactGroup.ID
	cmd.AddCommand(cmdTransactAccept)
	cmdTransactApprove := CreateApproveCommand()
	cmdTransactApprove.GroupID = TransactGroup.ID
	cmd.AddCommand(cmdTransactApprove)
	cmdTransactSpin := CreateSpinCommand()
	cmdTransactSpin.GroupID = TransactGroup.ID
	cmd.AddCommand(cmdTransactSpin)
	cmdTransactTransfer := CreateTransferCommand()
	cmdTransactTransfer.GroupID = TransactGroup.ID
	cmd.AddCommand(cmdTransactTransfer)
	cmdTransactTransferFrom := CreateTransferFromCommand()
	cmdTransactTransferFrom.GroupID = TransactGroup.ID
	cmd.AddCommand(cmdTransactTransferFrom)
	cmdTransactReceive := CreateReceiveCommand()
	cmdTransactReceive.GroupID = TransactGroup.ID
	cmd.AddCommand(cmdTransactReceive)

	return cmd
}
